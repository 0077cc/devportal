<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2019
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\Views;

/**
 * Ensure content type is translation enabled
 */
function apic_api_update_8111() {
  \Drupal::configFactory()
    ->getEditable('language.content_settings.node.api')
    ->set('langcode', 'en')
    ->set('status', TRUE)
    ->set('dependencies', ['config' => [0 => 'node.type.api'], 'module' => [0 => 'content_translation']])
    ->set('third_party_settings', ['content_translation' => ['enabled' => TRUE]])
    ->set('id', 'node.api')
    ->set('target_entity_type_id', 'node')
    ->set('target_bundle', 'api')
    ->set('default_langcode', 'site_default')
    ->set('language_alterable', FALSE)
    ->save();

  $view = Views::getView('apis');
  $filters = $view->getDisplay()->getOption('filters');
  if (!array_key_exists('select_translation', $filters)) {
    $filters['select_translation'] = [
      'id' => 'select_translation',
      'table' => 'node_field_data',
      'field' => 'select_translation',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => '=',
      'value' => 'default',
      'group' => 1,
      'exposed' => FALSE,
      'expose' => [
        'operator_id' => '',
        'label' => '',
        'description' => '',
        'use_operator' => FALSE,
        'operator' => '',
        'identifier' => '',
        'required' => FALSE,
        'remember' => FALSE,
        'multiple' => FALSE,
        'remember_roles' => [
          'authenticated' => 'authenticated',
        ],
      ],
      'is_grouped' => FALSE,
      'group_info' => [
        'label' => '',
        'description' => '',
        'identifier' => '',
        'optional' => TRUE,
        'widget' => 'select',
        'multiple' => FALSE,
        'remember' => FALSE,
        'default_group' => 'All',
        'default_group_multiple' => [],
        'group_items' => [],
      ],
      'priorities' => '',
      'default_language_only' => 0,
      'include_content_with_unpublished_translation' => 0,
      'entity_type' => 'node',
      'plugin_id' => 'select_translation_filter',
    ];
    $view->getDisplay()->setOption('filters', $filters);
    $view->save();

    $view2 = Views::getView('apis');
    $view2->setDisplay('page_1');
    $view2->getDisplay()->setOption('rendering_language', '***LANGUAGE_language_interface***');
    $view2->save();
  }
}

/**
 * Use taxonomy search with depth
 */
function apic_api_update_8112() {

  $view = Views::getView('apis');
  $filters = $view->getDisplay()->getOption('filters');
  // remove old tid based filter
  if (array_key_exists('tid', $filters)) {
    unset($filters['tid']);
  }
  // add new tid with depth
  if (!array_key_exists('term_node_tid_depth', $filters)) {
    $filters['term_node_tid_depth'] = [
      'id' => 'term_node_tid_depth',
      'table' => 'node_field_data',
      'field' => 'term_node_tid_depth',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => 'or',
      'value' => NULL,
      'group' => 1,
      'exposed' => TRUE,
      'expose' => [
        'operator_id' => 'term_node_tid_depth_op',
        'label' => 'Category',
        'description' => '',
        'use_operator' => FALSE,
        'operator' => 'term_node_tid_depth_op',
        'identifier' => 'term_node_tid_depth',
        'required' => FALSE,
        'remember' => TRUE,
        'multiple' => FALSE,
        'remember_roles' => [
          'authenticated' => 'authenticated',
        ],
        'reduce' => FALSE,
      ],
      'is_grouped' => FALSE,
      'group_info' => [
        'label' => '',
        'description' => '',
        'identifier' => '',
        'optional' => TRUE,
        'widget' => 'select',
        'multiple' => FALSE,
        'remember' => FALSE,
        'default_group' => 'All',
        'default_group_multiple' => [],
        'group_items' => [],
      ],
      'reduce_duplicates' => FALSE,
      'type' => 'cshs',
      'limit' => TRUE,
      'hierarchy' => FALSE,
      'error_message' => TRUE,
      'depth' => 0,
      'vid' => 'tags',
      'parent' => '0',
      'level_labels' => '',
      'force_deepest' => 0,
      'entity_type' => 'node',
      'plugin_id' => 'taxonomy_index_tid_depth',
    ];
    if (!isset($filters['type']['group'])) {
      $filters['type']['group'] = 1;
    }
  }
  $view->getDisplay()->setOption('filters', $filters);
  $filter_groups = $view->getDisplay()->getOption('filter_groups');
  if (!isset($filter_groups)) {
    $filter_groups = ['operator' => 'AND', 'groups' => [1 => 'AND']];
    $view->getDisplay()->setOption('filter_groups', $filter_groups);
  }
  $view->save();
}

/**
 * Changes :
 *  - add api_encodedswagger to api
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8113() {

  // check if new field exists, skip if it does
  // it shouldn't, but better safe than sorry
  $newFieldConfig = FieldConfig::loadByName('node', 'api', 'api_encodedswagger');
  if (!isset($newFieldConfig) || empty($newFieldConfig)) {

    // Create a new field storage 'api_encodedswagger'
    $fieldStorageConfig = FieldStorageConfig::create([
      'field_name' => 'api_encodedswagger',
      'entity_type' => 'node',
      'type' => 'string_long',
      'required' => FALSE,
      'cardinality' => 1,
    ]);
    $fieldStorageConfig->save();

    // Create a new field for the api module
    $fieldConfig = FieldConfig::create([
      'field_name' => 'api_encodedswagger',
      'entity_type' => 'node',
      'bundle' => 'api',
      'label' => t('Encoded Open API Document'),
    ]);
    $fieldConfig->save();

    // Modify entity form display modes to show application_image field
    $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.api.default');
    if ($formDisplay !== NULL) {
      $values = $formDisplay->getComponent('api_swagger');
      if ($values !== null) {
        $formDisplay->setComponent('api_encodedswagger', $values); // copy all existing settings across from api_swagger field
        $formDisplay->save();
      }
    }

    // Do the same for the view display modes
    $displayModes = ['default', 'card', 'teaser'];
    foreach ($displayModes as $displayMode) {
      $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.' . $displayMode);
      if ($viewDisplay !== NULL) {
        $values = $viewDisplay->getComponent('api_swagger');
        if ($values !== null) {
          $viewDisplay->setComponent('api_encodedswagger', $values); // copy all existing settings across from api_swagger field
          $viewDisplay->save();
        }
      }
    }
  }
}

/**
 * Update the field storage id for api_state to correct for a typo in early fixpacks
 */
function apic_api_update_8114() {
  $fieldConfig = \Drupal\field\Entity\FieldConfig::loadByName('node', 'api', 'api_state');
  $storage = $fieldConfig->getFieldStorageDefinition();
  if ($storage !== null) {
    $storage->set('id', 'node.api_state');
    $storage->save();
  }
}