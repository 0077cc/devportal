/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 *
 * (C) Copyright IBM Corporation 2017, 2019
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
window.apiConnectExplorer = {
  attachPoint: '#root',
  options: {
    renderSchemaView: true,
    headerActive: false,
// enable proxyUrl to route through the webpack dev proxy
//    proxyUrl: "/api/proxyService"
    infoSectionEntries: [
      [
        {
          "class": "testInfo",
          "html": "Test Info Section<p>This is HTML content added to the infosection.</p><p>This has <b>HTML</b> tags in it.</p>",
          "location": "OVERVIEW"
        },
        {
          "class": "testInfo2",
          "html": "Test Info Section 2<p>This is more HTML content added to the infosection.</p><p>This has <b>HTML</b> tags in it.</p>",
          "location": "OVERVIEW"
        },
        {
          "class": "definitionsInfo",
          "html": "Definitions Info Section<p>Extra information for the definitions page.</p><p>This is more information <a href='http://www.example.com/'>example.com</a></p>",
          "location": "DEFINITIONS"
        }
      ]
    ],
    documentationEntries: [
      [
        {title: "Test Documentation", url: "/assets/testDocumentation.html", extractPortalContent: true},
        {title: "Not found url", url: "/notFoundURL.html"}
      ]
    ]
  },
  apps: [
    {
      "name": "Application One",
      "description": "The first application",
      "redirectUri": ["https://apictest1.example.com/redirect"],
      "credentials": [
        {
          "client_id": "51414fa6-a2e7-443a-a684-794fecb9b94b",
          "description": "Default"
        }
      ],
    },
    {
      "name": "Application Two",
      "description": "The second application",
      "redirectUri": ["https://example2.com/redirectUri", "https://apictest.example2.com/redirect"],
      "credentials": [
        {
          "client_id": "e159aaf8-b789-479b-859f-app2cred1",
          "description": "Default"
        },
        {
          "client_id": "e159aaf8-b789-479b-859f-app2cred2",
          "description": "Something else",
        }
      ]
    },
    {
      "name": "Application Three",
      "description": "The third application",
      "redirectUri": [],
      "credentials": [
        {
          "client_id": "51414fa6-a2e7-443a-a684-app3cred1",
          "description": "Default"
        }
      ],
    },
    {
      "name": "Application Four",
      "description": "The fourth application",
      "redirectUri": null,
      "credentials": [
        {
          "client_id": "51414fa6-a2e7-443a-a684-app4cred1",
          "description": "Default"
        }
      ],
    },
    {
      "name": "Application Five",
      "description": "The fifth application",
      "redirectUri": [""],
      "credentials": [
        {
          "client_id": "51414fa6-a2e7-443a-a684-app5cred1",
          "description": "Default"
        }
      ],
    },
    {
      "name": "Application Six",
      "description": "The sixth application",
      "redirectUri": "https://example6.com/redirectUri",
      "credentials": [
        {
          "client_id": "51414fa6-a2e7-443a-a684-app6cred1",
          "description": "Default"
        }
      ],
    }
  ],
  apis: [
    {
      "basePath": "/payments",
      "definitions": {
        "Error": {
          "properties": {
            "errorCode": {
              "enum": [
                "TECHNICAL_ERROR",
                "VALIDATION_ERROR",
                "NOTFOUND_ERROR",
                "NOCONSENTSPECIFIED_ERROR",
                "CONSENTNOTVALIDFORACCOUNT_ERROR"
              ],
              "type": "string",
              "xml": {
                "attribute": false,
                "name": "errorCode",
                "wrapped": false
              }
            },
            "errorMessage": {
              "type": "string",
              "xml": {
                "attribute": false,
                "name": "errorMessage",
                "wrapped": false
              }
            }
          },
          "title": "Error",
          "type": "object"
        },
        "GetPaymentRequestsResponse": {
          "properties": {
            "currentDateTime": {
              "format": "date-time",
              "type": "string"
            },
            "paymentRequests": {
              "items": {
                "$ref": "#/definitions/PaymentRequestWithMetadata"
              },
              "type": "array"
            }
          },
          "title": "GetPaymentRequestsResponse",
          "type": "object"
        },
        "PaymentCreatedResponse": {
          "properties": {
            "assignedId": {
              "type": "string"
            },
            "paymentPageUrl": {
              "type": "string"
            }
          },
          "title": "PaymentCreatedResponse",
          "type": "object"
        },
        "PaymentRequest": {
          "properties": {
            "accountIban": {
              "type": "string"
            },
            "accountName": {
              "type": "string"
            },
            "accountSegment": {
              "enum": [
                "RETAIL",
                "BUSINESS"
              ],
              "type": "string"
            },
            "amountCents": {
              "type": "integer"
            },
            "clientReference": {
              "type": "string"
            },
            "created": {
              "format": "date-time",
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "expired": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "numPayers": {
              "format": "int32",
              "type": "integer"
            },
            "transactions": {
              "items": {
                "$ref": "#/definitions/PaymentRequestTransaction"
              },
              "type": "array"
            }
          },
          "title": "PaymentRequest",
          "type": "object"
        },
        "PaymentRequestAccount": {
          "properties": {
            "currency": {
              "type": "string"
            },
            "iban": {
              "type": "string"
            }
          },
          "title": "PaymentRequestAccount",
          "type": "object"
        },
        "PaymentRequestCreateRequest": {
          "properties": {
            "amountCents": {
              "type": "integer"
            },
            "clientReference": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "iban": {
              "type": "string"
            },
            "numPayers": {
              "format": "int32",
              "type": "integer"
            }
          },
          "title": "PaymentRequestCreateRequest",
          "type": "object"
        },
        "PaymentRequestTransaction": {
          "properties": {
            "accountIban": {
              "type": "string"
            },
            "accountName": {
              "type": "string"
            },
            "amountCents": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "tsPaid": {
              "format": "date-time",
              "type": "string"
            }
          },
          "title": "PaymentRequestTransaction",
          "type": "object"
        },
        "PaymentRequestWithMetadata": {
          "properties": {
            "paymentPageUrl": {
              "type": "string"
            },
            "paymentRequest": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "title": "PaymentRequestWithMetadata",
          "type": "object"
        }
      },
      "host": "$(catalog.host)",
      "info": {
        "description": "Sandbox implementation for MyPaymentRequest API.\n\n\n`NOTE: To use this API a valid TLS certificate is required.`\n\n---\n\nThis implementation will return succesful responses by default. The following\nscenarios are supported for the different endpoints.\n\n\n| Endpoint | Trigger   | HTTP status | Description |\n| -------- | --------- | ----------- | ----------- |\n| initiate | (default) | 200         | Happy flow for initiating a payment request |\n| initiate | invalid request (e.g. amount = 0) | 400         | Validation error |\n| initiate | field `description` = INVALID_CONSENT | 403         | No consent given for the given IBAN |\n| initiate | field `description` = TECHNICAL_ERROR | 500         | Technical error |\n| retrieval | (default) | 200         | Happy flow for retrieving a list of payment requests |\n| retrieval | invalid request | 400         | Invalid request (e.g. no limit) |\n| retrieval | param `limit` = -2 | 403         | No consent information specified |\n| retrieval | param `limit` = -1 | 500         | Technical error |\n| delete | (default) | 200         | Happy flow for retrieving a list of payment requests |\n| delete | param `id` = 11111111-1111-1111-1111-111111111111 | 403         | No consent given for the payment request iban |\n| delete | param `id` = 00000000-0000-0000-0000-000000000000 | 404         | Payment request to delete could not be found |\n| delete | param `id` = 22222222-2222-2222-2222-222222222222 | 500         | Technical error |\n| accounts | (default) | 200         | Happy flow for retrieving a list of accounts |\n| accounts | header `x-scenario` = INVALID_CONSENT | 403         | No consent information specified |\n| accounts | header `x-scenario` = TECHNICAL_ERROR | 500         | Technical error |",
        "title": "Payment Request sb",
        "version": "1.0.2",
        "x-ibm-name": "payment-request-sb"
      },
      "paths": {
        "/mypaymentrequests": {
          "get": {
            "description": "Returns a list of payment requests for the user that is logged in",
            "operationId": "getPaymentRequestsUsingGET",
            "parameters": [
              {
                "default": 0,
                "description": "Number of payment requests to skip for pagination.",
                "format": "int32",
                "in": "query",
                "name": "offset",
                "required": false,
                "type": "integer"
              },
              {
                "default": 25,
                "description": "Maximum number of payments requests to return.",
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "format": "int32",
                "in": "query",
                "maximum": 100,
                "minimum": 1,
                "name": "limit",
                "required": false,
                "type": "integer"
              },
              {
                "default": "ALL",
                "description": "Optional filter on the completion status of the payment request",
                "enum": [
                  "ALL",
                  "INCOMPLETE",
                  "COMPLETE"
                ],
                "in": "query",
                "name": "completionStatus",
                "required": false,
                "type": "string"
              }
            ],
            "produces": [
              "*/*",
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Successfully retrieved GetPaymentRequestsResponse",
                "schema": {
                  "$ref": "#/definitions/GetPaymentRequestsResponse"
                }
              },
              "403": {
                "description": "Invalid consent information specified",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "500": {
                "description": "Retrieving GetPaymentRequestsResponse failed due to some server error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "summary": "getPaymentRequests"
          },
          "post": {
            "consumes": [
              "application/json"
            ],
            "description": "Creates a new payment request",
            "operationId": "initiatePaymentRequestUsingPOST",
            "parameters": [
              {
                "description": "Parameters for the payment request to create. The iban, currency, amount and description are required. The numPayers field can be provided for retail customers, the clientReference field can be provided for business customers.",
                "in": "body",
                "name": "paymentRequestCreateRequest",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/PaymentRequestCreateRequest"
                }
              }
            ],
            "produces": [
              "*/*",
              "application/json"
            ],
            "responses": {
              "201": {
                "description": "Successfully created a PaymentRequest",
                "schema": {
                  "$ref": "#/definitions/PaymentCreatedResponse"
                }
              },
              "400": {
                "description": "Validation exception",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "403": {
                "description": "Consent information is invalid or no consent given for the account for which a payment request is created.",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "500": {
                "description": "Initiating payment request failed due to some server error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "summary": "initiatePaymentRequest"
          }
        },
        "/mypaymentrequests/accounts": {
          "get": {
            "description": "Returns a list of accounts that the current user can create payment requests for",
            "operationId": "getAccountsUsingGET",
            "produces": [
              "*/*"
            ],
            "responses": {
              "200": {
                "description": "Successfully returned a list of accounts",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/PaymentRequestAccount"
                  },
                  "type": "array"
                }
              },
              "403": {
                "description": "If the consent information is invalid",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "500": {
                "description": "Looking up the list of accounts failed due to some server error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "summary": "getPaymentRequestAccounts"
          }
        },
        "/mypaymentrequests/{id}": {
          "delete": {
            "description": "Deletes a single payment request for the current user",
            "operationId": "deletePaymentRequestUsingDELETE",
            "parameters": [
              {
                "description": "Id for the payment request to delete",
                "in": "path",
                "name": "id",
                "required": true,
                "type": "string"
              }
            ],
            "produces": [
              "*/*"
            ],
            "responses": {
              "204": {
                "description": "Successfully deleted PaymentRequest"
              },
              "401": {
                "description": "Missing PathVariable id",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "403": {
                "description": "If the consent information is invalid or the user has not given consent for the account of the payment request",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "404": {
                "description": "If PaymentRequest cannot be found in database or belongs to another user",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "500": {
                "description": "Deleting PaymentRequest failed due to some server error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "summary": "deletePaymentRequest"
          }
        }
      },
      "schemes": [
        "https"
      ],
      "security": [
        {
          "clientID": [

          ],
          "oauth2 access code flow": [
            "PaymentRequest"
          ]
        }
      ],
      "securityDefinitions": {
        "clientID": {
          "description": "ClientId as provided by the dev portal.",
          "in": "header",
          "name": "X-IBM-Client-Id",
          "type": "apiKey"
        },
        "oauth2 access code flow": {
          "authorizationUrl": "https://$(AuthorizationACHostPath)",
          "description": "NOTE: Please use the Authorization and Token URL as provided by the oAuth2 Services.",
          "flow": "accessCode",
          "scopes": {
            "PaymentRequest": ""
          },
          "tokenUrl": "https://$(TokenACHostPath)",
          "type": "oauth2"
        }
      },
      "swagger": "2.0",
      "x-ibm-configuration": {
        "application-authentication": {
          "certificate": true
        },
        "assembly": {
          "execute": [
            {
              "set-variable": {
                "actions": [
                  {
                    "set": "message.headers.x-kwx-requestor-id",
                    "value": "Public API"
                  }
                ],
                "title": "Set requestor ID",
                "version": "1.0.0"
              }
            },
            {
              "set-variable": {
                "actions": [
                  {
                    "set": "message.headers.x-brit-host",
                    "value": "$(x-brit-host)"
                  }
                ],
                "title": "set x-brit-host",
                "version": "1.0.0"
              }
            },
            {
              "save-contexts": {
                "version": "1.0.0"
              }
            },
            {
              "operation-switch": {
                "case": [
                  {
                    "execute": [
                      {
                        "invoke": {
                          "cache-response": "no-cache",
                          "cache-ttl": 900,
                          "stop-on-error": [

                          ],
                          "target-url": "$(PaymentsRequestURL)?offset=$(request.parameters.offset)&limit=$(request.parameters.limit)&completionStatus=$(request.parameters.completionStatus)",
                          "timeout": 6,
                          "title": "get",
                          "verb": "GET",
                          "version": "1.0.0"
                        }
                      }
                    ],
                    "operations": [
                      "getPaymentRequestsUsingGET"
                    ]
                  },
                  {
                    "execute": [
                      {
                        "invoke": {
                          "cache-response": "no-cache",
                          "cache-ttl": 900,
                          "stop-on-error": [
                            null
                          ],
                          "target-url": "$(PaymentsRequestURL)",
                          "timeout": 6,
                          "title": "post",
                          "verb": "POST",
                          "version": "1.0.0"
                        }
                      }
                    ],
                    "operations": [
                      "initiatePaymentRequestUsingPOST"
                    ]
                  },
                  {
                    "execute": [
                      {
                        "invoke": {
                          "cache-response": "no-cache",
                          "cache-ttl": 900,
                          "stop-on-error": [
                            null
                          ],
                          "target-url": "$(PaymentsRequestURL)/{id}",
                          "timeout": 6,
                          "title": "delete",
                          "verb": "DELETE",
                          "version": "1.0.0"
                        }
                      }
                    ],
                    "operations": [
                      "deletePaymentRequestUsingDELETE"
                    ]
                  },
                  {
                    "execute": [
                      {
                        "invoke": {
                          "cache-response": "no-cache",
                          "cache-ttl": 900,
                          "stop-on-error": [
                            null
                          ],
                          "target-url": "$(PaymentsRequestURL)/accounts",
                          "timeout": 6,
                          "title": "account",
                          "verb": "GET",
                          "version": "1.0.0"
                        }
                      }
                    ],
                    "operations": [
                      "getAccountsUsingGET"
                    ]
                  }
                ],
                "otherwise": [

                ],
                "title": "operation-switch",
                "version": "1.0.0"
              }
            },
            {
              "backend-log": {
                "version": "1.0.0"
              }
            },
            {
              "switch": {
                "case": [
                  {
                    "condition": "apim.getvariable('message.status.code') == 200 || apim.getvariable('message.status.code') == 201 ",
                    "execute": [
                      {
                        "validate": {
                          "definition": "response",
                          "title": "validate response",
                          "version": "1.0.0"
                        }
                      }
                    ]
                  },
                  {
                    "condition": "apim.getvariable('message.status.code') == 204 || (apim.getvariable('message.status.code') => 400 &&  apim.getvariable('message.status.code') < 600)",
                    "execute": [

                    ]
                  }
                ],
                "title": "switch",
                "version": "1.0.0"
              }
            }
          ]
        },
        "cors": {
          "enabled": true
        },
        "enforced": true,
        "phase": "realized",
        "properties": {
          "AuthorizationACHostPath": {
            "description": "",
            "encoded": false,
            "value": "${AuthorizationACHostPath}"
          },
          "PaymentsRequestURL": {
            "description": "",
            "encoded": false,
            "value": "${PaymentsRequestURL}"
          },
          "TokenACHostPath": {
            "description": "",
            "encoded": false,
            "value": "${TokenACHostPath}"
          },
          "x-brit-host": {
            "description": "",
            "encoded": false,
            "value": "${x-brit-host}"
          }
        },
        "testable": false
      }
    }
      ,{
    "swagger": "2.0",
    "basePath": "/customerdb/v1",
    "info": {
      "title": "Customer Database",
      "description": "This is the customer database sample Swagger document included with IBM Integration Bus",
      "version": "1.0.0"
    },
    "definitions": {
      "Customer": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "firstname",
          "lastname",
          "address"
        ]
      }
    },
    "tags": [
      {
        "name": "customers",
        "description": "Operations on customers in the customer database"
      }
    ],
    "paths": {
      "/customers": {
        "get": {
          "operationId": "getAllCustomers",
          "summary": "Get all customers from the database",
          "parameters": [
            {
              "name": "max",
              "in": "query",
              "description": "Maximum number of customers to get from the database",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "An array of customers from the database",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Customer"
                }
              }
            }
          },
          "tags": [
            "customers"
          ]
        },
        "post": {
          "operationId": "addCustomer",
          "summary": "Add a customer to the database",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": "The customer to add to the database",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Customer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "If the customer was successfully added to the database"
            }
          },
          "tags": [
            "customers"
          ]
        }
      },
      "/customers/{customerId}": {
        "get": {
          "operationId": "getCustomer",
          "summary": "Get a specified customer from the database",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "description": "The ID of the customer to get from the database",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "The specified customer from the database",
              "schema": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "tags": [
            "customers"
          ]
        },
        "delete": {
          "operationId": "deleteCustomer",
          "summary": "Delete a specified customer from the database",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "description": "The ID of the customer to delete from the database",
              "required": true,
              "type": "integer"
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Provide the authorization key that permits the customer to be deleted from the database",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "If the customer was successfully deleted from the database"
            }
          },
          "tags": [
            "customers"
          ]
        },
        "put": {
          "operationId": "updateCustomer",
          "summary": "Update a customer in the database",
          "parameters": [
            {
              "name": "customerId",
              "in": "path",
              "description": "The ID of the customer to update in the database",
              "required": true,
              "type": "integer"
            },
            {
              "name": "body",
              "in": "body",
              "description": "The customer to update in the database",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Customer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "If the customer was successfully updated in the database"
            }
          },
          "tags": [
            "customers"
          ]
        }
      }
    },
    "host": "example.com",
    "schemes": [
      "https"
    ],
    "securityDefinitions": {
      "Basic Auth": {
        "type": "basic"
      }
    },
    "security": [
      {
        "Basic Auth": [

        ]
      }
    ]
  },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "thing-creation",
        "title": "Thing Creation",
        "version": "1.0.0",
        "description": "This API will create a thing for any given URL.",
        "contact": {
          "name": "Joe Bloggs",
          "email": "joe@bloggs.com"
        }
      },
      "schemes": [
        "https"
      ],
      "basePath": "/thing/v1",
      "consumes": [
        "application/x-www-form-urlencoded"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "clientIdSecret": {
          "type": "apiKey",
          "description": "",
          "in": "header",
          "name": "X-IBM-Client-Secret"
        },
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "security": [
        {
          "clientIdHeader": [],
          "clientIdSecret": []
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "phase": "realized"
      },
      "paths": {
        "/create": {
          "post": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/200-Ok"
                }
              },
              "401": {
                "description": "401 Unauthorized",
                "schema": {
                  "$ref": "#/definitions/401-Unauthorized"
                }
              },
              "429": {
                "description": "429 RateLimitExceeded",
                "schema": {
                  "$ref": "#/definitions/429-RateLimitExceeded"
                }
              }
            },
            "parameters": [
              {
                "name": "User",
                "type": "string",
                "required": true,
                "in": "formData",
                "description": "User’s email address creating thing"
              },
              {
                "name": "Url",
                "type": "string",
                "required": true,
                "in": "formData",
                "description": "URL"
              },
              {
                "name": "CustomAlias",
                "type": "string",
                "required": false,
                "in": "formData",
                "description": "If custom alias is required"
              },
              {
                "name": "apikey",
                "type": "string",
                "required": true,
                "in": "header",
                "description": "API Key"
              },
              {
                "name": "apisecret",
                "type": "string",
                "required": true,
                "in": "header",
                "description": "API Secret"
              }
            ],
            "description": "This API operation can be used to generate a thing for any url. Custom alias can be provided or API will auto generate unique url identifier."
          }
        }
      },
      "definitions": {
        "200-Ok": {
          "description": "",
          "type": "object",
          "properties": {
            "result": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "hits": {
                  "type": "number"
                },
                "created_at": {
                  "type": "string"
                },
                "alias": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                },
                "completeurl": {
                  "type": "string"
                },
                "aliasurl": {
                  "type": "string"
                }
              }
            }
          }
        },
        "401-Unauthorized": {
          "type": "object",
          "properties": {
            "httpCode": {
              "type": "string"
            },
            "httpMessage": {
              "type": "string"
            },
            "moreInformation": {
              "type": "string"
            }
          }
        },
        "429-RateLimitExceeded": {
          "type": "object",
          "properties": {
            "httpCode": {
              "type": "string",
              "description": "429"
            },
            "httpMessage": {
              "type": "string",
              "description": "Too Many Requests"
            },
            "moreInformation": {
              "type": "string",
              "description": "Rate Limit exceeded"
            }
          }
        }
      },
      "tags": [
        {
          "name": "QWERT",
          "description": "My tag"
        }
      ],
      "x-ibm-endpoints": [
        {
          "endpointUrl": "https://example.com/foo/bar",
          "type": [
            "production",
            "development"
          ]
        },
        {
          "endpointUrl": "https://prod.example.com/foo/bar",
          "description": "Prod Endpoint",
          "type": [
            "production",
            "development"
          ]
        }
      ]
    },
    {
      "openapi": "3.0.0",
      "servers": [
        {
          "url": "/items"
        }
      ],
      "info": {
        "version": "1.0.0",
        "title": "Items Endpoint API (Open API v3)",
        "x-ibm-name": "Items-Endpoint-API-OAI3",
        "description": "Various resources created from the /tolerant/items endpoint",
        "contact": {
          "name": "John Doe",
          "email": "john.doe@example.com",
          "url": "https://www.example.com"
        },
        "termsOfService": "https://www.example.com/terms",
        "x-info-extension": {
          "Name": "Extension for info section",
          "Details": {
            "type": "object",
            "properties": {
              "Location": "Somewhere",
              "Specifics": "over the rainbow"
            }
          }
        }
      },
      "paths": {
        "/specific/item/{itemId}": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "x-response-extension": {
                  "Name": "Extension for an inline operation level response definition",
                  "Details": {
                    "type": "object",
                    "properties": {
                      "Location": "Somewhere",
                      "Specifics": "over the rainbow"
                    }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/item"
                    },
                    "example": {
                      "id": 4747,
                      "name": "example-response",
                      "categories": "blah blah",
                      "description": "response example at the mediatype.example level"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/item"
                    },
                    "examples": {
                      "example1": {
                        "value": {
                          "id": 4747,
                          "name": "example-response",
                          "categories": "blah blah",
                          "description": "response example at mediatype.examples level"
                        }
                      }
                    }
                  }
                },
                "headers": {
                  "x-call-identifier": {
                    "description": "a unique identifier for the call",
                    "schema": {
                      "type": "string"
                    }
                  },
                  "x-stacktrace": {
                    "$ref": "#/components/headers/x-stacktrace"
                  }
                },
                "links": {
                  "getItem": {
                    "getItemById": "getItem",
                    "parameters": {
                      "itemId": "$response.body#/id"
                    },
                    "description": "The `id` value returned in the response can be used as the `userId` parameter in `GET /specific/item/{itemId}`.\n"
                  }
                },
              },
              "404": {
                "description": "404 Not Found"
              }
            },
            "tags": [
              "retrieve",
              "item",
              "one"
            ],
            "summary": "Get a specific item from the database",
            "description": "Get a specific item from the database",
            "x-get-extension": {
              "Name": "Extension for GET /item/{itemId}",
              "Details": {
                "type": "object",
                "properties": {
                  "Location": "Somewhere",
                  "Specifics": "over the rainbow"
                }
              }
            },
            "parameters": [
              {
                "name": "itemId",
                "required": true,
                "in": "path",
                "description": "The ID of the item to look up (local override)",
                "x-get-itemId-parameter-extension": {
                  "Name": "Extension for itemId parameter on GET /item/{itemId}",
                  "Details": {
                    "type": "object",
                    "properties": {
                      "Location": "Somewhere",
                      "Specifics": "over the rainbow"
                    }
                  }
                },
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              {
                "name": "'parameter with spaces'",
                "required": true,
                "in": "query",
                "description": "A dodgy parameter",
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example1": {
                    "value": "this is an example string at parameter.examples level"
                  },
                  "example2": {
                    "value": "this is another example string at parameter.examples level"
                  }
                }
              },
              {
                "name": "something(withBrackets)",
                "required": true,
                "in": "query",
                "description": "A dodgy parameter",
                "schema": {
                  "type": "string",
                  "example": "example at parameter.schema.example level"
                }
              },
              {
                "name": "something$With@other+characters",
                "required": true,
                "in": "query",
                "description": "A dodgy parameter",
                "schema": {
                  "type": "string"
                },
                "example": "example at parameter.example level"
              },
              {
                "name": "apattern",
                "in": "query",
                "required": true,
                "description": "something using a pattern",
                "example": "FR7612345987650123456789014",
                "pattern": '[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}',
                "schema" : {
                "type": "string" }
              },
              {
                "name": "secretSauce",
                "required": true,
                "in": "cookie",
                "description": "Do you want secret sauce?",
                "schema": {
                  "type": "string",
                  "examples": {
                    "example1": {
                      "value": "example at parameter.schema.examples level"
                    },
                    "example2": {
                      "value": "example at parameter.schema.examples level"
                    }
                  }
                }
              }
            ]
          },
          "parameters": [
            {
              "name": "itemId",
              "required": true,
              "in": "path",
              "description": "The ID of the item to retrieve (path level)",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 474747
              }
            }
          ],
          "put": {
            "responses": {
              "200": {
                "description": "200 OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  }
                }
              }
            },
            "tags": [
              "update",
              "item",
              "one"
            ],
            "summary": "Update the specified item replacing the old definition with the new one",
            "description": "Update the specified item replacing the old definition with the new one",
            "parameters": [
              {
                "name": "itemId",
                "required": true,
                "in": "path",
                "description": "The ID of the item to update",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            ],
            "requestBody": {
              "content": {
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/item"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/item"
                  }
                }
              },
              "description": "The definition of the item",
              "required": true
            }
          },
          "post": {
            "responses": {
              "201": {
                "description": "201 Created",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  }
                }
              }
            },
            "tags": [
              "create",
              "item",
              "one"
            ],
            "summary": "Create a new item in the items database",
            "description": "Create a new item in the items database",
            "parameters": [
              {
                "name": "itemId",
                "required": true,
                "in": "path",
                "description": "The ID of the item to create",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            ],
            "requestBody": {
              "content": {
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/item"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/item"
                  }
                }
              },
              "description": "The definition of the item to create",
              "required": true
            }
          },
          "delete": {
            "responses": {
              "200": {
                "description": "200 OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  }
                }
              }
            },
            "tags": [
              "remove",
              "item",
              "one"
            ],
            "summary": "Delete the specified item from the items database",
            "description": "Delete the specified item from the items database",
            "parameters": [
              {
                "name": "itemId",
                "required": true,
                "in": "path",
                "description": "The ID of the item to delete",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            ]
          }
        },
        "/all/items": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/items_body"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/items_body"
                    }
                  }
                }
              }
            },
            "tags": [
              "items",
              "retrieve"
            ],
            "summary": "Get all of the items in the items database",
            "description": "Get all of the items in the items database"
          },
          "post": {
            "responses": {
              "201": {
                "description": "201 Created",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  }
                }
              }
            },
            "tags": [
              "items",
              "create"
            ],
            "summary": "Create multiple new items in the items database",
            "description": "Create multiple new items in the items database",
            "requestBody": {
              "$ref": "#/components/requestBodies/items_body"
            }
          },
          "put": {
            "responses": {
              "200": {
                "description": "200 OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Items_created_or_Updated"
                    }
                  }
                }
              }
            },
            "tags": [
              "update",
              "items"
            ],
            "summary": "Update a number of items in the items database",
            "description": "Update a number of items in the items database",
            "requestBody": {
              "$ref": "#/components/requestBodies/items_body"
            }
          }
        }
      },
      "security": [
        {
          "Client-ID": []
        }
      ],
      "x-ibm-configuration": {
        "gateway": "datapower-gateway",
        "enforced": true,
        "phase": "realized",
        "testable": true,
        "cors": {
          "enabled": true
        }
      },
      "externalDocs": {
        "url": "https://example.com:8443/html/rest.html",
        "description": "External documentation for the endpoint that sits behind this API"
      },
      "x-ibm-endpoints": [
        {
          "endpointUrl": "http://example.com:8080",
          "type": [
            "development",
            "production"
          ]
        }
      ],
      "tags": [
        {
          "name": "apiTag1",
          "description": "this is tag 1",
          "x-tag-extension": {
            "Name": "Extension for an api tag",
            "Details": {
              "type": "object",
              "properties": {
                "Location": "Somewhere",
                "Specifics": "over the rainbow"
              }
            }
          }
        },
        {
          "name": "apiTag2",
          "description": "this is tag 2"
        }
      ],
      "x-banking": {
        "Branch type": "Walk in",
        "location": {
          "city": "San Francisco",
          "state": "CA",
          "citystate": "San Francisco, CA"
        }
      },
      "x-card": {
        "Card type": "visa",
        "Card number": 123456
      },
      "components": {
        "parameters": {
          "globalParam": {
            "name": "globalParam",
            "in": "header",
            "x-global-param-extension": {
              "Name": "Extension for an api level parameter",
              "Details": {
                "type": "object",
                "properties": {
                  "Location": "Somewhere",
                  "Specifics": "over the rainbow"
                }
              }
            },
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBodies": {
          "items_body": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/items_body"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/items_body"
                }
              }
            },
            "description": "The request body to send",
            "required": true
          }
        },
        "securitySchemes": {
          "Client-ID": {
            "description": "The client_id of your subscribed application",
            "in": "query",
            "name": "client_id",
            "type": "apiKey",
            "x-security-extension": {
              "Name": "Extension for a security definition",
              "Details": {
                "type": "object",
                "properties": {
                  "Location": "Somewhere",
                  "Specifics": "over the rainbow"
                }
              }
            }
          }
        },
        "schemas": {
          "result": {
            "properties": {
              "message": {
                "type": "string",
                "description": "A brief message describing the result of the operation"
              },
              "code": {
                "type": "integer",
                "description": "A generic code",
                "format": "int32"
              }
            },
            "description": "The result object returned by some of the calls to the /tolerant/items service",
            "required": [
              "code",
              "message"
            ],
            "x-response-extension": {
              "Name": "Extension for a response definition",
              "Details": {
                "type": "object",
                "properties": {
                  "Location": "Somewhere",
                  "Specifics": "over the rainbow"
                }
              }
            }
          },
          "item": {
            "properties": {
              "categories": {
                "type": "string",
                "description": "The categories that the item has"
              },
              "name": {
                "type": "string",
                "description": "The name of the item"
              },
              "id": {
                "type": "integer",
                "description": "The ID of the item",
                "format": "int32"
              }
            },
            "required": [
              "id",
              "name",
              "categories"
            ],
            "additionalProperties": false,
            "example": {
              "categories": "schema.example",
              "name": "example-item",
              "id": "1234567"
            }
          },
          "items_body": {
            "properties": {
              "item": {
                "type": "string",
                "$ref": "#/components/schemas/array_of_items",
                "description": "A representation of the items"
              }
            },
            "required": [
              "item"
            ]
          },
          "Items_created_or_Updated": {
            "properties": {
              "result": {
                "type": "string",
                "description": "The wrapper around the result",
                "$ref": "#/components/schemas/result"
              }
            },
            "description": "The response when items are created via the /tolerant/items endpoint",
            "required": [
              "result"
            ]
          },
          "array_of_items": {
            "description": "An array of items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/item"
            }
          }
        },
        "headers": {
          "x-stacktrace": {
            "description": "a stacktrace from the server",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "Branches locator",
        "x-ibm-name": "branchesl",
        "version": "1.0.0"
      },
      "host": "$(catalog.host)",
      "schemes": [
        "https"
      ],
      "basePath": "/branchesl",
      "produces": [
        "application/json"
      ],
      "consumes": [
        "application/json"
      ],
      "security": [
        {
          "clientIdHeader": []
        }
      ],
      "securityDefinitions": {
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "x-ibm-configuration": {
        "phase": "realized",
        "testable": true,
        "enforced": true,
        "properties": {
          "target-url": {
            "value": "http://example.com/operation-name",
            "description": "The URL of the target service",
            "encoded": false
          }
        },
        "cors": {
          "enabled": true
        },
        "application-authentication": {
          "certificate": true
        },
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "https://apim-services.mybluemix.net/banka/v1/branches",
                "title": "Branches Invoke",
                "description": "Invoke an API to retrieve the status of all branches in the BankA system"
              }
            }
          ]
        },
        "gateway": "datapower-api-gateway",
        "type": "rest"
      },
      "tags": [],
      "definitions": {
        "address": {
          "properties": {
            "street1": {
              "type": "string",
              "description": "The first line of the address",
              "example": "4660 La Jolla Village Drive"
            },
            "street2": {
              "properties": {},
              "type": "string",
              "description": "The second line of the address",
              "example": "Suite 300"
            },
            "city": {
              "properties": {},
              "type": "string",
              "description": "The city of the address",
              "example": "San Diego"
            },
            "state": {
              "properties": {},
              "type": "string",
              "description": "The state of the address",
              "example": "CA"
            },
            "zip_code": {
              "properties": {},
              "type": "string",
              "description": "The zip code of the address",
              "example": "92122"
            }
          },
          "additionalProperties": false,
          "description": "The format of the address object."
        },
        "branch": {
          "properties": {
            "address": {
              "$ref": "#/definitions/address"
            },
            "type": {
              "properties": {},
              "type": "string",
              "description": "The type of the branch",
              "example": "atm"
            },
            "id": {
              "properties": {},
              "type": "string",
              "description": "The id of the branch",
              "example": "9d72ece0-7e7b-11e5-9038-55f9f9c08c06"
            }
          },
          "additionalProperties": false,
          "description": "The format of the branch field."
        }
      },
      "paths": {
        "/details": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            },
            "summary": "Branch details",
            "description": "Retrieve details of the current branches of BankA"
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "version": "1.0.0",
        "title": "Items Endpoint API",
        "x-ibm-name": "Items-Endpoint-API",
        "description": "Various resources created from the /tolerant/items endpoint",
        "contact": {
          "name": "John Doe",
          "email": "john.doe@example.com",
          "url": "https://www.example.com"
        },
        "termsOfService": "## Terms of Service\n1.  Thou shalt not use this API for bad stuff\n2. Thou shalt pay your subscription fees on time\n3. Thou shalt use these APIs to make your mobile apps",
        "x-info-extension": {
          "Name": "Extension for info section",
          "Details": {
            "type": "object",
            "properties": {
              "Location": "Somewhere",
              "Specifics": "over the rainbow"
            }
          }
        }
      },
      "basePath": "/tolerant",
      "paths": {
        "/item/{itemId}": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/item"
                },
                "x-response-extension": {
                  "Name": "Extension for an inline operation level response definition",
                  "Details": {
                    "type": "object",
                    "properties": {
                      "Location": "Somewhere",
                      "Specifics": "over the rainbow"
                    }
                  }
                }
              },
              "404": {
                "description": "404 Not Found"
              }
            },
            "tags": [
              "retrieve",
              "item",
              "one"
            ],
            "summary": "Get a specific item from the database",
            "description": "Get a specific item from the database",
            "x-get-extension": {
              "Name": "Extension for GET /item/{itemId}",
              "Details": {
                "type": "object",
                "properties": {
                  "Location": "Somewhere",
                  "Specifics": "over the rainbow"
                }
              }
            },
            "parameters": [
              {
                "name": "itemId",
                "type": "integer",
                "required": true,
                "in": "path",
                "format": "int32",
                "description": "The ID of the item to look up",
                "x-get-itemId-parameter-extension": {
                  "Name": "Extension for itemId parameter on GET /item/{itemId}",
                  "Details": {
                    "type": "object",
                    "properties": {
                      "Location": "Somewhere",
                      "Specifics": "over the rainbow"
                    }
                  }
                },
                "example": "111111111"
              },
              {
                "name": "'parameter with spaces'",
                "type": "string",
                "required": true,
                "in": "query",
                "description": "A dodgy parameter"
              },
              {
                "name": "something(withBrackets)",
                "type": "string",
                "required": true,
                "in": "query",
                "description": "A dodgy parameter"
              },
              {
                "name": "something$With@other+characters",
                "type": "string",
                "required": true,
                "in": "query",
                "description": "A dodgy parameter"
              }
            ]
          },
          "parameters": [
            {
              "name": "itemId",
              "type": "integer",
              "required": true,
              "in": "path",
              "description": "The ID of the item to retrieve",
              "format": "int32"
            }
          ],
          "put": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/Items created or Updated"
                }
              }
            },
            "tags": [
              "update",
              "item",
              "one"
            ],
            "summary": "Update the specified item replacing the old definition with the new one",
            "description": "Update the specified item replacing the old definition with the new one",
            "parameters": [
              {
                "name": "itemId",
                "type": "integer",
                "required": true,
                "in": "path",
                "description": "The ID of the item to update",
                "format": "int32"
              },
              {
                "name": "item",
                "required": true,
                "in": "body",
                "schema": {
                  "$ref": "#/definitions/item"
                },
                "description": "The definition of the item"
              }
            ]
          },
          "post": {
            "responses": {
              "201": {
                "description": "201 Created",
                "schema": {
                  "$ref": "#/definitions/Items created or Updated"
                }
              }
            },
            "tags": [
              "create",
              "item",
              "one"
            ],
            "summary": "Create a new item in the items database",
            "description": "Create a new item in the items database",
            "parameters": [
              {
                "name": "itemId",
                "type": "integer",
                "required": true,
                "in": "path",
                "description": "The ID of the item to create",
                "format": "int32"
              },
              {
                "name": "item",
                "required": true,
                "in": "body",
                "schema": {
                  "$ref": "#/definitions/item"
                },
                "description": "The definition of the item to create"
              }
            ]
          },
          "delete": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/Items created or Updated"
                }
              }
            },
            "tags": [
              "remove",
              "item",
              "one"
            ],
            "summary": "Delete the specified item from the items database",
            "description": "Delete the specified item from the items database",
            "parameters": [
              {
                "name": "itemId",
                "type": "integer",
                "required": true,
                "in": "path",
                "description": "The ID of the item to delete",
                "format": "int32"
              }
            ]
          }
        },
        "/items": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/items body"
                }
              }
            },
            "tags": [
              "items",
              "retrieve"
            ],
            "summary": "Get all of the items in the items database",
            "description": "Get all of the items in the items database"
          },
          "post": {
            "responses": {
              "201": {
                "description": "201 Created",
                "schema": {
                  "$ref": "#/definitions/Items created or Updated"
                }
              }
            },
            "tags": [
              "items",
              "create"
            ],
            "summary": "Create multiple new items in the items database",
            "description": "Create multiple new items in the items database",
            "parameters": [
              {
                "name": "Request Body",
                "required": true,
                "in": "body",
                "description": "The request body to send",
                "schema": {
                  "$ref": "#/definitions/items body"
                }
              }
            ]
          },
          "put": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/Items created or Updated"
                }
              }
            },
            "tags": [
              "update",
              "items"
            ],
            "summary": "Update a number of items in the items database",
            "description": "Update a number of items in the items database",
            "parameters": [
              {
                "name": "Request Body",
                "required": true,
                "in": "body",
                "description": "The request body to send",
                "schema": {
                  "$ref": "#/definitions/items body"
                }
              }
            ]
          }
        }
      },
      "securityDefinitions": {
        "Client-ID": {
          "description": "The client_id of your subscribed application",
          "in": "query",
          "name": "client_id",
          "type": "apiKey",
          "x-security-extension": {
            "Name": "Extension for a security definition",
            "Details": {
              "type": "object",
              "properties": {
                "Location": "Somewhere",
                "Specifics": "over the rainbow"
              }
            }
          }
        }
      },
      "security": [
        {
          "Client-ID": []
        }
      ],
      "x-ibm-configuration": {
        "gateway": "datapower-gateway",
        "enforced": true,
        "phase": "realized",
        "testable": true,
        "cors": {
          "enabled": false
        },
        "application-authentication": {
          "certificate": true
        }
      },
      "definitions": {
        "items body": {
          "properties": {
            "item": {
              "$ref": "#/definitions/array of items"
            }
          },
          "required": [
            "item"
          ]
        },
        "result": {
          "properties": {
            "message": {
              "type": "string",
              "description": "A brief message describing the result of the operation"
            },
            "code": {
              "type": "integer",
              "description": "A generic code",
              "format": "int32"
            }
          },
          "description": "The result object returned by some of the calls to the /tolerant/items service",
          "required": [
            "code",
            "message"
          ],
          "x-response-extension": {
            "Name": "Extension for a response definition",
            "Details": {
              "type": "object",
              "properties": {
                "Location": "Somewhere",
                "Specifics": "over the rainbow"
              }
            }
          }
        },
        "Items created or Updated": {
          "properties": {
            "result": {
              "$ref": "#/definitions/result"
            }
          },
          "description": "The response when items are created via the /tolerant/items endpoint",
          "required": [
            "result"
          ]
        },
        "array of items": {
          "description": "An array of items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/item"
          }
        },
        "item": {
          "properties": {
            "categories": {
              "type": "string",
              "description": "The categories that the item has"
            },
            "name": {
              "type": "string",
              "description": "The name of the item"
            },
            "id": {
              "type": "integer",
              "description": "The ID of the item",
              "format": "int32"
            }
          },
          "required": [
            "id",
            "name",
            "categories"
          ],
          "additionalProperties": false
        }
      },
      "parameters": {
        "globalParam": {
          "name": "globalParam",
          "in": "header",
          "type": "string",
          "x-global-param-extension": {
            "Name": "Extension for an api level parameter",
            "Details": {
              "type": "object",
              "properties": {
                "Location": "Somewhere",
                "Specifics": "over the rainbow"
              }
            }
          }
        }
      },
      "externalDocs": {
        "url": "https://example.com/html/rest.html",
        "description": "External documentation for the endpoint that sits behind this API"
      },
      "schemes": [
        "https"
      ],
      "consumes": [
        "application/xml",
        "application/json"
      ],
      "produces": [
        "application/json",
        "application/xml"
      ],
      "x-ibm-endpoints": [
        {
          "endpointUrl": "http://example.com:8080",
          "type": [
            "development",
            "production"
          ]
        }
      ],
      "tags": [
        {
          "name": "apiTag1",
          "description": "this is tag 1",
          "x-tag-extension": {
            "Name": "Extension for an api tag",
            "Details": {
              "type": "object",
              "properties": {
                "Location": "Somewhere",
                "Specifics": "over the rainbow"
              }
            }
          }
        },
        {
          "name": "apiTag2",
          "description": "this is tag 2"
        }
      ],
      "x-banking": {
        "Branch type": "Walk in",
        "location": {
          "city": "San Francisco",
          "state": "CA",
          "citystate": "San Francisco, CA"
        }
      },
      "x-card": {
        "Card type": "visa",
        "Card number": 123456
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "newbranches",
        "x-ibm-name": "new-branches-api",
        "version": "1.0.0",
        "description": "Provides operations relating to BankA branch information.",
        "x-ibm-summary": ""
      },
      "schemes": [
        "https"
      ],
      "basePath": "/branches",
      "security": [
        {
          "clientIdHeader": []
        }
      ],
      "securityDefinitions": {
        "clientIdHeader": {
          "type": "apiKey",
          "name": "X-IBM-Client-Id",
          "in": "header"
        }
      },
      "x-ibm-configuration": {
        "phase": "realized",
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "gateway": "datapower-gateway",
        "type": "rest",
        "servers": [
          {
            "url": "https://apimdev0153.hursley.ibm.com:9443/branches",
            "description": "",
            "type": [
              "production",
              "development"
            ]
          },
          {
            "url": "https://base.endpoint1.com/branches",
            "description": "",
            "type": [
              "production"
            ]
          },
          {
            "url": "https://base.endpoint2.com/branches",
            "description": "",
            "type": [
              "development"
            ]
          }
        ]
      },
      "definitions": {
        "branch": {
          "properties": {
            "address": {
              "type": "string",
              "description": "The address of the branch",
              "$ref": "#/definitions/address"
            },
            "type": {
              "type": "string",
              "description": "The type of branch.",
              "example": "atm"
            },
            "id": {
              "type": "string",
              "description": "The ID of the branch",
              "example": "972ece0-7e7b-11e5-9038-55f9f9c08c06"
            }
          },
          "description": "The format of the branch field.",
          "additionalProperties": false
        },
        "address": {
          "properties": {
            "zip_code": {
              "type": "string",
              "description": "The zip code of the address.",
              "example": "92122"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "example": "CA"
            },
            "city": {
              "type": "string",
              "description": "The city of the address.",
              "example": "San Diego"
            },
            "street2": {
              "type": "string",
              "description": "The second line of the address.",
              "example": "Suite 300"
            },
            "street1": {
              "type": "string",
              "description": "The first line of the address.",
              "example": "4660 La Jolla Village Drive"
            }
          },
          "description": "The format of the address object."
        }
      },
      "paths": {
        "/details": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            },
            "summary": "Branch details",
            "description": "Retrieve details of the current branches of BankA."
          }
        }
      },
      "host": "apimdev0153.hursley.ibm.com:9443"
    },
    {
      "openapi": "3.0.0",
      "info": {
        "version": "1.0.0",
        "title": "Swagger Petstore (OpenAPI v3)",
        "description": "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
          "name": "Swagger API Team",
          "email": "foo@example.com",
          "url": "http://madskristensen.net"
        },
        "license": {
          "name": "MIT",
          "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
        }
      },
      "servers": [
        {
          "url": "http://petstore.swagger.io/api"
        }
      ],
      "paths": {
        "/pets": {
          "get": {
            "description": "Returns all pets from the system that the user has access to\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\n\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\n",
            "operationId": "findPets",
            "parameters": [
              {
                "name": "tags",
                "in": "query",
                "description": "tags to filter by",
                "required": false,
                "style": "form",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              {
                "name": "limit",
                "in": "query",
                "description": "maximum number of results to return",
                "required": false,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "pet response",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                }
              },
              "default": {
                "description": "unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Creates a new pet in the store.  Duplicates are allowed",
            "operationId": "addPet",
            "requestBody": {
              "description": "Pet to add to the store",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NewPet"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "pet response",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                }
              },
              "default": {
                "description": "unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "/pets/{id}": {
          "get": {
            "description": "Returns a user based on a single ID, if the user does not have access to the pet",
            "operationId": "find pet by id",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "ID of pet to fetch",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "pet response",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                }
              },
              "default": {
                "description": "unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "deletes a single pet based on the ID supplied",
            "operationId": "deletePet",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "ID of pet to delete",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "pet deleted"
              },
              "default": {
                "description": "unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Pet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NewPet"
              },
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            ]
          },
          "NewPet": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              }
            }
          },
          "Error": {
            "required": [
              "code",
              "message"
            ],
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "httpbin",
        "title": "httpbin",
        "version": "1.0.0",
        "description": "",
        "contact": {
          "name": ""
        }
      },
      "schemes": [
        "https"
      ],
      "basePath": "/httpbin",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "password": {
          "type": "oauth2",
          "description": "",
          "flow": "password",
          "scopes": {
            "ip": "",
            "another": ""
          },
          "tokenUrl": "https://example.com/jdoe/sb/oauth-provider/oauth2/token"
        },
        "application": {
          "type": "oauth2",
          "description": "",
          "flow": "application",
          "scopes": {
            "ip": ""
          },
          "tokenUrl": "https://example.com/jdoe/sb/oauth-provider/oauth2/token"
        },
        "access code": {
          "type": "oauth2",
          "description": "",
          "flow": "accessCode",
          "scopes": {
            "ip": "",
            "another": ""
          },
          "tokenUrl": "https://example.com/jdoe/sb/oauth-provider/oauth2/token",
          "authorizationUrl": "https://example.com/jdoe/sb/oauth-provider/oauth2/authorize"
        },
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "security": [
        {
          "clientIdHeader": [],
          "access code": [
            "ip", "another"
          ]
        },
        {
          "application": [
            "ip"
          ],
          "clientIdHeader": []
        },
        {
          "password": [
            "ip"
          ],
          "clientIdHeader": []
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "phase": "realized"
      },
      "paths": {
        "/ip": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          }
        },
        "/get": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          }
        },
        "/headers": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          },
          "parameters": [
            {
              "name": "test-header",
              "type": "string",
              "required": true,
              "in": "header",
              "description": "for testing headers"
            }
          ]
        }
      },
      "tags": [],
      "x-ibm-endpoints": [
        {
          "endpointUrl": "https://example.com/jdoe/sb",
          "type": [
            "development",
            "production"
          ]
        }
      ]
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "IBM APIM SMart",
        "description": "API resources related to the retail industry.\n\nYou may download the swagger.json definition to use in your API Management demos.\n\nOptionally, you can obtain the [source code](https://hub.jazz.net/git/bakert/apim-smart) and run it locally.",
        "version": "1.0.0",
        "x-ibm-name": "ibm-apim-smart",
        "x-ibm-summary": "Summary of the IBM APIM SMart API",
        "termsOfService": "## Terms of Service\n1.  Thou shalt not use this API for bad stuff\n2. Thou shalt pay your subscription fees on time\n3. Thou shalt use these APIs to make your mobile apps"
      },
      "basePath": "/smart/v1",
      "schemes": [
        "https"
      ],
      "x-ibm-endpoints": [
        {
          "endpointUrl": "https://localhost:3000/endpoint/production",
          "type": ["production"]
        },
        {
          "endpointUrl": "https://localhost:3000/endpoint/development",
          "type": ["development"]
        }
      ],
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "paths": {
        "/stores/{id}/inventory/{fk}": {
          "get": {
            "tags": [
              "store", "get", "other"
            ],
            "consumes": [
              "application/xml"
            ],
            "produces": [
              "application/xml"
            ],
            "summary": "Find a related item by id for inventory.",
            "operationId": "store.prototype.__findById__inventory",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for inventory",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/inventory"
                }
              }
            },
            "deprecated": true
          },
          "delete": {
            "tags": [
              "store", "delete", "other"
            ],
            "summary": "Delete a related item by id for inventory.",
            "operationId": "store.prototype.__destroyById__inventory",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for inventory",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "store"
            ],
            "summary": "Update a related item by id for inventory.",
            "operationId": "store.prototype.__updateById__inventory",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for inventory",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "data",
                "in": "body",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/inventory"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/inventory"
                }
              }
            },
            "deprecated": false
          }
        },
        "/stores/{id}/inventory": {
          "get": {
            "tags": [
              "store"
            ],
            "summary": "Queries inventory of store.",
            "operationId": "store.prototype.__get__inventory",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory"
                  }
                }
              }
            },
            "deprecated": false
          },
          "post": {
            "tags": [
              "store"
            ],
            "summary": "Creates a new instance in inventory of this model.",
            "operationId": "store.prototype.__create__inventory",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/inventory"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/inventory"
                }
              }
            },
            "deprecated": false
          }
        },
        "/stores/{id}/inventory/count": {
          "get": {
            "tags": [
              "store"
            ],
            "summary": "Counts inventory of store.",
            "operationId": "store.prototype.__count__inventory",
            "parameters": [
              {
                "name": "where",
                "in": "query",
                "description": "Criteria to match model instances",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/stores": {
          "post": {
            "tags": [
              "store"
            ],
            "summary": "Create a new instance of the model and persist it into the data source.",
            "operationId": "store.create",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/store"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/store"
                }
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "store"
            ],
            "summary": "Update an existing model instance or insert a new one into the data source.",
            "operationId": "store.upsert",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/store"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/store"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "store"
            ],
            "summary": "Find all instances of the model matched by filter from the data source.",
            "operationId": "store.find",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields, where, include, order, offset, and limit",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/store"
                  }
                }
              }
            },
            "deprecated": false
          }
        },
        "/stores/{id}/exists": {
          "get": {
            "tags": [
              "store"
            ],
            "summary": "Check whether a model instance exists in the data source.",
            "operationId": "storeid.exists",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/stores/{id}": {
          "head": {
            "tags": [
              "store"
            ],
            "summary": "Check whether a model instance exists in the data source.",
            "operationId": "store.exists",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "store"
            ],
            "summary": "Find a model instance by id from the data source.",
            "operationId": "store.findById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields and include",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/store"
                }
              }
            },
            "deprecated": false
          },
          "delete": {
            "tags": [
              "store"
            ],
            "summary": "Delete a model instance by id from the data source.",
            "operationId": "store.deleteById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "store"
            ],
            "summary": "Update attributes for a model instance and persist it into the data source.",
            "operationId": "store.prototype.updateAttributes",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "An object of model property name/value pairs",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/store"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/store"
                }
              }
            },
            "deprecated": false
          }
        },
        "/stores/count": {
          "get": {
            "tags": [
              "store"
            ],
            "summary": "Count instances of the model matched by where from the data source.",
            "operationId": "store.count",
            "parameters": [
              {
                "name": "where",
                "in": "query",
                "description": "Criteria to match model instances",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/products/{id}/reviews/{fk}": {
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Find a related item by id for reviews.",
            "operationId": "product.prototype.__findById__reviews",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for reviews",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/review"
                }
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "product"
            ],
            "security": [
              {
                "api-key-2": []
              }
            ],
            "summary": "Update a related item by id for reviews.",
            "operationId": "product.prototype.__updateById__reviews",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for reviews",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "data",
                "in": "body",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/review"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/review"
                }
              }
            },
            "deprecated": false
          }
        },
        "/products/{id}/reviews": {
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Queries reviews of product.",
            "operationId": "product.prototype.__get__reviews",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/review"
                  }
                }
              }
            },
            "deprecated": false
          },
          "post": {
            "tags": [
              "product"
            ],
            "summary": "Creates a new instance in reviews of this model.",
            "operationId": "product.prototype.__create__reviews",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/review"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/review"
                }
              }
            },
            "deprecated": false
          }
        },
        "/products/{id}/reviews/count": {
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Counts reviews of product.",
            "operationId": "product.prototype.__count__reviews",
            "parameters": [
              {
                "name": "where",
                "in": "query",
                "description": "Criteria to match model instances",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/products": {
          "post": {
            "tags": [
              "product"
            ],
            "summary": "Create a new instance of the model and persist it into the data source.",
            "operationId": "product.create",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/product"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/product"
                }
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "product"
            ],
            "summary": "Update an existing model instance or insert a new one into the data source.",
            "operationId": "product.upsert",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/product"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/product"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Find all instances of the model matched by filter from the data source.",
            "operationId": "product.find",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields, where, include, order, offset, and limit",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/product"
                  }
                }
              }
            },
            "deprecated": false
          }
        },
        "/products/{id}/exists": {
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Check whether a model instance exists in the data source.",
            "operationId": "productid.exists",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/products/{id}": {
          "head": {
            "tags": [
              "product"
            ],
            "summary": "Check whether a model instance exists in the data source.",
            "operationId": "product.exists",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Find a model instance by id from the data source.",
            "operationId": "product.findById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields and include",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/product"
                }
              }
            },
            "deprecated": false
          },
          "delete": {
            "tags": [
              "product"
            ],
            "summary": "Delete a model instance by id from the data source.",
            "operationId": "product.deleteById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "product"
            ],
            "summary": "Update attributes for a model instance and persist it into the data source.",
            "operationId": "product.prototype.updateAttributes",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "An object of model property name/value pairs",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/product"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/product"
                }
              }
            },
            "deprecated": false
          }
        },
        "/products/count": {
          "get": {
            "tags": [
              "product"
            ],
            "summary": "Count instances of the model matched by where from the data source.",
            "operationId": "product.count",
            "parameters": [
              {
                "name": "where",
                "in": "query",
                "description": "Criteria to match model instances",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        }
      },
      "definitions": {
        "address": {
          "properties": {
            "street1": {
              "type": "string"
            },
            "street2": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "zip_code": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "inventory": {
          "properties": {
            "inventory_id": {
              "type": "string"
            },
            "product_id": {
              "type": "string"
            },
            "quantity": {
              "type": "number",
              "format": "double"
            },
            "store_id": {
              "type": "string"
            }
          },
          "required": [
            "inventory_id"
          ],
          "additionalProperties": false
        },
        "review": {
          "properties": {
            "review_id": {
              "type": "string"
            },
            "date": {
              "type": "string",
              "format": "date"
            },
            "reviewer_name": {
              "type": "string"
            },
            "reviewer_email": {
              "type": "string"
            },
            "rating": {
              "type": "number",
              "format": "double"
            },
            "comment": {
              "type": "string"
            },
            "product_id": {
              "type": "string"
            }
          },
          "required": [
            "review_id"
          ],
          "additionalProperties": false
        },
        "store": {
          "description": "store information",
          "properties": {
            "store_id": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/address"
            },
            "phone": {
              "type": "string"
            },
            "hours": {
              "type": "string"
            }
          },
          "required": [
            "store_id"
          ],
          "additionalProperties": false
        },
        "product": {
          "description": "product catalog and reviews",
          "properties": {
            "product_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "price": {
              "type": "number",
              "format": "double"
            },
            "rating": {
              "type": "number",
              "format": "double"
            }
          },
          "required": [
            "product_id"
          ],
          "additionalProperties": false
        }
      },
      "tags": [
        {
          "name": "store",
          "description": "store information"
        },
        {
          "name": "product",
          "description": "product catalog and reviews"
        }
      ],
      "x-ibm-configuration": {
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        },
        "gateway": "datapower-gateway",
        "assembly": {
          "execute": [
            {
              "operation-switch": {
                "title": "operation-switch",
                "case": [
                  {
                    "operations": [
                      "store.create"
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "timeout": 60,
                          "verb": "POST",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/stores"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "store.find"
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "timeout": 60,
                          "verb": "GET",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/stores"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "store.findById"
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "timeout": 60,
                          "verb": "GET",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/stores/{id}"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "store.deleteById"
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "timeout": 60,
                          "verb": "DELETE",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/stores/{id}"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "product.create"
                    ],
                    "execute": [
                      {
                        "proxy": {
                          "title": "proxy",
                          "timeout": 60,
                          "verb": "POST",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/products"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "product.find"
                    ],
                    "execute": [
                      {
                        "proxy": {
                          "title": "proxy",
                          "timeout": 60,
                          "verb": "GET",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/products"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "product.findById"
                    ],
                    "execute": [
                      {
                        "proxy": {
                          "title": "proxy",
                          "timeout": 60,
                          "verb": "GET",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/products/{id}"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      "product.deleteById"
                    ],
                    "execute": [
                      {
                        "proxy": {
                          "title": "proxy",
                          "timeout": 60,
                          "verb": "DELETE",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "description": "",
                          "target-url": "https://apim-services.mybluemix.net/smart/v1/products/{id}"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "catch": []
        }
      },
      "securityDefinitions": {
        "api-key-2": {
          "type": "apiKey",
          "description": "",
          "in": "query",
          "name": "client_secret"
        },
        "api-key-1": {
          "type": "apiKey",
          "description": "",
          "in": "query",
          "name": "client_id"
        }
      },
      "security": [
        {
          "api-key-2": [],
          "api-key-1": []
        }
      ]
    },
    {
      "openapi": "3.0",
      "info": {
        "x-ibm-name": "apim",
        "version": "2.0.0",
        "title": "API Management APIs",
        "description": "APIs for the API Connect API management microservice",
        "termsOfService": "https://ww.ibm.com/terms-of-service",
        "contact": {
          "name": "IBM",
          "url": "https://www.ibm.com",
          "email": "help@ibm.com"
        },
        "license": {
          "name": "tbd",
          "url": "https://tbd.com"
        }
      },
      "servers": [
        {
          "url": "https://localhost:3003",
          "description": "Local laptop testing",
          "variables": {
            "username": {
              "default": "demo",
              "description": "this value is assigned by the service provider, in this example `gigantic-server.com`"
            },
            "port": {
              "enum": [
                8443,
                443
              ],
              "default": 8443
            },
            "basePath": null,
            "default": "v2"
          }
        },
        {
          "url": "https://localhost:2000",
          "description": "Juhu gateway endpoint"
        }
      ],
      "x-bhendi-resources": {
        "attendee": {
          "transitions": {
            "initial-state": "invited",
            "invited": [
              "confirmed",
              "cancelled"
            ],
            "confirmed": [
              "cancelled"
            ]
          }
        }
      },
      "paths": {
        "/v1/conferences": {
          "description": "Conference collection operations",
          "post": {
            "operationId": "conference_create",
            "x-bhendi-operationId": "conference_create",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conferences:create",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "x-bhendi-url-path-base": "/conferences",
            "summary": "Create a Conference",
            "description": "Create a Conference",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference#create"
            },
            "security": [
              {
                "oauth": [
                  "wite:pets"
                ]
              }
            ],
            "x-bhendi-permissions": [
              "permission1",
              "permission2"
            ],
            "requestBody": {
              "description": "foo",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Conference"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Conference"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Successful create",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  }
                },
                "headers": {
                  "Location": {
                    "$ref": "#/components/headers/Location"
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference"
            ]
          },
          "get": {
            "operationId": "conference_list",
            "x-bhendi-operationId": "conference_list",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conferences:list",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "List the Conferences",
            "description": "List the Conferences",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference#list"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference"
            ]
          },
          "delete": {
            "operationId": "conference_clear",
            "x-bhendi-operationId": "conference_clear",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conferences:clear",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Clear the Conferences",
            "description": "Clear the Conferences",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference#clear"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              "#/components/parameters/confirm"
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference"
            ]
          }
        },
        "/v1/conferences/{conference}": {
          "description": "Conference object operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            }
          ],
          "get": {
            "operationId": "conference_get",
            "x-bhendi-operationId": "conference_get",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conferences:get",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Get the Conference",
            "description": "Get the Conference",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference#get"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference"
            ]
          },
          "patch": {
            "operationId": "conference_update",
            "x-bhendi-operationId": "conference_update",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conferences:set",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Update the Conference",
            "description": "Update the Conference",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference#update"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Conference"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Conference"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference"
            ]
          },
          "delete": {
            "operationId": "conference_del",
            "x-bhendi-operationId": "conference_del",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conferences:delete",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Delete the Conference",
            "description": "Delete the Conference",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference#delete"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "responses": {
              "200": {
                "description": "Successful delete",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Conference"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference"
            ]
          }
        },
        "/v1/conferences/{conference}/admin/settings": {
          "description": "Conference Setting singleton operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            }
          ],
          "put": {
            "operationId": "conference_setting_insertSingleton",
            "x-bhendi-operationId": "conference_setting_insertSingleton",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conference-settings:set",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Update the Conference Settings",
            "description": "Update the Conference Settings",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference-setting#upate"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConferenceSetting"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/ConferenceSetting"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceSetting"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceSetting"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference Setting"
            ]
          },
          "get": {
            "operationId": "conference_setting_getSingleton",
            "x-bhendi-operationId": "conference_setting_getSingleton",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "conference-settings:get",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Get the Conference Settings",
            "description": "Get the Conference Settings",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/conference-setting#get"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceSetting"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/ConferenceSetting"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Overview",
              "Conference Setting"
            ]
          }
        },
        "/v1/conferences/{conference}/tracks": {
          "description": "Track collection operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            }
          ],
          "post": {
            "operationId": "track_create",
            "x-bhendi-operationId": "track_create",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "tracks:create",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "x-bhendi-url-path-base": "/tracks/{conference}",
            "summary": "Create a Track",
            "description": "Create a Track",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/track#create"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Track"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Track"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Successful create",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  }
                },
                "headers": {
                  "Location": {
                    "$ref": "#/components/headers/Location"
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Track"
            ]
          },
          "get": {
            "operationId": "track_list",
            "x-bhendi-operationId": "track_list",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "tracks:list",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "List the Tracks",
            "description": "List the Tracks",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/track#list"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TrackList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/TrackList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Track"
            ]
          },
          "delete": {
            "operationId": "track_clear",
            "x-bhendi-operationId": "track_clear",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "tracks:clear",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Clear the Tracks",
            "description": "Clear the Tracks",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/track#clear"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              "#/components/parameters/confirm"
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TrackList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/TrackList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Track"
            ]
          }
        },
        "/v1/tracks/{conference}/{track}": {
          "description": "Track object operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            },
            {
              "$ref": "#/components/parameters/track"
            }
          ],
          "get": {
            "operationId": "track_get",
            "x-bhendi-operationId": "track_get",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "tracks:get",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Get the Track",
            "description": "Get the Track",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/track#get"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Track"
            ]
          },
          "patch": {
            "operationId": "track_update",
            "x-bhendi-operationId": "track_update",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "tracks:set",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Update the Track",
            "description": "Update the Track",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/track#update"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Track"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Track"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Track"
            ]
          },
          "delete": {
            "operationId": "track_del",
            "x-bhendi-operationId": "track_del",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "tracks:delete",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Delete the Track",
            "description": "Delete the Track",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/track#delete"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "responses": {
              "200": {
                "description": "Successful delete",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Track"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Track"
            ]
          }
        },
        "/v1/tracks/{conference}/{track}/sessions": {
          "description": "Session collection operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            },
            {
              "$ref": "#/components/parameters/track"
            }
          ],
          "post": {
            "operationId": "session_create",
            "x-bhendi-operationId": "session_create",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "sessions:create",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Create a Session",
            "description": "Create a Session",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/session#create"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Session"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Successful create",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  }
                },
                "headers": {
                  "Location": {
                    "$ref": "#/components/headers/Location"
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Session"
            ]
          },
          "get": {
            "operationId": "session_list",
            "x-bhendi-operationId": "session_list",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "sessions:list",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "List the Sessions",
            "description": "List the Sessions",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/session#list"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SessionList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/SessionList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Session"
            ]
          },
          "delete": {
            "operationId": "session_clear",
            "x-bhendi-operationId": "session_clear",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "sessions:clear",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Clear the Sessions",
            "description": "Clear the Sessions",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/session#clear"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              "#/components/parameters/confirm"
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SessionList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/SessionList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Session"
            ]
          }
        },
        "/v1/tracks/{conference}/{track}/sessions/{session}": {
          "description": "Session object operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            },
            {
              "$ref": "#/components/parameters/track"
            },
            {
              "$ref": "#/components/parameters/session"
            }
          ],
          "get": {
            "operationId": "session_get",
            "x-bhendi-operationId": "session_get",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "sessions:get",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Get the Session",
            "description": "Get the Session",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/session#get"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Session"
            ]
          },
          "patch": {
            "operationId": "session_update",
            "x-bhendi-operationId": "session_update",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "sessions:set",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Update the Session",
            "description": "Update the Session",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/session#update"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Session"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Session"
            ]
          },
          "delete": {
            "operationId": "session_del",
            "x-bhendi-operationId": "session_del",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "sessions:delete",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Delete the Session",
            "description": "Delete the Session",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/session#delete"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "responses": {
              "200": {
                "description": "Successful delete",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Session"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Content",
              "Session"
            ]
          }
        },
        "/v1/conferences/{conference}/attendees": {
          "description": "Attendee collection operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            }
          ],
          "post": {
            "operationId": "attendee_create",
            "x-bhendi-operationId": "attendee_create",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "attendees:create",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "x-bhendi-url-path-base": "/attendees/{conference}",
            "summary": "Create an Attendee",
            "description": "Create an Attendee",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/attendee#create"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attendee"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Attendee"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Successful create",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  }
                },
                "headers": {
                  "Location": {
                    "$ref": "#/components/headers/Location"
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Conference Attendees",
              "Attendee"
            ]
          },
          "get": {
            "operationId": "attendee_list",
            "x-bhendi-operationId": "attendee_list",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "attendees:list",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "List the Attendees",
            "description": "List the Attendees",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/attendee#list"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AttendeeList"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/AttendeeList"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Conference Attendees",
              "Attendee"
            ]
          }
        },
        "/v1/attendees/{conference}/{attendee}": {
          "description": "Attendee object operations",
          "parameters": [
            {
              "$ref": "#/components/parameters/conference"
            },
            {
              "$ref": "#/components/parameters/attendee"
            }
          ],
          "get": {
            "operationId": "attendee_get",
            "x-bhendi-operationId": "attendee_get",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "attendees:get",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Get the Attendee",
            "description": "Get the Attendee",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/attendee#get"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "parameters": [
              {
                "$ref": "#/components/parameters/fields"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Conference Attendees",
              "Attendee"
            ]
          },
          "patch": {
            "operationId": "attendee_update",
            "x-bhendi-operationId": "attendee_update",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "attendees:set",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Update the Attendee",
            "description": "Update the Attendee",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/attendee#update"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attendee"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "$ref": "#/components/schemas/Attendee"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Conference Attendees",
              "Attendee"
            ]
          },
          "delete": {
            "operationId": "attendee_del",
            "x-bhendi-operationId": "attendee_del",
            "x-bhendi-stability": "development",
            "x-bhendi-cli": "attendees:delete",
            "x-bhendi-cli-stability": "development",
            "x-bhendi-authorized-orgs": "both",
            "summary": "Delete the Attendee",
            "description": "Delete the Attendee",
            "externalDocs": {
              "description": "Additional documentation",
              "url": "https://www.ibm.com/knowledge-center/api-connect/platform-apis/attendee#delete"
            },
            "security": [
              {
                "oauth": null
              }
            ],
            "x-bhendi-permissions": null,
            "responses": {
              "200": {
                "description": "Successful delete",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  },
                  "application/yaml": {
                    "schema": {
                      "$ref": "#/components/schemas/Attendee"
                    }
                  }
                }
              },
              "5XX": {
                "$ref": "#/components/responses/Error"
              }
            },
            "tags": [
              "Conference Attendees",
              "Attendee"
            ]
          }
        }
      },
      "components": {
        "securitySchemes": {
          "basicAuthentication": {
            "type": "basic",
            "description": "Security scheme migrated from security policy"
          },
          "oauth": {
            "type": "oauth2",
            "description": "Oauth scheme authentication",
            "flow": "implicit",
            "authorizationUrl": "http://swagger.io/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        },
        "parameters": {
          "attendee": {
            "name": "attendee",
            "in": "path",
            "description": "name or id",
            "required": true,
            "type": "string"
          },
          "cascade": {
            "name": "cascade",
            "in": "query",
            "description": "cascade delete",
            "required": false,
            "type": "boolean"
          },
          "conference": {
            "name": "conference",
            "in": "path",
            "description": "name or id",
            "required": true,
            "type": "string"
          },
          "confirm": {
            "name": "confirm",
            "in": "query",
            "description": "confirm clear",
            "required": true,
            "type": "boolean"
          },
          "fields": {
            "name": "fields",
            "in": "query",
            "description": "field name",
            "required": false,
            "type": "string"
          },
          "session": {
            "name": "session",
            "in": "path",
            "description": "name or id",
            "required": true,
            "type": "string"
          },
          "track": {
            "name": "track",
            "in": "path",
            "description": "name or id",
            "required": true,
            "type": "string"
          }
        },
        "responses": {
          "Error": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "headers": {
          "Location": {
            "description": "The URL referencing the created resource",
            "type": "string"
          }
        },
        "schemas": {
          "Attendee": {
            "x-bhendi-resource": "normal",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "attendee"
                ]
              },
              "api_version": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "2.0.0"
                ]
              },
              "id": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "url": {
                "type": "string",
                "readOnly": true,
                "format": "uri"
              }
            }
          },
          "AttendeeList": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "total_results": {
                "type": "integer"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Attendee"
                }
              }
            }
          },
          "Conference": {
            "x-bhendi-resource": "normal",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "conference"
                ]
              },
              "api_version": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "2.0.0"
                ]
              },
              "id": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "url": {
                "type": "string",
                "readOnly": true,
                "format": "uri"
              }
            }
          },
          "ConferenceList": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "total_results": {
                "type": "integer"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Conference"
                }
              }
            }
          },
          "ConferenceSetting": {
            "x-bhendi-resource": "singleton",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "conference_setting"
                ]
              },
              "api_version": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "2.0.0"
                ]
              },
              "name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "url": {
                "type": "string",
                "readOnly": true,
                "format": "uri"
              }
            }
          },
          "Session": {
            "x-bhendi-resource": "normal",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "session"
                ]
              },
              "api_version": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "2.0.0"
                ]
              },
              "id": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "url": {
                "type": "string",
                "readOnly": true,
                "format": "uri"
              }
            }
          },
          "SessionList": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "total_results": {
                "type": "integer"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "Track": {
            "x-bhendi-resource": "normal",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "track"
                ]
              },
              "api_version": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "2.0.0"
                ]
              },
              "id": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "readOnly": true,
                "format": "date-time"
              },
              "url": {
                "type": "string",
                "readOnly": true,
                "format": "uri"
              }
            }
          },
          "TrackList": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "total_results": {
                "type": "integer"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "invoke",
        "title": "invoke",
        "version": "1.0.0"
      },
      "schemes": [
        "https"
      ],
      "basePath": "/invoke",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "oauth-1": {
          "type": "oauth2",
          "description": "",
          "flow": "password",
          "scopes": {
            "scope1": "",
            "anotherOne": "",
            "and one more": ""
          },
          "tokenUrl": "https://sjsldev083.dev.ciondemand.com/si/sb/oauth/oauth2/token"
        },
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        },
        "oauth-2": {
          "type": "oauth2",
          "description": "",
          "flow": "password",
          "scopes": {
            "scope2": ""
          },
          "tokenUrl": "https://sjsldev083.dev.ciondemand.com/sidsahasdjkhds/sb/oauth/oauth2/token"
        }
      },
      "security": [
        {
          "oauth-2": [
            "scope2"
          ]
        },
        {
          "clientIdHeader": []
        }, {
          "oauth-1": [
            "scope1",
            "anotherOne",
            "and one more"
          ]
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "http://169.55.95.253/enforceOne.xml"
              }
            }
          ]
        },
        "phase": "realized"
      },
      "paths": {
        "/path-1": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          }
        }
      },
      "definitions": {},
      "tags": [],
      "x-ibm-endpoints": [
        {
          "endpointUrl": "https://sjsldev083.dev.ciondemand.com/si/sb",
          "type": [
            "development",
            "production"
          ]
        }
      ]
    },
    {
      "basePath": "/api",
      "consumes": [
        "application/json",
        "ocetet-stream"
      ],
      "definitions": {
        "ChainItemResponse": {
          "properties": {
            "id": {
              "description": "The token id of an STS module ",
              "type": "string"
            },
            "mode": {
              "description": "The mode the STS module is used in in the chain. Must be one of the supported modes of the STS module ",
              "type": "string"
            },
            "prefix": {
              "description": "The prefix for the chain item ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "mode",
            "prefix"
          ],
          "type": "object"
        },
        "PocCallback": {
          "properties": {
            "index": {
              "description": "A number reflects the position in the callbacks array. ",
              "type": "integer"
            },
            "moduleReferenceId": {
              "description": "The module ID referened in the callback. It must be one of the supported module IDs. ",
              "type": "string"
            },
            "parameters": {
              "description": "The parameters used by the callback. ",
              "items": {
                "$ref": "#/definitions/PocCallbackParameter"
              },
              "type": "array"
            }
          },
          "required": [
            "index",
            "moduleReferenceId",
            "parameters"
          ],
          "type": "object"
        },
        "PocCallbackParameter": {
          "properties": {},
          "required": [],
          "type": "object"
        },
        "attachmentInformation": {
          "properties": {
            "id": {
              "description": "Internally assigned ID value of the policy, policy set, or API protection definition attached to the resource. ",
              "type": "string"
            },
            "lastmodified": {
              "description": "Specifies the date and time stamp this policy, policy set, or API protection definition was last modified.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. ",
              "type": "string"
            },
            "name": {
              "description": "The unique name given to the policy, policy set, or API protection definition attached to the resource. ",
              "type": "string"
            },
            "type": {
              "description": "Identifies the type of attachment.  Values include 'policy', 'policyset', or 'definition'. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "lastmodified",
            "type"
          ],
          "type": "object"
        },
        "attributeJsonResponse": {
          "properties": {
            "category": {
              "description": "The part of the XACML request that the attribute value comes from: 'Subject', 'Environment', 'Action', 'Resource'. ",
              "type": "string"
            },
            "datatype": {
              "description": "The type of values that the attribute can accept: 'String','Integer','Double','Boolean','Time','Date','X500Name'. ",
              "type": "string"
            },
            "description": {
              "description": "A description of the attribute. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the attribute. ",
              "type": "string"
            },
            "issuer": {
              "description": "The name of the policy information point from which the value of the attribute is retrieved.  Null if a policy information point is not used. ",
              "type": "string"
            },
            "matcher": {
              "description": "ID of the attribute matcher that is used to compare the value of this attribute in an incoming device fingerprint with an existing device fingerprint of the user. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the attribute. ",
              "type": "string"
            },
            "predefined": {
              "description": "True, if the attribute is predefined and ships with the product; false, if the attribute is custom defined. Predefined attributes cannot be deleted. ",
              "type": "boolean"
            },
            "storageDomain": {
              "description": "Boolean indicators of where the attribute is stored:  session, behavior, device. ",
              "type": "attributestoragedomain"
            },
            "tags": {
              "description": "Internal use only. Value is null. ",
              "type": "string"
            },
            "type": {
              "description": "Boolean indicators of where the attribute is used: policy, risk profiles. ",
              "type": "attributetype"
            },
            "uri": {
              "description": "The identifier of the attribute that is used in the generated XACML policy. ",
              "type": "string"
            }
          },
          "required": [
            "tags",
            "id",
            "category",
            "matcher",
            "issuer",
            "description",
            "name",
            "datatype",
            "storageDomain",
            "type",
            "uri",
            "predefined"
          ],
          "type": "object"
        },
        "attributeMatcherJsonResponse": {
          "properties": {
            "description": {
              "description": "A description of the attribute matcher. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the attribute matcher. ",
              "type": "string"
            },
            "properties": {
              "description": "Array of property values associated with this attribute matcher. ",
              "items": {
                "$ref": "#/definitions/attributeMatcherProperty"
              },
              "type": "array"
            }
          },
          "required": [
            "id",
            "description",
            "properties"
          ],
          "type": "object"
        },
        "attributeMatcherProperty": {
          "properties": {
            "id": {
              "description": "ID of the attribute matcher associated with this property. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the attribute matcher property. ",
              "type": "string"
            },
            "value": {
              "description": "Current value for this property used by the attribute matcher. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "value"
          ],
          "type": "object"
        },
        "authMechAttrJsonResponse": {
          "properties": {
            "name": {
              "description": "Authentication service context attribute. ",
              "type": "string"
            },
            "namespace": {
              "description": "Authentication service namespace of \"name\". ",
              "type": "string"
            },
            "selector": {
              "description": "Name of a registry attribute to obtain. ",
              "type": "string"
            }
          },
          "required": [
            "selector",
            "name",
            "namespace"
          ],
          "type": "object"
        },
        "authMechJsonResponse": {
          "properties": {
            "attributes": {
              "description": "Attributes specific to this authentication mechanism that correspond with the attributes of the authentication mechanism type that it is an implementation of.  See typeId for more information.",
              "items": {
                "$ref": "#/definitions/authMechAttrJsonResponse"
              },
              "type": "array"
            },
            "description": {
              "description": "A description of the authentication mechanism. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the authentication mechanism. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the authentication mechanism. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "description",
            "name",
            "attributes"
          ],
          "type": "object"
        },
        "binding1JsonResponse": {
          "properties": {
            "id": {
              "description": "Unique identity source instance ID. ",
              "type": "long"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "bindingJsonResponse": {
          "properties": {
            "clientId": {
              "description": "Client id that uniquely identifies the application. ",
              "type": "string"
            },
            "id": {
              "description": "Unique identity source instance ID. ",
              "type": "long"
            }
          },
          "required": [
            "id",
            "clientId"
          ],
          "type": "object"
        },
        "bundleExtensionJsonResponse": {
          "properties": {
            "id": {
              "description": "Unique ID of the extension. ",
              "type": "string"
            },
            "name": {
              "description": "Unique name of the extension. ",
              "type": "string"
            },
            "type": {
              "description": "Type of the extension. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "type"
          ],
          "type": "object"
        },
        "bundleJsonResponse": {
          "properties": {
            "extensions": {
              "description": "Array of bundle extensions that pertain to the specified bundle. ",
              "items": {
                "$ref": "#/definitions/bundleExtensionJsonResponse"
              },
              "type": "array"
            },
            "filename": {
              "description": "Name of the file that contains the bundle. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the bundle. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "filename",
            "extensions"
          ],
          "type": "object"
        },
        "clientJsonResponse": {
          "properties": {
            "clientId": {
              "description": "A unique OAUTH client identifier to identify this client to the authorization server. It is sent in the token endpoint request to perform client authentication. ",
              "type": "string"
            },
            "clientSecret": {
              "description": "A string that identifies this client as confidential and serves as this client's secret.  The client secret mechanism is a means of authorizing a client. Applications requesting an access token must know the client secret in order to gain the token.  Null indicates the client is considered a public client. ",
              "type": "string"
            },
            "companyName": {
              "description": "Name of the company associated with this client. ",
              "type": "string"
            },
            "companyUrl": {
              "description": "URL for the company associated with this client. ",
              "type": "string"
            },
            "contactPerson": {
              "description": "Name of the contact person for this client. ",
              "type": "string"
            },
            "contactType": {
              "description": "Further describes the contact with one of the following values: \"TECHNICAL\", \"SUPPORT\", \"ADMINISTRATIVE\", \"BILLING\", or \"OTHER\". ",
              "type": "string"
            },
            "definition": {
              "description": "The ID of the related API protection definition which owns and defines this client. A client registration can only belong to one definition, but a definition can own many client registrations.  The definition cannot be modified. ",
              "type": "string"
            },
            "email": {
              "description": "The email address of the contact person for this client. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the client. ",
              "type": "string"
            },
            "name": {
              "description": "A meaningful name to identify this API protection client. ",
              "type": "string"
            },
            "otherInfo": {
              "description": "Other information about the client contact. ",
              "type": "string"
            },
            "phone": {
              "description": "The telephone number of the contact person for this client. ",
              "type": "string"
            },
            "redirectUri": {
              "description": "The redirect URI to use for this client. ",
              "type": "string"
            }
          },
          "required": [
            "phone",
            "definition",
            "companyName",
            "otherInfo",
            "clientSecret",
            "companyUrl",
            "clientId",
            "id",
            "email",
            "name",
            "contactType",
            "redirectUri",
            "contactPerson"
          ],
          "type": "object"
        },
        "definitionJsonResponse": {
          "properties": {
            "grantTypes": {
              "description": "A list of supported authorization grant types. Valid values are \"AUTHORIZATION_CODE\", \"RESOURCE_OWNER_PASSWORD_CREDENTIALS\", \"CLIENT_CREDENTIALS\", and \"IMPLICIT_GRANT\". ",
              "items": {},
              "type": "array"
            },
            "tcmBehavior": {
              "description": "Identifies the Trusted Client Manager behavior concerning trusted clients and consent. \"ALWAYS_PROMPT\" indicates the user is prompted to provide their consent for a new authorization grant.  \"NEVER_PROMPT\" indicates implicit consent is allowed, whereby the user is never shown a consent to authorize prompt.  \"PROMPT_ONCE_AND_REMEMBER\" indicates that the Trusted Client Manager stores consent decisions when consent is granted, and that the user is prompted for consent when a previous consent for the client with the particular scope is not already stored. ",
              "type": "string"
            }
          },
          "required": [
            "tcmBehavior",
            "grantTypes"
          ],
          "type": "object"
        },
        "federationsJsonResponse": {
          "properties": {
            "configuration": {
              "description": "The protocol-specific configuration data.  The contents of this JSON object will be different for each protocol. ",
              "type": "protocoldata"
            },
            "id": {
              "description": "The ID of the federation. ",
              "type": "string"
            },
            "name": {
              "description": "The name of the federation. ",
              "type": "string"
            },
            "protocol": {
              "description": "The name of the protocol used by the federation. ",
              "type": "string"
            },
            "role": {
              "description": "The role of this federation. Set to \"ip\" for SAML 2.0 Identity Provider federations, \"sp\" for SAML 2.0 Service Provider federations, \"op\" for OpenID Connect Provider federations, and \"rp\" for OpenID Connect Relying Party federations. ",
              "type": "string"
            },
            "templateName": {
              "description": "The template which was used to establish the federation. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "role",
            "protocol",
            "templateName",
            "configuration"
          ],
          "type": "object"
        },
        "grantJsonResponse": {
          "properties": {
            "clientId": {
              "description": "The client id which issued the grant. ",
              "type": "string"
            },
            "id": {
              "description": "The state id of the grant. ",
              "type": "string"
            },
            "isEnabled": {
              "description": "A flag that indicate if the grant is enabled or not. If disabled (false), the tokens issued under this grant cannot be used. ",
              "type": "boolean"
            },
            "tokens": {
              "description": "Array of tokens associated with the grant. ",
              "items": {
                "$ref": "#/definitions/grantToken"
              },
              "type": "array"
            }
          },
          "required": [
            "id",
            "isEnabled",
            "clientId",
            "tokens"
          ],
          "type": "object"
        },
        "grantToken": {
          "properties": {
            "dateCreated": {
              "description": "The date and time of creation of this token. ",
              "type": "string"
            },
            "lastUsed": {
              "description": "Indicate when this token was last used. ",
              "type": "string"
            },
            "lifetime": {
              "description": "The lifetime of this token, in seconds. ",
              "type": "string"
            },
            "scope": {
              "description": "The scope of this token. ",
              "type": "string"
            },
            "subType": {
              "description": "The token sub-type. ",
              "type": "string"
            },
            "tokenId": {
              "description": "A unique identifier for this token. ",
              "type": "string"
            },
            "tokenString": {
              "description": "The value of the token. ",
              "type": "string"
            },
            "type": {
              "description": "The token type. ",
              "type": "string"
            }
          },
          "required": [
            "tokenId",
            "tokenString",
            "type",
            "subType",
            "dateCreated",
            "lifetime",
            "lastUsed",
            "scope"
          ],
          "type": "object"
        },
        "grantUserIdJsonResponse": {
          "properties": {
            "userId": {
              "description": "A unique identifier for this user. ",
              "type": "string"
            }
          },
          "required": [
            "userId"
          ],
          "type": "object"
        },
        "mappingRuleJsonResponse": {
          "properties": {
            "category": {
              "description": "A grouping of related mapping rules.  For example, category 'OAUTH' identifies all the rules associated with the OAUTH flow. ",
              "type": "string"
            },
            "content": {
              "description": "The content of the mapping rule, represented as an escaped character string. ",
              "type": "string"
            },
            "domain": {
              "description": "Domain in which this mapping rule belongs. ",
              "type": "string"
            },
            "fileName": {
              "description": "A unique filename used to identify this mapping rule. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the mapping rule. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the mapping rule. ",
              "type": "string"
            },
            "prefedined": {
              "description": "False to indicate this mapping rule is custom defined. ",
              "type": "boolean"
            }
          },
          "required": [
            "content",
            "id",
            "category",
            "name",
            "fileName",
            "prefedined",
            "domain"
          ],
          "type": "object"
        },
        "obligationJsonResponse": {
          "properties": {
            "description": {
              "description": "A description of the obligation. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the obligation. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the obligation. ",
              "type": "string"
            },
            "parameters": {
              "description": "Array of parameters associated with the obligation. ",
              "items": {
                "$ref": "#/definitions/obligationParameter"
              },
              "type": "array"
            }
          },
          "required": [
            "id",
            "description",
            "name",
            "parameters"
          ],
          "type": "object"
        },
        "obligationParameter": {
          "properties": {
            "datatype": {
              "description": "Data type for the parameter. Valid values are 'Boolean', 'Date', 'Double', 'Integer', 'String', 'Time', or 'X500Name'. ",
              "type": "string"
            },
            "label": {
              "description": "Label for the parameter. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the parameter. ",
              "type": "string"
            }
          },
          "required": [
            "name",
            "label",
            "datatype"
          ],
          "type": "object"
        },
        "partnersJsonResponse": {
          "properties": {
            "configuration": {
              "description": "The protocol-specific configuration data.  The contents of this JSON object will be different for each protocol. ",
              "type": "protocoldata"
            },
            "enabled": {
              "description": "Whether the partner is enabled. ",
              "type": "boolean"
            },
            "id": {
              "description": "The id of the partner. ",
              "type": "string"
            },
            "name": {
              "description": "The name of the partner. ",
              "type": "string"
            },
            "role": {
              "description": "The role this partner plays in its federation: \"ip\" for a SAML 2.0 identity provider partner, and \"sp\" for a SAML 2.0 service provider partner. Use \"op\" for an OpenID Connect Provider partner, and \"rp\" for an OpenID Connect Relying Party partner. ",
              "type": "string"
            },
            "templateName": {
              "description": "The template which was used to establish this partner. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "enabled",
            "role",
            "templateName",
            "configuration"
          ],
          "type": "object"
        },
        "pocProfileJsonResponse": {
          "properties": {
            "authenticateCallbacks": {
              "description": "An array of callbacks for authentication. ",
              "items": {
                "$ref": "#/definitions/PocCallback"
              },
              "type": "array"
            },
            "description": {
              "description": "The description of the point of contact profile. ",
              "type": "string"
            },
            "id": {
              "description": "The ID of the point of contact profile. ",
              "type": "string"
            },
            "isReadOnly": {
              "description": "A setting that specifies whether the point of contact profile allows read-only access. The value is false for all user created profiles, and true for all default profiles. ",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the point of contact profile. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "isReadOnly",
            "authenticateCallbacks"
          ],
          "type": "object"
        },
        "policyAttachmentJsonResponse": {
          "properties": {
            "datecreated": {
              "description": "Specifies the date and time stamp the resource was configured.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. ",
              "type": "string"
            },
            "deployed": {
              "description": "True if the assigned attachments have been published and are being used during the evaluation of access requests to this resource. ",
              "type": "boolean"
            },
            "deployrequired": {
              "description": "True if attachments to this resource have yet to be published, or deployed, so that they can be enforced during the evaluation of access requests to this resource. ",
              "type": "boolean"
            },
            "id": {
              "description": "Internally assigned ID value of the attachment. ",
              "type": "string"
            },
            "lastdeployed": {
              "description": "Specifies the date and time stamp of the last publishing or deployment of attachments for this resource. ",
              "type": "string"
            },
            "policies": {
              "description": "Array describing the attachments to the resource: policies, policy sets, or API protection definitions. ",
              "items": {
                "$ref": "#/definitions/attachmentInformation"
              },
              "type": "array"
            },
            "resourceUri": {
              "description": "The resource URI of the resource in the protected object space. ",
              "type": "string"
            },
            "server": {
              "description": "The web container that contains the protected object space for a server instance. ",
              "type": "string"
            },
            "userlastmodified": {
              "description": "User ID of the user who last made modifications to this policy attachment. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "lastdeployed",
            "userlastmodified",
            "deployed",
            "datecreated",
            "server",
            "deployrequired",
            "resourceUri",
            "policies"
          ],
          "type": "object"
        },
        "policyListJsonResponse": {
          "properties": {
            "attributesrequired": {
              "description": "True if the values for any attributes specified in the policy must be present in the incoming request.  False if the attribute values may optionally be present. ",
              "type": "boolean"
            },
            "datecreated": {
              "description": "Specifies the date and time stamp the policy was created.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. ",
              "type": "string"
            },
            "description": {
              "description": "A description of the policy. ",
              "type": "string"
            },
            "dialect": {
              "description": "The XACML specification used within the policy. Only valid value is XACML Version 2, \"urn:oasis:names:tc:xacml:2.0:policy:schema:os\". ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the policy. ",
              "type": "string"
            },
            "lastmodified": {
              "description": "Specifies the date and time stamp the policy was last modified.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the policy. ",
              "type": "string"
            },
            "predefined": {
              "description": "True, if the policy is predefined and ships with the product; false, if the policy is custom defined. ",
              "type": "boolean"
            },
            "userlastmodified": {
              "description": "User ID of the user who last made modifications to this policy. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "dialect",
            "description",
            "userlastmodified",
            "attributesrequired",
            "name",
            "lastmodified",
            "datecreated",
            "predefined"
          ],
          "type": "object"
        },
        "policySetJsonResponse": {
          "properties": {
            "datecreated": {
              "description": "Specifies the date and time stamp the policy set was created.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. ",
              "type": "string"
            },
            "description": {
              "description": "A description of the policy set. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the policy set. ",
              "type": "string"
            },
            "lastmodified": {
              "description": "Specifies the date and time stamp the policy set was last modified.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the policy set. ",
              "type": "string"
            },
            "policies": {
              "description": "An array of policy IDs which belong to this policy set.  The order that the policies appear in this list is used when the policyCombiningAlgorithm is set to \"firstApplicable\". ",
              "items": {},
              "type": "array"
            },
            "predefined": {
              "description": "True, if the policy set is predefined and ships with the product; false, if the policy set is custom defined. ",
              "type": "boolean"
            },
            "userlastmodified": {
              "description": "User ID of the user who last modified this policy set. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "description",
            "userlastmodified",
            "name",
            "lastmodified",
            "datecreated",
            "predefined",
            "policies"
          ],
          "type": "object"
        },
        "registrationListJson": {
          "properties": {
            "app_id": {
              "description": "The application identifier associated with the registration. ",
              "type": "string"
            },
            "platform": {
              "description": "The platform the registration is for. Valid values are 'apple', or 'android'. ",
              "type": "string"
            },
            "pnr_id": {
              "description": "A unique identifier for the registration. ",
              "type": "string"
            },
            "provider": {
              "description": "The push notification service provider. Valid values are 'apple', or 'firebase'. ",
              "type": "string"
            }
          },
          "required": [
            "pnr_id",
            "app_id",
            "platform",
            "provider"
          ],
          "type": "object"
        },
        "riskProfileAttribute": {
          "properties": {
            "attributeID": {
              "description": "Internally assigned ID value of the attribute. ",
              "type": "string"
            },
            "name": {
              "description": "The unique name for the attribute associated with the specified attribute ID. ",
              "type": "string"
            },
            "weight": {
              "description": "Determines the importance of this attribute within the associated risk profile. A higher weight value indicates the attribute has more importance within the risk profile. The weight values of the attributes are used in determining the risk score or the level of risk associated with permitting a request to access a resource. ",
              "type": "integer"
            }
          },
          "required": [
            "weight",
            "name",
            "attributeID"
          ],
          "type": "object"
        },
        "riskProfileJsonResponse": {
          "properties": {
            "active": {
              "description": "True indicates this risk profile is the currently active risk profile. Only one profile can be active at a time. ",
              "type": "boolean"
            },
            "attributes": {
              "description": "Array of attributes comprising this risk profile and the weight value of each attribute which is used in determining the risk score. ",
              "items": {
                "$ref": "#/definitions/riskProfileAttribute"
              },
              "type": "array"
            },
            "description": {
              "description": "A brief description of the risk profile. ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of the risk profile. ",
              "type": "string"
            },
            "name": {
              "description": "A unique name for the risk profile. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "description",
            "name",
            "active",
            "attributes"
          ],
          "type": "object"
        },
        "rsaFilesJsonResponse": {
          "properties": {
            "description": {
              "description": "Brief description of the file. ",
              "type": "string"
            },
            "fileName": {
              "description": "Name of the RSA configuration file. ",
              "type": "string"
            },
            "generated": {
              "description": "(Optional) This field appears for securid file entries only.  If true, it indicates that the SecurID was automatically generated instead of imported. ",
              "type": "boolean"
            },
            "importTimestamp": {
              "description": "(Optional) Specifies the date and time stamp the RSA file was imported.  The String is formatted as a JSON date which has the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ. This value appears after the file has been imported to the appliance. ",
              "type": "string"
            },
            "node": {
              "description": "(Optional) This field appears for securid file entries only.  This field identifies the cluster node associated with the file when the RSA Authentication Agent is running in a cluster. Note that initially a node is a local stand-alone cluster primary when no clustered ISAM components are enabled. In this case this field value will be '127.0.0.1'. ",
              "type": "string"
            },
            "uri": {
              "description": "URI to configuration file on the appliance. ",
              "type": "string"
            }
          },
          "required": [
            "fileName",
            "description",
            "uri",
            "importTimestamp",
            "node",
            "generated"
          ],
          "type": "object"
        },
        "stsChainJsonResponse": {
          "properties": {
            "appliesTo": {
              "description": "The scope of the token ",
              "type": "stschainqnameaddressresponse"
            },
            "chainId": {
              "description": "The Id of the STS Chain Template that is referenced by this STS Chain ",
              "type": "string"
            },
            "description": {
              "description": "A description of the STS Chain ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of an STS Chain ",
              "type": "string"
            },
            "issuer": {
              "description": "The issuer of the token ",
              "type": "stschainqnameaddressresponse"
            },
            "name": {
              "description": "A friendly name for the STS Chain ",
              "type": "string"
            },
            "properties": {
              "description": "The properties for all modules within the STS Chain Template referenced in the STS Chain ",
              "type": "stschainpropertiesresponse"
            },
            "requestType": {
              "description": "The type of request to associate with this chain. The request is one of the types that are supported by the WS-Trust specification ",
              "type": "string"
            },
            "sendValidationConfirmation": {
              "description": "Whether to send signature validation confirmation ",
              "type": "boolean"
            },
            "signResponses": {
              "description": "Whether to sign the Trust Server SOAP response messages ",
              "type": "boolean"
            },
            "signatureKey": {
              "description": "The key to sign the Trust Server SOAP response messages ",
              "type": "stschainkeyidentifierresponse"
            },
            "tokenType": {
              "description": "The STS module type to map a request message to an STS chain template ",
              "type": "string"
            },
            "validateRequests": {
              "description": "Whether requires a signature on the received SOAP request message that contains the RequestSecurityToken message ",
              "type": "boolean"
            },
            "validationKey": {
              "description": "The key to validate the received SOAP request message ",
              "type": "stschainkeyidentifierresponse"
            },
            "xPath": {
              "description": "The custom lookup rule in XML Path Language to map a requet message to an STS Chain Template ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "chainId",
            "requestType",
            "tokenType",
            "xPath",
            "signResponses",
            "signatureKey",
            "validateRequests",
            "validationKey",
            "sendValidationConfirmation",
            "issuer",
            "appliesTo",
            "properties"
          ],
          "type": "object"
        },
        "stsChainTemplateJsonResponse": {
          "properties": {
            "chainItems": {
              "description": "An array of the modules that make up the STS Chain Template ",
              "items": {
                "$ref": "#/definitions/ChainItemResponse"
              },
              "type": "array"
            },
            "description": {
              "description": "A description of the STS Chain Template ",
              "type": "string"
            },
            "id": {
              "description": "Internally assigned ID value of an STS Chain Template ",
              "type": "string"
            },
            "name": {
              "description": "A friendly name for the STS Chain Template ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "chainItems"
          ],
          "type": "object"
        },
        "stsModuleInstanceJsonResponse": {
          "properties": {
            "description": {
              "description": "A description of the STS module instance ",
              "type": "string"
            },
            "id": {
              "description": "The token id of the module instance ",
              "type": "string"
            },
            "moduleId": {
              "description": "The module id ",
              "type": "string"
            },
            "name": {
              "description": "A friendly name for the STS module instance ",
              "type": "string"
            },
            "supportedModes": {
              "description": "A list of modes the module can be used in. Can be: map, verify, or other ",
              "items": {},
              "type": "array"
            }
          },
          "required": [
            "moduleId",
            "id",
            "name",
            "description",
            "supportedModes"
          ],
          "type": "object"
        },
        "transactionAttribute": {
          "properties": {
            "dataType": {
              "description": "The datatype of the attribute.  One of \"String\", \"Double\", \"Date\", \"Time\", \"Integer\", \"X500Name\" or \"Boolean\". ",
              "type": "string"
            },
            "issuer": {
              "description": "The ISAM URI of the issuer of the attribute. ",
              "type": "string"
            },
            "name": {
              "description": "The name of the attribute. ",
              "type": "string"
            },
            "uri": {
              "description": "The ISAM URI of the attribute. ",
              "type": "string"
            },
            "value": {
              "description": "The value of the attribute. ",
              "type": "transactionattributevalue"
            }
          },
          "required": [
            "name",
            "dataType",
            "issuer",
            "uri",
            "value"
          ],
          "type": "object"
        },
        "transactionsJsonResponse": {
          "properties": {
            "attributes": {
              "description": "Array of attributes associated with the transaction. ",
              "items": {
                "$ref": "#/definitions/transactionAttribute"
              },
              "type": "array"
            },
            "authnPolicyAction": {
              "description": "The HTTP verb to used to invoke the policy URL. ",
              "type": "string"
            },
            "authnPolicyURI": {
              "description": "The ISAM AAC authentication policy URI to be completed for the transaction. ",
              "type": "string"
            },
            "creationTime": {
              "description": "The time when the transaction was created. ",
              "type": "string"
            },
            "id": {
              "description": "The id of the transaction. ",
              "type": "string"
            },
            "lastActivityTime": {
              "description": "The time when the transaction was last modified. ",
              "type": "string"
            },
            "requestUrl": {
              "description": "The ISAM AAC authentication policy URL to be invoked for this transaction. ",
              "type": "string"
            },
            "txnStatus": {
              "description": "The completion state of the transaction.  One of \"pending\", \"success\" or \"fail\". ",
              "type": "string"
            },
            "username": {
              "description": "The username of the user who triggered the transaction. ",
              "type": "string"
            }
          },
          "required": [
            "id",
            "username",
            "creationTime",
            "lastActivityTime",
            "authnPolicyURI",
            "requestUrl",
            "authnPolicyAction",
            "txnStatus",
            "attributes"
          ],
          "type": "object"
        },
        "userInfoListJsonResponse": {
          "properties": {
            "attributeNamespace": {
              "description": "The attribute namespace. ",
              "type": "string"
            },
            "values": {
              "description": "The values of the attribute. ",
              "items": {
                "$ref": "#/definitions/userInfoValue"
              },
              "type": "array"
            }
          },
          "required": [
            "attributeNamespace",
            "values"
          ],
          "type": "object"
        },
        "userInfoValue": {
          "properties": {
            "value": {
              "description": "The value of the attribute. ",
              "type": "string"
            },
            "valuesId": {
              "description": "Unique identifier of the attribute value. ",
              "type": "string"
            }
          },
          "required": [
            "value",
            "valuesId"
          ],
          "type": "object"
        }
      },
      "info": {
        "contact": {
          "email": "support@ibm.com",
          "name": "IBM Support Team",
          "url": "https://www.ibm.com/support"
        },
        "description": "Interface with your IBM Security Access Manager Product through API Web Service calls. Script and automate your deployments.",
        "license": {
          "name": "IBM Confidential Client License",
          "url": "https://www.ibm.com/license"
        },
        "termsOfService": "https://www.ibm.com/tos",
        "title": "ISAM Management REST API",
        "version": "1.0.0"
      },
      "paths": {
        "/iam/access/v8/alias_service": {
          "get": {
            "description": "   To retrieve alias associations, issue a HTTP GET command on the alias service resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA,-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. Valid field names are \"id\", \"username\", \"federation_id\", \"type\", and \"aliases\". The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=username%20contains%20scr%20and%20id%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve alias associations",
            "tags": [
              "Secure: Federation",
              "Alias Service"
            ]
          },
          "post": {
            "description": "   To create an alias association, which associates a user in a federation to one or more aliases,                    issue a HTTP POST command on the alias service resource URI. An alias association is uniquely                    identified by the combination of username, federation ID, and type.                    Only one association of each unique combination can be configured. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful.",
                "schema": {
                  "description": "aliasServiceJsonResponseCreate",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create an alias association",
            "tags": [
              "Secure: Federation",
              "Alias Service"
            ]
          }
        },
        "/iam/access/v8/alias_service/{id}": {
          "delete": {
            "description": "   To remove an alias association from a user,                    issue a HTTP DELETE command on the alias service resource URI. ",
            "parameters": [
              {
                "description": "The id of the association.",
                "in": "path",
                "name": "id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Remove an alias association",
            "tags": [
              "Secure: Federation",
              "Alias Service"
            ]
          },
          "put": {
            "description": "   To update an alias association, issue a HTTP                    PUT command on the alias service resource URI. The id,                    username, federation_id, and type values cannot be modified.                    Only the aliases array can be updated. Any aliases removed                    from the array will be removed from the alias association. ",
            "parameters": [
              {
                "description": "The id of the association.",
                "in": "path",
                "name": "id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update an alias association",
            "tags": [
              "Secure: Federation",
              "Alias Service"
            ]
          }
        },
        "/iam/access/v8/attribute-matchers/": {
          "get": {
            "description": "   To retrieve information on existing attribute matchers, issue an HTTP GET command on the   \t\t\t\t\t attribute-matchers resource URI. Qualify the list returned by specifying one or more   \t\t\t\t\t query parameters: sortBy or filter.  \t\t\t\t\t See the information about predefined attribute matchers and their properties in the  \t\t\t\t\t Administering topics of the IBM Knowledge Center. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/attributeMatcherJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of attribute matchers",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attribute Matchers"
            ]
          }
        },
        "/iam/access/v8/attribute-matchers/{attribute_matcher_id}": {
          "get": {
            "description": "   To retrieve information on a specific attribute matcher, issue an HTTP GET command on the   \t\t\t\t\t attribute-matchers resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned attribute matcher ID value.",
                "in": "path",
                "name": "attribute_matcher_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "attributeMatcherJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific attribute matcher",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attribute Matchers"
            ]
          },
          "put": {
            "description": "   To update the property values of an existing attribute matcher, issue an HTTP PUT   \t\t\t\t\t command on the attribute-matchers resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned attribute matcher ID value.",
                "in": "path",
                "name": "attribute_matcher_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update an attribute matcher property",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attribute Matchers"
            ]
          }
        },
        "/iam/access/v8/attributes/": {
          "get": {
            "description": "   To retrieve information on existing attributes, issue an HTTP GET command on the   \t\t\t\t\t attributes resource URI. Qualify the list returned by specifying one or more   \t\t\t\t\t query parameters: sortBy, count, start, or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/attributeJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of attributes",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attributes"
            ]
          },
          "post": {
            "description": "   To create an attribute, issue an HTTP POST command on the   \t\t\t\t\t attributes resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create an attribute",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attributes"
            ]
          }
        },
        "/iam/access/v8/attributes/{attribute_id}": {
          "delete": {
            "description": "   To delete an attribute, issue an HTTP DELETE command on the   \t\t\t\t\t attributes resource URI.  A predefined attribute cannot be                    deleted. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned attribute ID value.",
                "in": "path",
                "name": "attribute_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete an attribute",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attributes"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific attribute, issue an HTTP GET command on the   \t\t\t\t\t attributes resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned attribute ID value.",
                "in": "path",
                "name": "attribute_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "attributeJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific attribute",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attributes"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing attribute, issue an HTTP PUT command on the   \t\t\t\t\t attributes resource URI specifying the ID of the attribute to be updated.  The   \t\t\t\t\t only field that can be updated for a predefined attribute is the storageDomain.    \t\t\t\t\t If an attribute is included in a policy, you cannot make further updates to the  \t\t\t\t     attribute. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned attribute ID value.",
                "in": "path",
                "name": "attribute_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified attribute",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Attributes",
              "Attributes"
            ]
          }
        },
        "/iam/access/v8/authentication/mechanisms": {
          "get": {
            "description": "   To retrieve information about existing authentication mechanisms, issue an HTTP GET command on the                     authentication mechanisms resource URI. Qualify the list returned by specifying one or more                     of the following query parameters:                    start, count, filter or sortBy. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/authMechJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of authentication mechanisms",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Mechanisms"
            ]
          }
        },
        "/iam/access/v8/authentication/mechanisms/{auth_mechanism_id}": {
          "get": {
            "description": "   To retrieve information on a specific authentication mechanism, issue an HTTP GET command on the                     authentication mechanisms resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned authentication mechanism ID value.",
                "in": "path",
                "name": "auth_mechanism_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "authMechJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific authentication mechanism",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Mechanisms"
            ]
          },
          "put": {
            "description": "  To update the settings of an existing authentication mechanism, issue an HTTP PUT command on the                    authentication mechanisms resource URI specifying the ID of the authentication mechanism to be updated.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned authentication mechanism ID value.",
                "in": "path",
                "name": "auth_mechanism_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified authentication mechanism",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Mechanisms"
            ]
          }
        },
        "/iam/access/v8/authentication/policies/{policy_id}": {
          "delete": {
            "description": "   To delete an authentication policy, issue an HTTP DELETE command on the policies resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy ID value.",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete an authentication policy",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Policies"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing policy, issue an HTTP PUT command on the authentication                     policies resource URI that specifies the ID of the policy to be updated.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy ID value.",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified authentication policy",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Policies"
            ]
          }
        },
        "/iam/access/v8/bundles": {
          "get": {
            "description": "   To retrieve information about existing bundles, issue an HTTP GET command on the bundles resource URI.                     Qualify the list returned by specifying one or more of the following query parameters:                    start, count or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/bundleJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of bundles",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Extensions",
              "Bundles"
            ]
          },
          "post": {
            "description": " To create a bundle, issue an HTTP POST command on the bundles resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create a bundle",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Extensions",
              "Bundles"
            ]
          }
        },
        "/iam/access/v8/bundles/{bundle_id}": {
          "delete": {
            "description": "  To delete a bundle, issue an HTTP DELETE command on the bundles resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "System-assigned bundle ID value.",
                "in": "path",
                "name": "bundle_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a bundle",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Extensions",
              "Bundles"
            ]
          },
          "get": {
            "description": "  To retrieve information about a specific bundle, issue an HTTP GET command on the bundles resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "System-assigned bundle ID value.",
                "in": "path",
                "name": "bundle_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "bundleJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific bundle",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Extensions",
              "Bundles"
            ]
          },
          "put": {
            "description": " To update a bundle, issue an HTTP PUT command on the bundles resource URI. ",
            "parameters": [
              {
                "description": "System-assigned bundle ID value.",
                "in": "path",
                "name": "bundle_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a bundle",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Extensions",
              "Bundles"
            ]
          }
        },
        "/iam/access/v8/bundles/{bundle_id}/file": {
          "get": {
            "description": "  To export a bundle as a file, issue an HTTP GET command on the bundles file resource URI. ",
            "parameters": [
              {
                "description": "System-assigned bundle ID value.",
                "in": "path",
                "name": "bundle_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Export a specific bundle",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Extensions",
              "Bundles"
            ]
          }
        },
        "/iam/access/v8/clients/": {
          "get": {
            "description": "   To retrieve information on registered API protection clients,                       issue an HTTP GET command on the clients resource URI.                       Qualify the list returned by specifying one or more                       query parameters: sortBy, count, start, or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/clientJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of API protection clients",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Clients"
            ]
          },
          "post": {
            "description": "   To register an API protection client, issue an HTTP POST command on the                       clients resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Register an API protection client",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Clients"
            ]
          }
        },
        "/iam/access/v8/clients/clientsecret/": {
          "get": {
            "description": "   To generate a random and unique alphanumeric string to be used as                       a client secret, issue an HTTP GET command on the                       clients clientsecret resource URI. ",
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "clientSecretJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Generate a client secret",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Clients"
            ]
          }
        },
        "/iam/access/v8/clients/{client_id}": {
          "get": {
            "description": "   To retrieve information on a specific API protection client registration, issue an HTTP                       GET command on the clients resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "clientJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific API protection client",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Clients"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing API protection client, issue an HTTP                       PUT command on the clients resource URI specifying the ID of the API                    protection client to be updated. The definition associated with a client                    cannot be updated. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified API protection client",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Clients"
            ]
          }
        },
        "/iam/access/v8/definitions/": {
          "get": {
            "description": "   To retrieve information on existing API protection definitions,                    issue an HTTP GET command on the definitions resource URI.                    Qualify the list returned by specifying one or more                    query parameters: sortBy, count, start, or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/definitionJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of API protection definitions",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Definitions"
            ]
          },
          "post": {
            "description": "   To create an API protection definition, issue an HTTP POST command on the                    definitions resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create an API protection definition",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Definitions"
            ]
          }
        },
        "/iam/access/v8/definitions/{definition_id}": {
          "delete": {
            "description": "   To delete an API protection definition, issue an HTTP DELETE command on the                    definitions resource URI.  A definition cannot be deleted if there are                    API protection clients associated with it or it is attached to a resource. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned API protection definition ID value.",
                "in": "path",
                "name": "definition_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete an API protection definition",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Definitions"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific API protection definition, issue an HTTP GET command on the                    definitions resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned API protection definition ID value.",
                "in": "path",
                "name": "definition_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "definitionJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific API protection definition",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Definitions"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing API protection definition, issue an HTTP                    PUT command on the definitions resource URI specifying the ID of the API                    protection definition to be updated. The request payload must contain all                    configured elements or the missing elements will be reset to the default. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned API protection definition ID value.",
                "in": "path",
                "name": "definition_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified API protection definition",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "OAuth 2.0 Support",
              "API Protection Definitions"
            ]
          }
        },
        "/iam/access/v8/federations/": {
          "get": {
            "description": "   To retrieve information on registered federations,                    issue an HTTP GET command on the federations resource URI.                    Qualify the list returned by specifying one or more                    query parameters: count or start. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. Valid field names are \"id\" and \"name\". The &lt;operator&gt; is the comparator operator equals. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=name%20equals%20saml2federation%20and%20id%20equals%20uuid.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/federationsJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of federations",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          }
        },
        "/iam/access/v8/federations/{federation_id}": {
          "get": {
            "description": "   To retrieve information for a specific federation,                    issue an HTTP GET command on the federations resource                    URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned federation identifier.",
                "in": "path",
                "name": "federation_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "federationsJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a federation",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          }
        },
        "/iam/access/v8/federations/{federation_id}/metadata": {
          "get": {
            "description": "   To export the meta-data for a specific federation,                    issue an HTTP GET command on the federations metadata                    resource URI. ",
            "parameters": [
              {
                "description": "The system-assigned federation identifier.",
                "in": "path",
                "name": "federation_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Export a federation",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          }
        },
        "/iam/access/v8/federations/{federation_id}/partners": {
          "get": {
            "description": "   To retrieve information on registered partners,                    issue an HTTP GET command on the partners resource URI.                    Qualify the list returned by specifying one or more                    query parameters: count or start. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/partnersJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of partners",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          },
          "post": {
            "description": "   To create a new partner, issue an HTTP POST                    command on the partners resource URI. ",
            "parameters": [
              {
                "description": "The system-generated federation id.",
                "in": "path",
                "name": "federation_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create a new partner",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          }
        },
        "/iam/access/v8/federations/{federation_id}/partners/metadata": {
          "post": {
            "description": "   To import a new partner, issue an HTTP POST                    command on the partners metadata resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Import a new partner",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          }
        },
        "/iam/access/v8/federations/{federation_id}/partners/{partner_id}": {
          "get": {
            "description": "   To retrieve information for a specific partner,                    issue an HTTP GET command on the partners resource                    URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned federation identifier.",
                "in": "path",
                "name": "federation_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned partner identifier.",
                "in": "path",
                "name": "partner_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "partnersJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a partner",
            "tags": [
              "Secure: Federation",
              "Federations"
            ]
          }
        },
        "/iam/access/v8/geolocation-db/cancel": {
          "get": {
            "description": "  To cancel the most recent geolocation database load, issue an HTTP GET command on the geolocation database resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "geoCancelJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Cancel the most recent geolocation database load.",
            "tags": [
              "Manage: System Settings",
              "Updates and Licensing",
              "Geolocation Database"
            ]
          }
        },
        "/iam/access/v8/grants/": {
          "get": {
            "description": "   To retrieve information on existing grants, issue an HTTP                       GET command on the grants resource URI.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/grantJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of grants",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          }
        },
        "/iam/access/v8/grants/userIds/": {
          "get": {
            "description": "   To retrieve a list of user ids who own one or more authorization grants, issue an HTTP                       GET command on the userIds resource URI. Qualify the list returned                       by specifying one or more query parameters: sortBy or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/grantUserIdJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of user ids who own one or more authorization grants",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          }
        },
        "/iam/access/v8/grants/userIds/{user_id}": {
          "delete": {
            "description": "   To delete grants owned by a specific user, issue an HTTP DELETE command on the                       user grants resource URI. Deleting grants will delete all associated                       tokens. Changes takes effect immediately. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete grants owned by a specific user",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          },
          "get": {
            "description": "   To retrieve information on existing grants owned by a particular user, issue an HTTP                       GET command on the user grants resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/grantJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of grants owned by a particular user",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          }
        },
        "/iam/access/v8/grants/{state_id}": {
          "delete": {
            "description": "   To delete an grant, issue an HTTP DELETE command on the                       grants resource URI. Deleting a grant will delete all associated                       tokens. Changes takes effect immediately. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The state ID value of the grant.",
                "in": "path",
                "name": "state_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a grant",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific grant, issue an HTTP                       GET command on the grants resource URI with the state id of the grant. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The state ID value of the grant.",
                "in": "path",
                "name": "state_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/grantJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific grant",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          },
          "put": {
            "description": "   To update an existing grant, issue an HTTP PUT command on the                       specific grant resource URI. Using this operation, you can enable/disable                       a grant and change the attribute values. The changes take effect immediately. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The state ID value of the grant.",
                "in": "path",
                "name": "state_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified grant",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Grants"
            ]
          }
        },
        "/iam/access/v8/mapping-rules": {
          "post": {
            "description": "   To Import a mapping rule, issue an HTTP POST command on the mapping rules resource URI. ",
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK. The request was successfully submitted.  See response body for more information.",
                "schema": {
                  "description": "importTextResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Import a new mapping rule",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Mapping Rules"
            ]
          }
        },
        "/iam/access/v8/mapping-rules/": {
          "get": {
            "description": "   To retrieve information on existing mapping rules, issue an HTTP GET command on the                        mapping rules resource URI. Qualify the list returned by specifying one or more                        query parameters: sortBy, count, start, or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The number of records to return.",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) The record index from which to start returns. If specified, also define the count query parameter. Default is 0.",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/mappingRuleJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of mapping rules",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Mapping Rules"
            ]
          }
        },
        "/iam/access/v8/mapping-rules/{mapping_rule_id}": {
          "delete": {
            "description": "   To delete a mapping rule, issue an HTTP DELETE command on the mapping rules resource URI.                      A predefined mapping rule cannot be deleted. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned mapping rule ID value.",
                "in": "path",
                "name": "mapping_rule_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a mapping rule",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Mapping Rules"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific mapping rule, issue an HTTP GET command on the                        mapping rules resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned mapping rule ID value.",
                "in": "path",
                "name": "mapping_rule_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "mappingRuleJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific mapping rule",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Mapping Rules"
            ]
          }
        },
        "/iam/access/v8/mapping-rules/{mapping_rule_id}/file": {
          "get": {
            "description": "   To export a mapping rule as a file, issue an HTTP GET command on the                        mapping rules file resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned mapping rule ID value.",
                "in": "path",
                "name": "mapping_rule_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Export a specific mapping rule",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "API Protection",
              "Mapping Rules"
            ]
          }
        },
        "/iam/access/v8/mmfa-config": {
          "delete": {
            "description": "   To unconfigure the MMFA endpoint details, issue an HTTP DELETE command                        on the MMFA config resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Unconfigure MMFA endpoint details",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Endpoint Configuration"
            ]
          },
          "get": {
            "description": "   To retrieve the MMFA endpoint details, issue an HTTP GET command                        on the MMFA config resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve MMFA endpoint details",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Endpoint Configuration"
            ]
          },
          "post": {
            "description": "   To configure the MMFA endpoint details, issue an HTTP POST command                        on the MMFA config resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Configure MMFA endpoint details",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Endpoint Configuration"
            ]
          }
        },
        "/iam/access/v8/mmfa-transactions/": {
          "get": {
            "description": "   To retrieve information on MMFA transactions issue an HTTP                       GET command on the mmfa-transactions resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/transactionsJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of MMFA transactions",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "MMFA Transactions"
            ]
          }
        },
        "/iam/access/v8/mmfa-transactions/{id}": {
          "delete": {
            "description": "   To delete an MMFA transaction, issue an HTTP DELETE command on the                       mmfa-transactions resource URI. Changes takes effect immediately. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The ID value of the transaction.",
                "in": "path",
                "name": "id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a transaction",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "MMFA Transactions"
            ]
          },
          "get": {
            "description": "   To retrieve information on an MMFA transaction issue an HTTP                       GET command on the mmfa-transactions resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/transactionsJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a single MMFA transaction",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "MMFA Transactions"
            ]
          }
        },
        "/iam/access/v8/obligation/types/{obligation_type_id}": {
          "get": {
            "description": "  To retrieve information about a specific type of obligation, issue an HTTP GET command on the obligation types resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned obligation type ID value.",
                "in": "path",
                "name": "obligation_type_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "obligationTypeJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific obligation type",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Obligations",
              "Obligation Types"
            ]
          }
        },
        "/iam/access/v8/obligations/": {
          "get": {
            "description": "   To retrieve information on existing obligations, issue an HTTP  \t\t\t\t     GET command on the obligations resource URI. Qualify the list returned  \t\t\t\t     by specifying one or more query parameters: sortBy or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/obligationJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of obligations",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Obligations",
              "Obligations"
            ]
          },
          "post": {
            "description": "   To create an obligation, issue an HTTP POST command on the  \t\t\t\t\t obligations resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create an obligation",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Obligations",
              "Obligations"
            ]
          }
        },
        "/iam/access/v8/obligations/{obligation_id}": {
          "delete": {
            "description": "   To delete an obligation, issue an HTTP DELETE command on the  \t\t\t\t\t obligations resource URI.  Predefined obligations or                    obligations that are in use by a policy cannot be deleted. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned obligation ID value.",
                "in": "path",
                "name": "obligation_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete an obligation",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Obligations",
              "Obligations"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific obligation, issue an HTTP GET command on the  \t\t\t\t\t obligations resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned obligation ID value.",
                "in": "path",
                "name": "obligation_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "obligationJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific obligation",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Obligations",
              "Obligations"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing obligation, issue an HTTP PUT command on the  \t\t\t\t\t obligations resource URI specifying the ID of the obligation to be updated.                    Predefined obligations or obligations that are in use by a policy cannot be updated. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned obligation ID value.",
                "in": "path",
                "name": "obligation_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified obligation",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Obligations",
              "Obligations"
            ]
          }
        },
        "/iam/access/v8/otp/config/rsa": {
          "get": {
            "description": "   To retrieve a list of configuration files used for RSA OTP configuration,  \t\t\t\t\t issue an HTTP GET command on the OTP RSA configuration resource URI.  ",
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/rsaFilesJsonResponse"
                  },
                  "type": "array"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of configuration files for RSA",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Mechanisms",
              "RSA OTP Configuration Files"
            ]
          }
        },
        "/iam/access/v8/otp/config/rsa/sdconf.rec": {
          "delete": {
            "description": "   To delete sdconf.rec on the appliance, issue an   \t\t\t\t\t HTTP DELETE command on the OTP RSA configuration sdconf.rec resource URI. ",
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete sdconf.rec",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Mechanisms",
              "RSA OTP Configuration Files"
            ]
          }
        },
        "/iam/access/v8/otp/config/rsa/sdopts.rec": {
          "delete": {
            "description": "   To delete sdopts.rec on the appliance, issue an   \t\t\t\t\t HTTP DELETE command on the OTP RSA configuration sdopts.rec resource URI. ",
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete sdopts.rec",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Authentication",
              "Authentication Mechanisms",
              "RSA OTP Configuration Files"
            ]
          }
        },
        "/iam/access/v8/override-configs/": {
          "put": {
            "description": "   To update a list of configuration properties, issue an HTTP PUT command on the                        override-configs resource URI specifying a JSON array of configuration property                    IDs to be updated, along with their new values. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a list of configuration properties",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Advanced Configuration",
              "Configuration"
            ]
          }
        },
        "/iam/access/v8/override-configs/{property_id}": {
          "get": {
            "description": "   To retrieve information on a specific configuration property, issue an HTTP GET command on the                        override-configs resource URI. ",
            "parameters": [
              {
                "description": "The system-assigned configuration property ID value.",
                "in": "path",
                "name": "property_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "configOverJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific configuration property",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Advanced Configuration",
              "Configuration"
            ]
          },
          "put": {
            "description": "   To update the value of a configuration property, issue an HTTP PUT command on the                        override-configs resource URI specifying the ID of the configuration property to                        be updated.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned configuration property ID value.",
                "in": "path",
                "name": "property_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a configuration property",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Advanced Configuration",
              "Configuration"
            ]
          }
        },
        "/iam/access/v8/pips/{pip_id}/file": {
          "get": {
            "description": "   To export the script contents of a JavaScript policy information   \t\t\t\t\t point, issue an HTTP GET command on the   \t\t\t\t\t PIPs file resource URI.   The value of the                     property defined with key 'javascript.code' or 'fileContent' will                    be returned.  ",
            "parameters": [
              {
                "description": "The system-assigned policy information point ID value.",
                "in": "path",
                "name": "pip_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Export a specific policy information point",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Information Points",
              "Policy Information Points",
              "Instances"
            ]
          }
        },
        "/iam/access/v8/poc/profiles/": {
          "get": {
            "description": "   To retrieve information on existing point of contact profiles, issue                    an HTTP GET command on the point of contact profiles resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/pocProfileJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of point of contact profiles",
            "tags": [
              "Secure: Federation",
              "Point of Contact Profiles"
            ]
          }
        },
        "/iam/access/v8/poc/profiles/{id}": {
          "get": {
            "description": "   To retrieve information for a specific point of contact profile, issue                    an HTTP GET command on the point of contact profile resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned point of contact profile identifier.",
                "in": "path",
                "name": "id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "pocProfileJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a point of contact profile",
            "tags": [
              "Secure: Federation",
              "Point of Contact Profiles"
            ]
          }
        },
        "/iam/access/v8/policies/": {
          "get": {
            "description": "   To retrieve information on existing policies, issue an HTTP GET command on the   \t\t\t\t\t policies resource URI. Qualify the list returned                     by specifying one or more query parameters: sortBy or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/policyListJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of policies",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policies"
            ]
          }
        },
        "/iam/access/v8/policies/{policy_id}": {
          "delete": {
            "description": "   To delete a policy, issue an HTTP DELETE command on the   \t\t\t\t\t policies resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy ID value.",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a policy",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policies"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific policy, issue an HTTP GET command on the   \t\t\t\t\t policies resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy ID value.",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "policySingleJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific policy",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policies"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing policy, issue an HTTP PUT command on the   \t\t\t\t\t policies resource URI specifying the ID of the policy to be updated.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy ID value.",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified policy",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policies"
            ]
          }
        },
        "/iam/access/v8/policyattachments/": {
          "get": {
            "description": "   To retrieve information on configured resources, issue an HTTP GET command on the   \t\t\t\t  policy attachments resource URI. Qualify the list returned by specifying one or more   \t\t\t\t  query parameters: sortBy or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/policyAttachmentJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of configured resources",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Attachments",
              "Resources"
            ]
          },
          "post": {
            "description": "   To configure a resource for policy attachment,   \t\t\t\t\t issue an HTTP POST command on the policy attachments resource URI.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Configure a resource",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Attachments",
              "Resources"
            ]
          }
        },
        "/iam/access/v8/policyattachments/{policy_attachment_id}": {
          "delete": {
            "description": "   To delete a configured resource and all attached policies, issue an   \t\t\t\t\t HTTP DELETE command on the policy attachments resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy attachment ID value.",
                "in": "path",
                "name": "policy_attachment_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Indicates to force the delete when the resource no longer exists on the policy server.  Valid values are 'true' and 'false'.",
                "in": "query",
                "name": "force_delete",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a configured resource",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Attachments",
              "Resources"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific resource and its policy attachments, issue  \t\t\t\t\t an HTTP GET command on the policy attachments resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy attachment ID value.",
                "in": "path",
                "name": "policy_attachment_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "policyAttachmentJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific configured resource",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Attachments",
              "Resources"
            ]
          }
        },
        "/iam/access/v8/policyattachments/{policy_attachment_id}/policies": {
          "put": {
            "description": "   To update the policy attachments for a resource, issue an HTTP PUT command on the   \t\t\t\t     policy attachments policies resource URI. Specify the action query parameter to   \t\t\t\t\t indicate the type of change to the policy attachment.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy attachment ID value.",
                "in": "path",
                "name": "policy_attachment_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Indicates the type of change to the policy attachment.  Valid values are 'add', 'remove', 'force_remove', or 'set'. Specify an array of attachments (policies, policy sets, and definitions) to be added, removed, or set as the new list of attachments for this resource. 'set' replaces what is currently assigned to the resource with the new list.",
                "in": "query",
                "name": "action",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update the attachments for a resource",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Attachments",
              "Attach Policy to Resources"
            ]
          }
        },
        "/iam/access/v8/policysets/": {
          "get": {
            "description": "   To retrieve information on existing policy sets, issue an HTTP GET command on the   \t\t\t\t  policy sets resource URI. Qualify the list returned by specifying one or more   \t\t\t\t  query parameters: sortBy or filter. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/policySetJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of policy sets",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Sets"
            ]
          },
          "post": {
            "description": "   To create a policy set, issue an HTTP POST command on the   \t\t\t\t\t policy sets resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create a policy set",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Sets"
            ]
          }
        },
        "/iam/access/v8/policysets/{policy_set_id}": {
          "delete": {
            "description": "   To delete a policy set, issue an HTTP DELETE command on the   \t\t\t\t\t policy sets resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy set ID value.",
                "in": "path",
                "name": "policy_set_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a policy set",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Sets"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific policy set, issue an HTTP GET command on the   \t\t\t\t\t policy sets resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy set ID value.",
                "in": "path",
                "name": "policy_set_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "policySetJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific policy set",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Sets"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing policy set, issue an HTTP PUT command on the   \t\t\t\t\t policy sets resource URI specifying the ID of the policy set to be updated. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy set ID value.",
                "in": "path",
                "name": "policy_set_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified policy set",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Sets"
            ]
          }
        },
        "/iam/access/v8/policysets/{policy_set_id}/policies": {
          "put": {
            "description": "   To update the list of policies in a policy set, issue an HTTP PUT command on the   \t\t\t\t     policy sets policies resource URI. Specify the action query parameter to   \t\t\t\t\t indicate the type of change to the policy set.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned policy set ID value.",
                "in": "path",
                "name": "policy_set_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Indicates the type of change to the policy set.  Valid values are 'add', 'remove', or 'set'.  'set' will replace the policies currently assigned to the policy set with the inputted values. 'set' can also be used to indicate the order the policies in the set should be evaluated.",
                "in": "query",
                "name": "action",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update the list of policies in a policy set",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Access Control",
              "Policy Sets"
            ]
          }
        },
        "/iam/access/v8/push-notification": {
          "get": {
            "description": "   To retrieve a list of push notification registrations, issue an HTTP GET command                        on the push-notification resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/registrationListJson"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of push notification registrations",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Push Notification Registration"
            ]
          },
          "post": {
            "description": "   To create a push notification registration, issue an HTTP POST command                        on the push-notification resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "registrationIdJson",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create a push notification registration",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Push Notification Registration"
            ]
          }
        },
        "/iam/access/v8/push-notification/{pnr_id}": {
          "delete": {
            "description": "   To delete a push notification registration, issue an HTTP DELETE command                        on the push-notification resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The unique identifier for the registration.",
                "in": "path",
                "name": "pnr_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a push notification registration",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Push Notification Registration"
            ]
          },
          "get": {
            "description": "   To retrieve information on a push notification registration, issue an HTTP                        GET command on the push-notification resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The unique identifier for the registration.",
                "in": "path",
                "name": "pnr_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "registrationJson",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a push notification registration",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Push Notification Registration"
            ]
          },
          "put": {
            "description": "   To update a push notification registration, issue an HTTP PUT command                        on the push-notification resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The unique identifier for the registration.",
                "in": "path",
                "name": "pnr_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a push notification registration",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Mobile Multi Factor Authentication",
              "Push Notification Registration"
            ]
          }
        },
        "/iam/access/v8/risk/profiles/": {
          "get": {
            "description": "   To retrieve information on existing risk profiles, issue an HTTP GET command on the   \t\t\t\t\t /risk/profiles resource URI. Qualify the list returned by specifying one or more   \t\t\t\t\t query parameters: sortBy or filter.  The Active risk profile will have its active                     field set to 'True'. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "(Optional) The response field name that the returned data is sorted by. Precede the field name with a plus sign (+) for ascending order and a minus sign (-) for descending order.  Separate multiple field names by a comma. For example&#58; sortBy=+fieldA or sortBy=-fieldB",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "(Optional) One or more filter-statements, where filter-statement consists of &lt;name&gt;, &lt;operator&gt;, or &lt;expression&gt;. The &lt;name&gt; is the field name to apply the filter to. The &lt;operator&gt; is one of the following comparator operators&#58; equals, gt, ge, lt, le, notequal, startswith, endswith, contains, or containsignorecase. The &lt;expression&gt; indicates the value to be included in the results. Multiple filter-statements can be combined with ' and '. The filter must be URL-safe encoded. For example&#58; filter=fieldA%20contains%20scr%20and%20fieldB%20gt%205.",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/riskProfileJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a list of risk profiles",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Risk Profiles",
              "Risk Profiles"
            ]
          },
          "post": {
            "description": "   To create a risk profile, issue an HTTP POST command on the   \t\t\t\t\t /risk/profiles resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create a risk profile",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Risk Profiles",
              "Risk Profiles"
            ]
          }
        },
        "/iam/access/v8/risk/profiles/{risk_profile_id}": {
          "delete": {
            "description": "   To delete a risk profile, issue an HTTP DELETE command on the   \t\t\t\t\t /risk/profiles resource URI.  You cannot delete the currently active or a                     predefined risk profile. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned risk_profile ID value.",
                "in": "path",
                "name": "risk_profile_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a risk profile",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Risk Profiles",
              "Risk Profiles"
            ]
          },
          "put": {
            "description": "   To update the settings of an existing risk profile, issue an HTTP PUT command on the   \t\t\t\t\t /risk/profiles resource URI specifying the ID of the risk profile to be updated.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned risk_profile ID value.",
                "in": "path",
                "name": "risk_profile_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specified risk profile",
            "tags": [
              "Secure: Access Control",
              "Policy",
              "Risk Profiles",
              "Risk Profiles"
            ]
          }
        },
        "/iam/access/v8/sts/chains": {
          "get": {
            "description": "   To retrieve information on existing STS chains, issue an HTTP GET command on the   \t\t\t\t\t STS chains resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/stsChainJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific STS chain",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Chains"
            ]
          }
        },
        "/iam/access/v8/sts/chains/{chain_id}": {
          "delete": {
            "description": "   To delete a specific STS chain, issue an HTTP DELETE command on the   \t\t\t\t\t STS chains resource URI.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a specific STS chain",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Chains"
            ]
          }
        },
        "/iam/access/v8/sts/chains/{instance_id}": {
          "put": {
            "description": "   To update the settings of an existing STS chain, issue an HTTP PUT command on the   \t\t\t\t\t STS chain resource URI specifying the ID of the STS chain to be updated.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specific STS chain",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Chains"
            ]
          }
        },
        "/iam/access/v8/sts/modules/{instance_id}": {
          "get": {
            "description": "   To retrieve information on an existing STS module instance, issue an HTTP GET command on the   \t\t\t\t\t STS modules resource URI using the STS module instance's ID. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/stsModuleInstanceJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific STS module instance",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Modules"
            ]
          }
        },
        "/iam/access/v8/sts/templates/{chain_id}": {
          "put": {
            "description": "   To update the settings of an existing STS chain, issue an HTTP PUT command on the   \t\t\t\t\t STS chain templates resource URI specifying the ID of the STS chain template to                     be updated.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned STS chain ID value.",
                "in": "path",
                "name": "sts_chain_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a specific STS chain template",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Chains"
            ]
          }
        },
        "/iam/access/v8/sts/templates/{chain_template_id}": {
          "delete": {
            "description": "   To delete an STS chain template, issue an HTTP DELETE command on the   \t\t\t\t\t STS chain templates resource URI.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "409": {
                "description": "Conflict. The JSON result indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a specific STS chain template",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Chains"
            ]
          }
        },
        "/iam/access/v8/sts/templates/{id}": {
          "get": {
            "description": "   To retrieve information on a specific STS chain template, issue an HTTP GET command on the   \t\t\t\t\t STS chain templates resource URI using the STS chain template's ID. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The system-assigned STS chain ID value.",
                "in": "path",
                "name": "sts_chain_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/stsChainTemplateJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific STS chain template",
            "tags": [
              "Secure: Federation",
              "STS Modules and Chains",
              "STS Chains"
            ]
          }
        },
        "/iam/access/v8/testconnection": {
          "post": {
            "description": "   To test the connection, issue an HTTP POST command on the connection resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "testConnectionJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Test Connection",
            "tags": [
              "Secure: Access Control",
              "Manage",
              "Server Connections",
              "Connection"
            ]
          }
        },
        "/iam/access/v8/user-info/{user_id}": {
          "delete": {
            "description": "   To delete all user attribute information for a                    particular user, issue a HTTP DELETE command on                    the user info resource URI.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete user attributes",
            "tags": [
              "Secure: Access Control",
              "User Info"
            ]
          },
          "get": {
            "description": "   To retrieve user attribute information for a                    particular user, issue a HTTP GET command on                     the user info resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/userInfoListJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve the attributes of a user",
            "tags": [
              "Secure: Access Control",
              "User Info"
            ]
          }
        },
        "/idaas/v1/mgmt/idaas/environment/tenants/<tenantId>/oidc/clients": {
          "get": {
            "description": "   To retrieve information on all OIDC Clients, issue an HTTP                       GET command on the clients resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "OIDCClientJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve all OIDC clients",
            "tags": [
              "Open ID Connect Clients"
            ]
          },
          "post": {
            "description": "   To create a new OIDC Client, issue an HTTP                       POST command on the clients resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create a new OIDC client",
            "tags": [
              "Open ID Connect Clients"
            ]
          }
        },
        "/idaas/v1/mgmt/idaas/environment/tenants/<tenantId>/oidc/clients/{id}": {
          "delete": {
            "description": "   To delete a specific OIDC client, issue an HTTP                       DELETE command on the clients resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a specific OIDC client",
            "tags": [
              "Open ID Connect Clients"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific OIDC Client, issue an HTTP                       GET command on the client resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "OIDCClientJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific OIDC client",
            "tags": [
              "Open ID Connect Clients"
            ]
          }
        },
        "/idaas/v1/mgmt/idaas/environment/tenants/<tenantId>/oidc/consents": {
          "get": {
            "description": "   To retrieve information on all OIDC consents, issue an HTTP                       GET command on the consents resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "OIDCConsentJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve all OIDC consents",
            "tags": [
              "Open ID Connect Consents"
            ]
          }
        },
        "/idaas/v1/mgmt/idaas/environment/tenants/<tenantId>/oidc/consents/clients/{id}": {
          "delete": {
            "description": "   To delete all OIDC consents for a client, issue an HTTP                       DELETE command on the consents resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete all OIDC consents for a client",
            "tags": [
              "Open ID Connect Consents"
            ]
          },
          "get": {
            "description": "   To retrieve information on all OIDC consents for a client, issue an HTTP                       GET command on the consents resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "OIDCConsentClientsJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve all OIDC consents for a client",
            "tags": [
              "Open ID Connect Consents"
            ]
          }
        },
        "/idaas/v1/mgmt/idaas/environment/tenants/<tenantId>/oidc/consents/users/{id}": {
          "delete": {
            "description": "   To delete all OIDC consents for a user, issue an HTTP                       DELETE command on the consents resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete all OIDC consents for a user",
            "tags": [
              "Open ID Connect Consents"
            ]
          },
          "get": {
            "description": "   To retrieve information on all OIDC consents for a user, issue an HTTP                       GET command on the consents resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "OIDCConsentUsersJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve all OIDC consents for a user",
            "tags": [
              "Open ID Connect Consents"
            ]
          }
        },
        "/mga/sps/apiauthsvc": {
          "unknown": {
            "description": "   Invocation of the authentication service framework is supported by a JSON format web API.  The API                    enables requesting clients to invoke single and multi-factor authentication policies.  The API is built                    on the same internal framework as the browser based authentication services. ",
            "parameters": [],
            "responses": {},
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Authentication Services Web API",
            "tags": [
              "Authentication Service Web API"
            ]
          }
        },
        "/mga/sps/apiauthsvc?PolicyId={policy identifier}": {
          "unknown": {
            "description": "   Multi factor authentication policies are supported by the web API.  The basic technique                    by which this is supported is the 'stateId' and 'location' attributes which are                    returned with each API request until the policy workflow completes.  The location                    attribute should be used by the client as a way to navigate a multi policy                    workflow from one request to the next.  The location and state ID values change                    with each response from the API. ",
            "parameters": [],
            "responses": {},
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Support for Multi Factor Authentication Policies",
            "tags": [
              "Authentication Service Web API",
              "Multi Factor Authentication Support"
            ]
          }
        },
        "/mga/sps/apiauthsvc?StateId=ae4ae1f3-724b-4a7e-b826-d2a990a1392a": {
          "post": {
            "description": "   The OTP mechanisms must be correctly configured before the policy workflow can                    successfully respond to any runtime requests.  Information about its                    configuration is available under the Configuring Authentication topics                    of the IBM Knowledge Center.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The authentication state identifier UUID",
                "in": "query",
                "name": "StateId",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "otpGenerateJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Generate and Deliver OTP",
            "tags": [
              "Authentication Service Web API",
              "General OTP Authentication API"
            ]
          }
        },
        "/mga/sps/apiauthsvc?StateId={state identifier}": {
          "put": {
            "description": "   The MAC OTP mechanism must be correctly configured before the policy workflow can                    successfully respond to any runtime requests.  Information about its                    configuration is available under the Configuring Authentication topics                    of the IBM Knowledge Center.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "The authentication state identifier UUID",
                "in": "query",
                "name": "StateId",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Verify MAC SMS One-time Password Acceptance",
            "tags": [
              "Authentication Service Web API",
              "MAC SMS One-time Password Authentication API"
            ]
          }
        },
        "/rtss/rest/authz/json": {
          "post": {
            "description": "\t To evaluate an XACML request formatted according to the XACML JSON specification,   \t\t\t\t\t issue an HTTP POST command on the XACML authorization URI.    ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "xacmlJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Evaluate a JSON formatted XACML request",
            "tags": [
              "RTSS XACML Evaluation"
            ]
          }
        },
        "/rtss/rest/authz/policy/refresh": {
          "post": {
            "description": "\t To refresh the RTSS policy cache after updating policies, issue an   \t\t\t\t\t HTTP POST command on the RTSS runtime refresh URI.    ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Refresh the RTSS policy cache",
            "tags": [
              "RTSS XACML Evaluation"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenantId}/applications": {
          "post": {
            "description": "   To create an application, issue an HTTP POST command on the                       tenant app for a applications resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create an application",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenantId}/applications/{appId}": {
          "delete": {
            "description": "   To delete an application , issue an HTTP DELETE command on the                       application resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete an application",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenantId}/identitysources": {
          "post": {
            "description": "   To create a tenant instance for a identity source, issue an HTTP POST command on the                       tenant instance for a identity source resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create tenant instance for a identity source",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenantId}/identitysources/{instanceId}": {
          "delete": {
            "description": "   To delete a tenant instance for a identity source , issue an HTTP DELETE command on the                       tenant instance for a identity source resource URI. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a tenant instance for a identity source",
            "tags": [
              "Identity Source Instances"
            ]
          },
          "put": {
            "description": "   To update the settings of tenant instance for a identity source, issue an HTTP                       PUT command on the tenant instance for a identity source resource URI specifying \t\t\t\t\t\t\tthe ID of the tenant instance for a identity source to be updated. ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a tenant instance for a identity source",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenantId}/policies/authentication/{policy_id}": {
          "get": {
            "description": "   To retrieve information on a specific authentication policy, issue an HTTP                       GET command on the authentication policy resource URI. ",
            "parameters": [
              {
                "description": "Authentication Policy identifier",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "propertiesJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific authentication policy",
            "tags": [
              "IDaaS Authentication Policies"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenant_id}/applications/": {
          "post": {
            "description": "   To bind a identity source instance to an application, issue an HTTP POST command on the                       identity source instance resource URI. ",
            "parameters": [
              {
                "description": "Tenant id",
                "in": "path",
                "name": "tenantId",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Bind a identity source instance to an application",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenant_id}/applications/{client_id}/": {
          "delete": {
            "description": "   To delete a bindings of identity source instances to application , issue an HTTP DELETE command on the                       identity source instance resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Tenant id",
                "in": "path",
                "name": "tenantId",
                "required": true,
                "type": "string"
              },
              {
                "description": "Id for the application",
                "in": "path",
                "name": "clientId",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete all bindings of identity source instances to application",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/environment/tenants/{tenant_id}/applications/{client_id}/{provider_id}": {
          "delete": {
            "description": "   To delete a binding of identity source instance to application , issue an HTTP DELETE command on the                       identity source instance resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Tenant id",
                "in": "path",
                "name": "tenant_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Id for the application",
                "in": "path",
                "name": "client_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Social login provider identifier",
                "in": "path",
                "name": "provider_id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a binding of identity source instance to application",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/bulkupload": {
          "post": {
            "description": "   To create users by uploading a csv file, issue an HTTP POST command on the bulk upload resource URI.   ",
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK. The request was successfully submitted.  See response body for more information.",
                "schema": {
                  "description": "importTextResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem."
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource."
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create bulk upload request",
            "tags": [
              "SCIM: User Registry",
              "User Import API"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/bulkupload/content/{id}": {
          "get": {
            "description": "   To get bulk upload request result, issue an HTTP GET command on the                       bulk upload resource URI. This will return a csv file for download.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Unique request id",
                "in": "path",
                "name": "id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Get bulk upload result",
            "tags": [
              "SCIM: User Registry",
              "User Import API"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/group": {
          "get": {
            "description": "   To list or search groups, issue an HTTP GET command on the                       group resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Returns groups whose display name matches the value of this parameter",
                "in": "query",
                "name": "filter",
                "required": false,
                "type": "string"
              },
              {
                "description": "Start Index of the search result (default 1)",
                "in": "query",
                "name": "start",
                "required": false,
                "type": "string"
              },
              {
                "description": "The desired maximum number of search results per page (default 100)",
                "in": "query",
                "name": "count",
                "required": false,
                "type": "string"
              },
              {
                "description": "Property to use for sorting the result (default displayName)",
                "in": "query",
                "name": "sortBy",
                "required": false,
                "type": "string"
              },
              {
                "description": "The sort order; ascending (default) or descending",
                "in": "query",
                "name": "sortOrder",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "List Groups",
            "tags": [
              "SCIM: User Registry",
              "Group API"
            ]
          },
          "post": {
            "description": "   To create a group, issue an HTTP POST command on the group resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "scimErrorJson",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create Group",
            "tags": [
              "SCIM: User Registry",
              "Group API"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/group/{id}": {
          "delete": {
            "description": "   To delete a grop, issue an HTTP DELETE command on the                       group resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Unique identifier of the group to be deleted",
                "in": "path",
                "name": "groupid",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete Group",
            "tags": [
              "SCIM: User Registry",
              "Group API"
            ]
          },
          "put": {
            "description": "   To modify the group properties, issue an HTTP PUT command on the group resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Unique identifier of the group to be modified",
                "in": "path",
                "name": "groupid",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "scimErrorJson",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Modify Group",
            "tags": [
              "SCIM: User Registry",
              "Group API"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/pwpolicy": {
          "post": {
            "description": "   To update the password policy, issue an HTTP POST command on the                       password policy resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Created. A new resource was created. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create or modify password policy",
            "tags": [
              "SCIM: User Registry",
              "Password Policy API"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/user": {
          "post": {
            "description": "   To create a user, issue an HTTP POST command on the user resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "scimErrorJson",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Create User",
            "tags": [
              "SCIM: User Registry",
              "User API"
            ]
          }
        },
        "/v1/mgmt/idaas/scim/user/{id}": {
          "delete": {
            "description": "   To delete a user, issue an HTTP DELETE command on the                       user resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Unique identifier of the user to be deleted",
                "in": "path",
                "name": "userid",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete User",
            "tags": [
              "SCIM: User Registry",
              "User API"
            ]
          },
          "put": {
            "description": "   To modify the user properties, issue an HTTP PUT command on the user resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              },
              {
                "description": "Unique identifier of the user to be modified",
                "in": "path",
                "name": "userid",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "scimErrorJson",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Modify User",
            "tags": [
              "SCIM: User Registry",
              "User API"
            ]
          }
        },
        "/v1/mgmt/idaas/tenants/tenant_id/sociallogin/applications/": {
          "get": {
            "description": "   To retrieve information on identity source instance bindings,                       issue an HTTP GET command on the identity source instance resource URI. ",
            "parameters": [
              {
                "description": "Tenant id",
                "in": "path",
                "name": "tenantId",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/bindingJsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve all the identity source instance bindings for all applications",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/tenants/tenant_id/sociallogin/applications/client_id": {
          "get": {
            "description": "   To retrieve information on identity source instance bindings,                       issue an HTTP GET command on the identity source instance resource URI. ",
            "parameters": [
              {
                "description": "Tenant id",
                "in": "path",
                "name": "tenant_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Id for the application",
                "in": "path",
                "name": "client_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "items": {
                    "$ref": "#/definitions/binding1JsonResponse"
                  },
                  "type": "array"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve all the identity source instance bindings for an application",
            "tags": [
              "Identity Source Instances"
            ]
          }
        },
        "/v1/mgmt/idaas/userregistries/{uregId}": {
          "delete": {
            "description": "   To delete a user registry instance for a tenant, issue an HTTP DELETE command on the                       user registry instance for a tenant resource URI.   ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Delete a user registry instance for a tenant",
            "tags": [
              "IDaaS User Registry For Tenant Administration"
            ]
          },
          "get": {
            "description": "   To retrieve information on a specific user registry, issue an HTTP                       GET command on the user registry resource URI. ",
            "parameters": [
              {
                "description": "User Registry Identifier",
                "in": "path",
                "name": "uregId",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "registryJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific User registry",
            "tags": [
              "IDaaS User Registry For Tenant Administration"
            ]
          },
          "put": {
            "description": "   To update the settings of user registry instance for a tenant, issue an HTTP                       PUT command on the user registry instance for a tenant resource URI specifying  \t\t\t\t\t\t\tthe ID of the user registry instance for a tenant to be updated.  ",
            "parameters": [
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No content returned.  The request was successful."
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Update a user registry instance for a tenant",
            "tags": [
              "IDaaS User Registry For Tenant Administration"
            ]
          }
        },
        "/v1/mgmt/idaas/userregistriestypes/{uregtype_id}": {
          "get": {
            "description": "   To retrieve information on a specific user registry type, issue an HTTP                       GET command on the user registry type resource URI. ",
            "parameters": [
              {
                "description": "User registry type identifier",
                "in": "path",
                "name": "policy_id",
                "required": true,
                "type": "string"
              },
              {
                "description": "Host name of the server containing the orchestration application .",
                "in": "path",
                "name": "orchestration_hostname",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK. The request was successful.",
                "schema": {
                  "description": "registryTypeJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "400": {
                "description": "Bad Request. There is a problem with the request. The JSON result describes the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "404": {
                "description": "Not Found. The requested service does not exist. The JSON message indicates which resource.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              },
              "500": {
                "description": "An internal error occurred. The JSON message indicates the problem.",
                "schema": {
                  "description": "httpErrorJsonResponse",
                  "properties": {
                    "message": {
                      "description": "Error message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "security": [
              {
                "basicAuth": []
              }
            ],
            "summary": "Retrieve a specific user registry type",
            "tags": [
              "IDaaS User Registry Type For Tenant Administration"
            ]
          }
        }
      },
      "produces": [
        "application/json",
        "application/xml"
      ],
      "securityDefinitions": {
        "basicAuth": {
          "description": "HTTP Basic Authentication. Works only over `HTTPS`",
          "type": "basic"
        }
      },
      "swagger": "2.0"
    },
    {
      info: {
        title: "Petstore by URL",
        version: "1.0.0"
      },
      url: "http://petstore.swagger.io/v2/swagger.json"
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "responses-using-ref",
        "title": "Responses using $ref",
        "version": "1.0.0",
        "description": "## Known issues\n- Responses using $ref don't render properly"
      },
      "x-ibm-endpoints": [{
        endpointUrl: "https://my-prod-server.com",
        type: ["production"],
        description: "I'm a description - markdown supported"
      }, {
        endpointUrl: "https://my-dev-server.com/sandbox",
        type: ["development"]
      }],
      "schemes": [
        "http",
        "https",
      ],
      "host": "$(catalog.host)",
      "basePath": "/responses-using-ref",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "clientId": {
          "type": "apiKey",
          "in": "query",
          "name": "client_id"
        },
        "clientSecret": {
          "type": "apiKey",
          "in": "query",
          "name": "client_secret"
        },
        "generic": {
          "type": "oauth2",
          "description": "Uses `$(catalog.host)`",
          "flow": "accessCode",
          "authorizationUrl": "$(catalog.url)/oauth2/v2/auth",
          "scopes": {
            "one": "",
            "two": ""
          },
          "tokenUrl": "$(catalog.url)/oauth2/v4/token"
        }
      },
      "security": [
        {
          "clientId": [],
          "clientSecret": [],
          "generic": []
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "https://example.com:8443/tolerant/items"
              }
            }
          ]
        },
        "phase": "realized"
      },
      "paths": {
        "/items": {
          "get": {
            "responses": {
              "200": {
                "$ref": "#/responses/200"
              },
              "400": {
                "$ref": "#/responses/400"
              },
              "401": {
                "$ref": "#/responses/401"
              },
              "403": {
                "description": "descriptive text of the 403 error",
                "schema": {
                  "$ref": "#/definitions/errorResponse"
                }
              },
              "default": {
                "$ref": "#/responses/500"
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Everything is OK",
          "schema": {
            "$ref": "#/definitions/items"
          }
        },
        "400": {
          "description": "Invalid Item",
          "schema": {
            "$ref": "#/definitions/errorResponse"
          }
        },
        "401": {
          "description": "Invalid Credentials",
          "schema": {
            "$ref": "#/definitions/errorResponse"
          }
        },
        "500": {
          "description": "This should never happen but happens surprisingly often for some reason...",
          "schema": {
            "$ref": "#/definitions/internalErrorResponse"
          }
        }
      },
      "definitions": {
        "internalErrorResponse": {
          "properties": {
            "message": {
              "type": "string",
              "description": "The message associated with the error"
            },
            "contact": {
              "type": "string",
              "description": "The contact details for the support team who can help with this internal error"
            }
          },
          "additionalProperties": false
        },
        "errorResponse": {
          "properties": {
            "message": {
              "type": "string",
              "description": "The message associated with the error"
            },
            "suggestion": {
              "type": "string",
              "description": "A suggestion workaround or general guidance about how to solve the problem"
            }
          },
          "additionalProperties": false
        },
        "item": {
          "properties": {
            "categories": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/item"
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "apim",
        "version": "2.0.0",
        "title": "APIm Config APIs"
      },
      "schemes": [
        "https"
      ],
      "host": "localhost:2000",
      "x-juhu-proxy-host": "localhost",
      "x-juhu-proxy-port": 3003,
      "consumes": [
        "application/json",
        "application/yaml"
      ],
      "produces": [
        "application/json",
        "application/yaml"
      ],
      "securityDefinitions": {
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        },
        "basicAuthentication": {
          "type": "basic",
          "description": "Security scheme migrated from security policy"
        },
        "oauth": {
          "type": "oauth2",
          "description": "Oauth scheme authentication",
          "flow": "implicit",
          "authorizationUrl": "http://swagger.io/api/oauth/dialog",
          "scopes": []
        }
      },
      "security": [
        {
          "basicAuthentication": []
        },
        {
          "oauth": []
        }
      ],
      "x-bhendi-resources": {
        "draft_api_version": {
          "namespace2": "draft-api-name",
          "alternate-name": "version"
        },
        "user": {
          "alternate-name": "username",
          "transitions": {
            "pending": [
              "active",
              "archived",
              "blocked"
            ],
            "active": [
              "archived",
              "blocked"
            ],
            "archived": [
              "active"
            ],
            "blocked": [
              "active",
              "archived"
            ]
          }
        },
        "member": {
          "transitions": {
            "pending": [
              "active",
              "archived",
              "blocked"
            ],
            "active": [
              "archived",
              "blocked"
            ],
            "archived": [
              "active"
            ],
            "blocked": [
              "active",
              "archived"
            ]
          }
        },
        "subscription": {
          "transitions": {
            "initial_state": [
              "activated"
            ],
            "pending": [
              "activated",
              "rejected"
            ],
            "activated": [
              "suspended"
            ],
            "suspended": [
              "activated"
            ],
            "rejected": null
          }
        }
      },
      "paths": {
        "/admin/settings": {
          "put": {
            "operationId": "admin_setting_insertSingleton",
            "summary": "Update the Admin Settings",
            "description": "Update the Admin Settings",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Setting",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AdminSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/AdminSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "admin_setting_getSingleton",
            "summary": "Get the Admin Settings",
            "description": "Get the Admin Settings",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/AdminSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/mail-server": {
          "put": {
            "operationId": "mail_server_setting_insertSingleton",
            "summary": "Update the Mail Server Setting",
            "description": "Update the Mail Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Server to set",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailServerSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/MailServerSetting"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "mail_server_setting_getSingleton",
            "summary": "Get the Mail Server Setting",
            "description": "Get the Mail Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailServerSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/mail-templates": {
          "post": {
            "operationId": "mail_template_create",
            "summary": "Create a Mail Template",
            "description": "Create a Mail Template",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Template to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "mail_template_list",
            "summary": "List the Mail Templates",
            "description": "the Mail Templates",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplateList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/mail-templates/{mail-template}": {
          "get": {
            "operationId": "mail_template_get",
            "summary": "Get the Mail Template",
            "description": "Get the Mail Template",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "patch": {
            "operationId": "mail_template_update",
            "summary": "Update the Mail Template",
            "description": "Update the Mail Template",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Template to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "delete": {
            "operationId": "mail_template_delete",
            "summary": "Delete the Mail Template",
            "description": "Delete the Mail Template",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults": {
          "get": {
            "operationId": "role_default_listAll",
            "summary": "List the Role Defaults",
            "description": "List the Role Defaults",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefaultList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults/admin": {
          "post": {
            "operationId": "role_default_create",
            "x-bhendi-static-namespace2": "admin",
            "summary": "Create an admin Role Default",
            "description": "Create an admin Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "role_default_list",
            "x-bhendi-static-namespace2": "admin",
            "summary": "List the admin Role Defaults",
            "description": "List the admin Role Defaults",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefaultList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults/admin/{role-default}": {
          "get": {
            "operationId": "role_default_get",
            "x-bhendi-static-namespace2": "admin",
            "summary": "Get the admin Role Default",
            "description": "Get the admin Role Default",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "patch": {
            "operationId": "role_default_update",
            "x-bhendi-static-namespace2": "admin",
            "summary": "Update the admin Role Default",
            "description": "Update the admin Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "delete": {
            "operationId": "role_default_del",
            "x-bhendi-static-namespace2": "admin",
            "summary": "Delete the admin Role Default",
            "description": "Delete the admin Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults/provider": {
          "post": {
            "operationId": "role_default_create",
            "x-bhendi-static-namespace2": "provider",
            "summary": "Create a provider Role Default",
            "description": "Create a provider Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "role_default_list",
            "x-bhendi-static-namespace2": "provider",
            "summary": "List the provider Role Defaults",
            "description": "List the provider Role Defaults",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefaultList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults/provider/{role-default}": {
          "get": {
            "operationId": "role_default_get",
            "x-bhendi-static-namespace2": "provider",
            "summary": "Get the provider Role Default",
            "description": "Get the provider Role Default",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "patch": {
            "operationId": "role_default_update",
            "x-bhendi-static-namespace2": "provider",
            "summary": "Update the provider Role Default",
            "description": "Update the provider Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "delete": {
            "operationId": "role_default_del",
            "x-bhendi-static-namespace2": "provider",
            "summary": "Delete the provider Role Default",
            "description": "Delete the provider Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults/consumer": {
          "post": {
            "operationId": "role_default_create",
            "x-bhendi-static-namespace2": "consumer",
            "summary": "Create a consumer Role Default",
            "description": "Create a consumer Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "role_default_list",
            "x-bhendi-static-namespace2": "consumer",
            "summary": "List the consumer Role Defaults",
            "description": "List the consumer Role Defaults",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefaultList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/role-defaults/consumer/{role-default}": {
          "get": {
            "operationId": "role_default_get",
            "x-bhendi-static-namespace2": "consumer",
            "summary": "Get the consumer Role Default",
            "description": "Get the consumer Role Default",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "patch": {
            "operationId": "role_default_update",
            "x-bhendi-static-namespace2": "consumer",
            "summary": "Update the consumer Role Default",
            "description": "Update the consumer Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "delete": {
            "operationId": "role_default_del",
            "x-bhendi-static-namespace2": "consumer",
            "summary": "Delete the consumer Role Default",
            "description": "Delete the consumer Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/slack-server": {
          "put": {
            "operationId": "slack_server_setting_insertSingleton",
            "summary": "Update the Slack Server Setting",
            "description": "Update the Slack Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Slack Server to set",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SlackServerSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/SlackServerSetting"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "slack_server_setting_getSingleton",
            "summary": "Get the Slack Server Setting",
            "description": "Get the Slack Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SlackServerSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/sms-server": {
          "put": {
            "operationId": "sms_server_setting_insertSingleton",
            "summary": "Update the SMS Server Setting",
            "description": "Update the SMS Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "SMS Server to set",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SmsServerSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/SmsServerSetting"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "sms_server_setting_getSingleton",
            "summary": "Get the SMS Server Setting",
            "description": "Get the SMS Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SmsServerSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/settings/user-registries": {
          "put": {
            "operationId": "user_registry_setting_insertSingleton",
            "summary": "Update the User Registry Setting",
            "description": "Update the User Registry Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "User Registry Setting",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/UserRegistrySetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/UserRegistrySetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          },
          "get": {
            "operationId": "user_registry_setting_getSingleton",
            "summary": "Get the User Registry Setting",
            "description": "Get the User Registry Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/UserRegistrySetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Settings"
            ]
          }
        },
        "/admin/invitations": {
          "post": {
            "operationId": "invitation_create",
            "summary": "Create an Organization Invitation",
            "description": "Create an Organization Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Invitation to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Anything"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          },
          "get": {
            "operationId": "invitation_list",
            "summary": "List the Organization Invitations",
            "description": "List the Organization Invitations",
            "security": [
              {
                "oauth": [
                  "members-view",
                  "members-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/InvitationList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          }
        },
        "/admin/invitations/{invitation}": {
          "get": {
            "operationId": "invitation_get",
            "summary": "Get the Organization Invitation",
            "description": "Get the Organization Invitation",
            "security": [
              {
                "oauth": [
                  "members-view",
                  "members-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          },
          "delete": {
            "operationId": "invitation_del",
            "summary": "Delete the Organization Invitation",
            "description": "Delete the Organization Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          }
        },
        "/admin/invitations/{invitation}/resend": {
          "post": {
            "operationId": "invitation_resend",
            "summary": "Resend the Organization Invitation",
            "description": "Resend the Organization Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          }
        },
        "/admin/invitations/{invitation}/register": {
          "post": {
            "operationId": "invitation_register",
            "summary": "Register using the Organization Invitation",
            "description": "Register using the Organization Invitation",
            "parameters": [
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Invitation to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/InvitationRegistration"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Org"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          }
        },
        "/admin/invitations/{invitation}/accept": {
          "post": {
            "operationId": "invitation_accept",
            "summary": "Accept the Organization Invitation",
            "description": "Accept the Organization Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Invitation to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/InvitationAccept"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Org"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          }
        },
        "/admin/invitations/{invitation}/decline": {
          "post": {
            "operationId": "invitation_decline",
            "summary": "Decline the Organization Invitation",
            "description": "Decline the Organization Invitation",
            "parameters": [
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organization Invitations"
            ]
          }
        },
        "/admin/orgs": {
          "post": {
            "operationId": "org_create",
            "summary": "Create an Organization",
            "description": "Create an Organization",
            "security": [
              {
                "oauth": [
                  "orgs-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Organization to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Org"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Org"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organizations"
            ]
          },
          "get": {
            "operationId": "org_list",
            "summary": "List the Organizations",
            "description": "List the Organizations",
            "security": [
              {
                "oauth": [
                  "orgs-view",
                  "orgs-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/OrgList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Organizations"
            ]
          }
        },
        "/admin/subscriptions": {
          "post": {
            "operationId": "subscription_create",
            "summary": "Create a Subscription",
            "description": "Create a Subscription",
            "security": [
              {
                "oauth": [
                  "orgs_view",
                  "orgs_manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Subscription to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Subscription"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Subscription"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Subscriptions"
            ]
          },
          "get": {
            "operationId": "subscription_list",
            "summary": "List the Subscriptions",
            "description": "List the Subscriptions",
            "security": [
              {
                "oauth": [
                  "orgs_view",
                  "orgs_manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SubscriptionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Subscriptions"
            ]
          }
        },
        "/admin/subscriptions/{subscription}": {
          "get": {
            "operationId": "subscription_get",
            "summary": "Get the Subscription",
            "description": "Get the Subscription",
            "security": [
              {
                "oauth": [
                  "orgs_view",
                  "orgs_manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "subscription",
                "in": "path",
                "description": "Subscription name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Subscription"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Subscriptions"
            ]
          },
          "patch": {
            "operationId": "subscription_update",
            "summary": "Update the Subscription",
            "description": "Update the Subscription",
            "security": [
              {
                "oauth": [
                  "orgs_view",
                  "orgs_manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "subscription",
                "in": "path",
                "description": "Subscription name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Subscription to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Subscription"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Subscription"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Subscriptions"
            ]
          },
          "delete": {
            "operationId": "subscription_delete",
            "summary": "Delete the Subscription",
            "description": "Delete the Subscription",
            "security": [
              {
                "oauth": [
                  "orgs_view",
                  "orgs_manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "subscription",
                "in": "path",
                "description": "Subscription name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Subscription"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Subscriptions"
            ]
          }
        },
        "/inspect": {
          "get": {
            "operationId": "inspect_list",
            "summary": "Inspect the database",
            "parameters": [
              {
                "name": "keyspace",
                "in": "query",
                "description": "Keyspace",
                "required": false,
                "type": "string"
              },
              {
                "name": "table",
                "in": "query",
                "description": "Organization name or id",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successfully added",
                "schema": {
                  "$ref": "#/definitions/Anything"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Admin: Inspect"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/apis": {
          "get": {
            "operationId": "api_list",
            "summary": "List the APIs",
            "description": "List the APIs",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/ApiList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "APIs (Catalog)"
            ]
          }
        },
        "/apis/{org}/{catalog}/{api}": {
          "get": {
            "operationId": "api_list",
            "summary": "List the API Versions",
            "description": "List the API Versions",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/ApiList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "APIs (Catalog)"
            ]
          }
        },
        "/apis/{org}/{catalog}/{api}/{version}": {
          "get": {
            "operationId": "api_get",
            "summary": "Get the API Version",
            "description": "Get the API Version",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "api",
                "in": "path",
                "description": "API name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "API version",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Api"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "APIs (Catalog)"
            ]
          },
          "patch": {
            "operationId": "api_update",
            "summary": "Update the API Version",
            "description": "Update the API Version",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "api",
                "in": "path",
                "description": "API name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "API version",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "API to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Api"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Api"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "APIs (Catalog)"
            ]
          }
        },
        "/apis/{org}/{catalog}/{api}/{version}/products": {
          "get": {
            "operationId": "api_listProducts",
            "summary": "Get the Products referencing the API",
            "description": "Get the Products referencing the API",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "API version",
                "required": true,
                "type": "string"
              },
              {
                "name": "api",
                "in": "path",
                "description": "API name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/ProductList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "APIs (Catalog)"
            ]
          }
        },
        "/orgs/{org}/catalogs": {
          "post": {
            "x-bhendi-url-path-base": "/catalogs/{org}",
            "operationId": "catalog_create",
            "summary": "Create a Catalog",
            "description": "Create a Catalog",
            "security": [
              {
                "oauth": [
                  "catalogs-create"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Catalog to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Catalog"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Catalog"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalogs"
            ]
          },
          "get": {
            "operationId": "catalog_list",
            "summary": "List the Catalogs",
            "description": "List the Catalogs",
            "security": [
              {
                "oauth": [
                  "catalogs-manage",
                  "catalogsview",
                  "analytics-manage",
                  "analytics-view",
                  "app-approvals-manage",
                  "app-approvals-view",
                  "apps-manage",
                  "apps-view",
                  "members-manage",
                  "members-view",
                  "orgs-manage",
                  "orgs-view",
                  "product-approvals-deprecate",
                  "product-approvals-publish",
                  "product-approvals-replace",
                  "product-approvals-retire",
                  "product-approvals-stage",
                  "product-approvals-supersede",
                  "product-approvals-view",
                  "products-manage",
                  "products-stage",
                  "products-view",
                  "settings-manage",
                  "settings-view",
                  "subscription-approvals-manage",
                  "subscription-approvals-view",
                  "subscriptions-manage",
                  "subscriptions-view",
                  "spaces-create",
                  "spaces-manage",
                  "spaces-view"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/CatalogList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalogs"
            ]
          }
        },
        "/catalogs/{org}/{catalog}": {
          "get": {
            "operationId": "catalog_get",
            "summary": "Get the Catalog",
            "description": "Get the Catalog",
            "security": [
              {
                "oauth": [
                  "catalogs-manage",
                  "catalogs-view",
                  "analytics-manage",
                  "analytics-view",
                  "app-approvals-manage",
                  "app-approvals-view",
                  "apps-manage",
                  "apps-view",
                  "members-manage",
                  "members-view",
                  "orgs-manage",
                  "orgs-view",
                  "product-approvals-deprecate",
                  "product-approvals-publish",
                  "product-approvals-replace",
                  "product-approvals-retire",
                  "product-approvals-stage",
                  "product-approvals-supersede",
                  "product-approvals-view",
                  "products-manage",
                  "products-stage",
                  "products-view",
                  "settings-manage",
                  "settings-view",
                  "subscription-approvals-manage",
                  "subscription-approvals-view",
                  "subscriptions-manage",
                  "subscriptions-view",
                  "spaces-create",
                  "spaces-manage",
                  "spaces-view"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Catalog"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalogs"
            ]
          },
          "patch": {
            "operationId": "catalog_update",
            "summary": "Update the Catalog",
            "description": "Update the Catalog",
            "security": [
              {
                "oauth": [
                  "catalogs-manage",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Catalog to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Catalog"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Catalog"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalogs"
            ]
          },
          "delete": {
            "operationId": "catalog_del",
            "summary": "Delete the Catalog",
            "description": "Delete the Catalog",
            "security": [
              {
                "oauth": [
                  "catalogs-manage",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Catalog"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalogs"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/settings": {
          "put": {
            "operationId": "catalog_setting_insertSingleton",
            "summary": "Update the Catalog Settings",
            "description": "Update the Catalog Settings",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Setting",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/CatalogSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/CatalogSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "get": {
            "operationId": "catalog_setting_getSingleton",
            "summary": "Get the Catalog Settings",
            "description": "Get the Catalog Settings",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/CatalogSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/settings/mail-templates": {
          "post": {
            "operationId": "mail_template_create",
            "summary": "Create a Mail Template",
            "description": "Create a Mail Template",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Template to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "get": {
            "operationId": "mail_template_list",
            "summary": "List the Mail Templates",
            "description": "List the Mail Templates",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplateList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/settings/mail-templates/{mail-template}": {
          "get": {
            "operationId": "mail_template_get",
            "summary": "Get the Mail Template",
            "description": "Get the Mail Template",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "patch": {
            "operationId": "mail_template_update",
            "summary": "Update the Mail Template",
            "description": "Update the Mail Template",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Template to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "delete": {
            "operationId": "mail_template_delete",
            "summary": "Delete the Mail Template",
            "description": "Delete the Mail Template",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/settings/role-defaults": {
          "post": {
            "operationId": "role_default_create",
            "summary": "Create a Role Default",
            "description": "Create a Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "get": {
            "operationId": "role_default_list",
            "summary": "List the Role Defaults",
            "description": "List the Role Defaults",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefaultList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/settings/role-defaults/{role-default}": {
          "get": {
            "operationId": "role_default_get",
            "summary": "Get the Role Default",
            "description": "Get the Role Default",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "patch": {
            "operationId": "role_default_update",
            "summary": "Update the Role Default",
            "description": "Update the Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role Default to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          },
          "delete": {
            "operationId": "role_default_del",
            "summary": "Delete the Role Default",
            "description": "Delete the Role Default",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "role-default",
                "in": "path",
                "description": "Role Default name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/RoleDefault"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Catalog Settings"
            ]
          }
        },
        "/drafts/{org}": {
          "get": {
            "operationId": "draft_list",
            "summary": "List the Draft APIs and Draft Products",
            "description": "List the Draft APIs and Draft Products",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Anything"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "delete": {
            "operationId": "draft_clear",
            "summary": "Clear the Draft APIs and Draft Products",
            "description": "Clear the Draft APIs and Draft Products",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "confirm",
                "in": "query",
                "description": "Must be set to the value 'draft'",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "Successful delete"
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/drafts/{org}/draft-apis/push": {
          "post": {
            "operationId": "draft_api_version_push",
            "summary": "Push a Draft API",
            "description": "Push a Draft API",
            "consumes": [
              "multipart/form-data"
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "metadata",
                "in": "formData",
                "description": "API metadata",
                "required": true,
                "type": "file",
                "minItems": 1,
                "maxItems": 1
              },
              {
                "name": "assembly",
                "in": "formData",
                "description": "Assembly for API",
                "required": false,
                "type": "file",
                "minItems": 1,
                "maxItems": 100
              },
              {
                "name": "swagger",
                "in": "formData",
                "description": "Swagger for API",
                "required": false,
                "type": "file",
                "minItems": 1,
                "maxItems": 1
              },
              {
                "name": "wsdl",
                "in": "formData",
                "description": "WDSL for API",
                "required": false,
                "type": "file",
                "minItems": 1,
                "maxItems": 1
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/drafts/{org}/draft-apis": {
          "post": {
            "x-bhendi-url-path-base": "/draft-apis/{org}",
            "operationId": "draft_api_version_create",
            "summary": "Create a Draft API",
            "description": "Create a Draft API",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Draft API to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "get": {
            "operationId": "draft_api_version_list",
            "summary": "List the Draft APIs",
            "description": "List the Draft APIs",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tag",
                "in": "query",
                "description": "The tag name",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftApiList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "delete": {
            "operationId": "draft_api_version_clear",
            "summary": "Clear the Draft APIs",
            "description": "Clear the Draft APIs",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "confirm",
                "in": "query",
                "description": "Must be set to the value 'draft'",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "Successful delete"
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/draft-apis/{org}/{draft-api-name}": {
          "get": {
            "operationId": "draft_api_version_list",
            "summary": "List of Draft APIs with name",
            "description": "List of Draft APIs with name",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-name",
                "in": "path",
                "description": "Draft API name",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftApiList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/draft-apis/{org}/{draft-api-name}/{draft-api-version}": {
          "get": {
            "operationId": "draft_api_version_get",
            "summary": "Get the Draft API",
            "description": "Get the Draft API",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-name",
                "in": "path",
                "description": "Draft API name",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-version",
                "in": "path",
                "description": "Draft API version",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "patch": {
            "operationId": "draft_api_version_update",
            "summary": "Update the Draft API",
            "description": "Update the Draft API",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-name",
                "in": "path",
                "description": "Draft API name",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-version",
                "in": "path",
                "description": "Draft API version",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "draft api to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "delete": {
            "operationId": "draft_api_version_del",
            "summary": "Delete the Draft API",
            "description": "Delete the Draft API",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-name",
                "in": "path",
                "description": "Draft API name",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-version",
                "in": "path",
                "description": "Draft API version",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/DraftApi"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/draft-apis/{org}/{draft-api-name}/{draft-api-version}/products": {
          "get": {
            "operationId": "draft_api_version_listProducts",
            "summary": "Get the Draft Products referencing the Draft API",
            "description": "Get the Draft Products referencing the Draft API",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-name",
                "in": "path",
                "description": "Draft API name",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-api-version",
                "in": "path",
                "description": "Draft API version",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftProductList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/draft-products/{org}/draft-products": {
          "post": {
            "operationId": "draft_product_push",
            "summary": "Push a Draft Product",
            "description": "Push a Draft Product",
            "consumes": [
              "multipart/form-data"
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "metadata",
                "in": "formData",
                "description": "Product metadata",
                "required": true,
                "type": "file",
                "minItems": 1,
                "maxItems": 1
              },
              {
                "name": "product",
                "in": "formData",
                "description": "Product definition",
                "required": false,
                "type": "file",
                "minItems": 1,
                "maxItems": 1
              },
              {
                "name": "apis",
                "in": "formData",
                "description": "API definitions",
                "required": false,
                "type": "file",
                "minItems": 1,
                "maxItems": 100
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/drafts/{org}/draft-products": {
          "post": {
            "x-bhendi-url-path-base": "/draft-products/{org}",
            "operationId": "draft_product_create",
            "summary": "Create a Draft Product",
            "description": "Create a Draft Product",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "draft product to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "get": {
            "operationId": "draft_product_list",
            "summary": "List the Draft Products",
            "description": "List the Draft Products",
            "consumes": [],
            "parameters": [
              {
                "name": "tag",
                "in": "query",
                "description": "The tag name",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftProductList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "delete": {
            "operationId": "draft_product_clear",
            "summary": "Clear the Draft Products",
            "description": "Clear the Draft Products",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "confirm",
                "in": "query",
                "description": "Must be set to the value 'draft'",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "Successful delete"
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/draft-products/{org}/{draft-product}": {
          "get": {
            "operationId": "draft_product_get",
            "summary": "Get the Draft Product",
            "description": "Get the Draft Product",
            "consumes": [],
            "parameters": [
              {
                "name": "draft-product",
                "in": "path",
                "description": "Draft Product name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "patch": {
            "operationId": "draft_product_update",
            "summary": "Update the Draft Product",
            "description": "Update the Draft Product",
            "parameters": [
              {
                "name": "draft-product",
                "in": "path",
                "description": "Draft Product name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "draft product to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          },
          "delete": {
            "operationId": "draft_product_del",
            "summary": "Delete the Draft Product",
            "description": "Delete the Draft Product",
            "consumes": [],
            "parameters": [
              {
                "name": "draft-product",
                "in": "path",
                "description": "Draft Product name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/DraftProduct"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/draft-products/{org}/{draft-product}/apis": {
          "get": {
            "operationId": "draft_product_listApis",
            "summary": "Get the Draft APIs referenced by the Draft Product",
            "description": "Get the Draft APIs referenced by the Draft Product",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "draft-product",
                "in": "path",
                "description": "Draft Product name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/DraftApiList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Drafts"
            ]
          }
        },
        "/orgs/{org}/gateways": {
          "post": {
            "x-bhendi-url-path-base": "/gateways/{org}",
            "operationId": "gateway_create",
            "summary": "Create a Gateway",
            "description": "Create a Gateway",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Gateway to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Gateway"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Gateways"
            ]
          },
          "get": {
            "operationId": "gateway_list",
            "summary": "List the Gateways",
            "description": "List the Gateways",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/GatewayList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Gateways"
            ]
          }
        },
        "/gateways/{org}/{gateway}": {
          "get": {
            "operationId": "gateway_get",
            "summary": "Get the Gateway",
            "description": "Get the Gateway",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "gateway",
                "in": "path",
                "description": "Gateway name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Gateway"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Gateways"
            ]
          },
          "patch": {
            "operationId": "gateway_update",
            "summary": "Update the Gateway",
            "description": "Update the Gateway",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "gateway",
                "in": "path",
                "description": "Gateway name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Gateway to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Gateway"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Gateways"
            ]
          },
          "delete": {
            "operationId": "gateway_del",
            "summary": "Delete the Gateway",
            "description": "Delete the Gateway",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "gateway",
                "in": "path",
                "description": "Gateway name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Gateway"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Gateways"
            ]
          }
        },
        "/gateways/{org}/{gateway}/catalogs": {
          "get": {
            "operationId": "gateway_listCatalogs",
            "summary": "Get the Catalogs that use the Gateway",
            "description": "Get the Catalogs that use the Gateway",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "gateway",
                "in": "path",
                "description": "Gateway name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/CatalogList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Gateways"
            ]
          }
        },
        "/orgs/{org}/mail-servers": {
          "post": {
            "x-bhendi-url-path-base": "/mail-servers/{org}",
            "operationId": "mail_server_create",
            "summary": "Create a Mail Server",
            "description": "Create a Mail Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Server to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailServer"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/MailServer"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Mail Servers"
            ]
          },
          "get": {
            "operationId": "mail_server_list",
            "summary": "List the Mail Servers",
            "description": "List the Mail Servers",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailServerList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Mail Servers"
            ]
          }
        },
        "/mail-servers/{org}/{mail-server}": {
          "get": {
            "operationId": "mail_server_get",
            "summary": "Get the Mail Server",
            "description": "Get the Mail Server",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-server",
                "in": "path",
                "description": "Mail Server name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Mail Servers"
            ]
          },
          "patch": {
            "operationId": "mail_server_update",
            "summary": "Update the Mail Server",
            "description": "Update the Mail Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-server",
                "in": "path",
                "description": "Mail Server name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Server to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailServer"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Mail Servers"
            ]
          },
          "delete": {
            "operationId": "mail_server_del",
            "summary": "Delete the Mail Server",
            "description": "Delete the Mail Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-server",
                "in": "path",
                "description": "Mail Server name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/MailServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Mail Servers"
            ]
          }
        },
        "/orgs": {
          "post": {
            "operationId": "org_selfCreate",
            "summary": "Create an Organization",
            "description": "Create an Organization",
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "Organization to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/OrgSelfCreate"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Org"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organizations"
            ]
          },
          "get": {
            "operationId": "org_listMyOrgs",
            "summary": "List the Organizations",
            "description": "List the Organizations",
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/OrgList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organizations"
            ]
          }
        },
        "/orgs/{org}": {
          "get": {
            "operationId": "org_get",
            "summary": "Get the Organization",
            "description": "Get the Organization",
            "security": [
              {
                "oauth": [
                  "orgs-view",
                  "orgs-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Org"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organizations"
            ]
          },
          "patch": {
            "operationId": "org_update",
            "summary": "Update the Organization",
            "description": "Update the Organization",
            "security": [
              {
                "oauth": [
                  "orgs-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Provider org to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Org"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Org"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organizations"
            ]
          },
          "delete": {
            "operationId": "org_delete",
            "summary": "Delete the Organization",
            "description": "Delete the Organization",
            "security": [
              {
                "oauth": [
                  "orgs-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Org"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organizations"
            ]
          }
        },
        "/orgs/{org}/settings": {
          "put": {
            "operationId": "org_setting_insertSingleton",
            "summary": "Update the Organization Settings",
            "description": "Update the Organization Settings",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Setting",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/OrgSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/OrgSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "get": {
            "operationId": "org_setting_getSingleton",
            "summary": "Get the Organization Settings",
            "description": "Get the Organization Settings",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/OrgSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          }
        },
        "/orgs/{org}/settings/mail-server": {
          "put": {
            "operationId": "mail_server_setting_insertSingleton",
            "summary": "Update the Mail Server Setting",
            "description": "Update the Mail Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Server to set",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailServer"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/MailServerSetting"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "get": {
            "operationId": "mail_server_setting_getSingleton",
            "summary": "Get the Mail Server Setting",
            "description": "Get the Mail Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailServerSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          }
        },
        "/orgs/{org}/settings/sms-server": {
          "put": {
            "operationId": "sms_server_setting_insertSingleton",
            "summary": "Set the SMS Server Setting",
            "description": "Set the SMS Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "SMS Server to set at org level",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SmsServerSetting"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/SmsServerSetting"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "get": {
            "operationId": "sms_server_setting_getSingleton",
            "summary": "Get the SMS Server Setting",
            "description": "Get the SMS Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SmsServerSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          }
        },
        "/orgs/{org}/settings/mail-templates": {
          "post": {
            "operationId": "mail_template_create",
            "summary": "Create a Mail Template",
            "description": "Create a Mail Template",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Template to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "get": {
            "operationId": "mail_template_list",
            "summary": "List the Mail Templates",
            "description": "List the Mail Templates",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplateList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          }
        },
        "/orgs/{org}/settings/mail-templates/{mail-template}": {
          "get": {
            "operationId": "mail_template_get",
            "summary": "Get the Mail Template",
            "description": "Get the Mail Template",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "patch": {
            "operationId": "mail_template_update",
            "summary": "Update the Mail Template",
            "description": "Update the Mail Template",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Mail Template to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "delete": {
            "operationId": "mail_template_delete",
            "summary": "Delete the Mail Template",
            "description": "Delete the Mail Template",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "mail-template",
                "in": "path",
                "description": "Mail template name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/MailTemplate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          }
        },
        "/orgs/{org}/settings/slack-server": {
          "put": {
            "operationId": "slack_server_setting_insertSingleton",
            "summary": "Update the Slack Server Setting",
            "description": "Update the Slack Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Slack Server to set",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SlackServerSetting"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/SlackServerSetting"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          },
          "get": {
            "operationId": "slack_server_setting_getSingleton",
            "summary": "Get the Slack Server Setting",
            "description": "Get the Slack Server Setting",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SlackServerSetting"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Settings"
            ]
          }
        },
        "/orgs/{org}/invitations": {
          "post": {
            "operationId": "invitation_create",
            "summary": "Create a Member Invitation",
            "description": "Create a Member  Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Invitation to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Invitation"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          },
          "get": {
            "operationId": "invitation_list",
            "summary": "List the Member Invitations",
            "description": "List the Member Invitations",
            "security": [
              {
                "oauth": [
                  "members-manage",
                  "members-view"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/InvitationList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          }
        },
        "/orgs/{org}/invitations/{invitation}": {
          "get": {
            "operationId": "invitation_get",
            "summary": "Get the Member Invitation",
            "description": "Get the Member Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage",
                  "members-view"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          },
          "delete": {
            "operationId": "invitation_del",
            "summary": "Delete the Member Invitation",
            "description": "Delete the Member Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          }
        },
        "/orgs/{org}/invitations/{invitation}/resend": {
          "post": {
            "operationId": "invitation_resend",
            "summary": "Resend a Member Invitation",
            "description": "Resend a Member  Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          }
        },
        "/orgs/{org}/invitations/{invitation}/register": {
          "post": {
            "operationId": "invitation_register",
            "summary": "Register using a Member Invitation",
            "description": "Register using a Member Invitation",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Member invitation user registration",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/InvitationRegistration"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Member"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          }
        },
        "/orgs/{org}/invitations/{invitation}/accept": {
          "post": {
            "operationId": "invitation_accept",
            "summary": "Accept the Member Invitation",
            "description": "Accept the Member  Invitation",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Invitation to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/InvitationAccept"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Member"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          }
        },
        "/orgs/{org}/invitations/{invitation}/decline": {
          "post": {
            "operationId": "invitation_decline",
            "summary": "Decline a Member Invitation",
            "description": "Decline a Member  Invitation",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "invitation",
                "in": "path",
                "description": "Invitation name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Invitation"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Member Invitations"
            ]
          }
        },
        "/orgs/{org}/join": {
          "post": {
            "operationId": "member_join",
            "summary": "Join an Organization",
            "description": "Join an Organization",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Member to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MemberSelfJoin"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Member"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Members"
            ]
          }
        },
        "/orgs/{org}/members": {
          "post": {
            "operationId": "member_create",
            "summary": "Create a Member",
            "description": "Create a Member",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Member to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Member"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Member"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Members"
            ]
          },
          "get": {
            "operationId": "member_list",
            "summary": "List the Members",
            "description": "List the Members",
            "security": [
              {
                "oauth": [
                  "members-view",
                  "memeber-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/MemberList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Members"
            ]
          }
        },
        "/orgs/{org}/members/{member}": {
          "get": {
            "operationId": "member_get",
            "summary": "Get the Member",
            "description": "Get the Member",
            "security": [
              {
                "oauth": [
                  "members-view",
                  "members-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "member",
                "in": "path",
                "description": "Member name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Member"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Members"
            ]
          },
          "patch": {
            "operationId": "member_update",
            "summary": "Update the Member",
            "description": "Update the Member",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "member",
                "in": "path",
                "description": "Member name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Member to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Member"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Member"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Members"
            ]
          },
          "delete": {
            "operationId": "member_del",
            "summary": "Delete the Member",
            "description": "Delete the Member",
            "security": [
              {
                "oauth": [
                  "members-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "member",
                "in": "path",
                "description": "Member name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Member"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Organization Members"
            ]
          }
        },
        "/permissions": {
          "get": {
            "operationId": "permission_list",
            "summary": "List the Permissions",
            "description": "List the Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/admin": {
          "get": {
            "x-bhendi-static-namespace2": "admin",
            "operationId": "permission_list",
            "summary": "List the Admin Permissions",
            "description": "List the Admin Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/org": {
          "get": {
            "x-bhendi-static-namespace2": "org",
            "operationId": "permission_list",
            "summary": "List the Organization Permissions",
            "description": "List the Organization Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/provider": {
          "get": {
            "x-bhendi-static-namespace2": "provider",
            "operationId": "permission_list",
            "summary": "List the Provider Permissions",
            "description": "List the Provider Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/catalog": {
          "get": {
            "x-bhendi-static-namespace2": "catalog",
            "operationId": "permission_list",
            "summary": "List the Catalog Permissions",
            "description": "List the Catalog Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/space": {
          "get": {
            "x-bhendi-static-namespace2": "space",
            "operationId": "permission_list",
            "summary": "List the Space Permissions",
            "description": "List the Space Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/consumer": {
          "get": {
            "x-bhendi-static-namespace2": "consumer",
            "operationId": "permission_list",
            "summary": "List the Consumer Permissions",
            "description": "List the Consumer Permissions",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/PermissionList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/admin/{permission}": {
          "get": {
            "x-bhendi-static-namespace2": "admin",
            "operationId": "permission_get",
            "summary": "Get the Admin Permission",
            "description": "Get the Admin Permission",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "permission",
                "in": "path",
                "description": "Permission name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Permission"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/org/{permission}": {
          "get": {
            "x-bhendi-static-namespace2": "org",
            "operationId": "permission_get",
            "summary": "Get the Organization Permission",
            "description": "Get the Organization Permission",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "permission",
                "in": "path",
                "description": "Permission name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Permission"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/provider/{permission}": {
          "get": {
            "x-bhendi-static-namespace2": "provider",
            "operationId": "permission_get",
            "summary": "Get the Provider Permission",
            "description": "Get the Provider Permission",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "permission",
                "in": "path",
                "description": "Permission name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Permission"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/catalog/{permission}": {
          "get": {
            "x-bhendi-static-namespace2": "catalog",
            "operationId": "permission_get",
            "summary": "Get the Catalog Permission",
            "description": "Get the Catalog Permission",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "permission",
                "in": "path",
                "description": "Permission name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Permission"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/space/{permission}": {
          "get": {
            "x-bhendi-static-namespace2": "space",
            "operationId": "permission_get",
            "summary": "Get the Space Permission",
            "description": "Get the Space Permission",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "permission",
                "in": "path",
                "description": "Permission name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Permission"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/permissions/consumer/{permission}": {
          "get": {
            "x-bhendi-static-namespace2": "consumer",
            "operationId": "permission_get",
            "summary": "Get the Consumer Permission",
            "description": "Get the Consumer Permission",
            "security": [
              {
                "oauth": []
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "permission",
                "in": "path",
                "description": "Permission name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Permission"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Permissions"
            ]
          }
        },
        "/catalogs/{org}/{catalog}/products": {
          "post": {
            "x-bhendi-url-path-base": "/products/{org}/{catalog}",
            "x-bhendi-secondary-index": "version",
            "operationId": "product_secondaryCreate",
            "summary": "Publish a Product",
            "description": "Publish a Product",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Product to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Product"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Product"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          },
          "get": {
            "operationId": "product_list",
            "summary": "List the Products",
            "description": "List the Products",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/ProductList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          },
          "delete": {
            "operationId": "product_clear",
            "summary": "Clear the Products",
            "description": "Clear the Products",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "confirm",
                "in": "query",
                "description": "The catalog name containg the products to be cleared",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "Successful delete"
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          }
        },
        "/products/{org}/{catalog}/{product}": {
          "get": {
            "x-bhendi-secondary-namespace": "name",
            "operationId": "product_list",
            "summary": "List the Product Versions",
            "description": "List the Product Versions",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/ProductList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          }
        },
        "/products/{org}/{catalog}/{product}/{version}": {
          "get": {
            "operationId": "product_get",
            "summary": "Get the Product Version",
            "description": "Get the Product Version",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "Product version",
                "required": true,
                "type": "string"
              },
              {
                "name": "product",
                "in": "path",
                "description": "Product name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Product"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          },
          "patch": {
            "operationId": "product_update",
            "summary": "Update the Product Version",
            "description": "Update the Product Version",
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "Product version",
                "required": true,
                "type": "string"
              },
              {
                "name": "product",
                "in": "path",
                "description": "Product name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Product to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Product"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Product"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          },
          "delete": {
            "operationId": "product_del",
            "summary": "Delete the Product Version",
            "description": "Delete the Product Version",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "Product version",
                "required": true,
                "type": "string"
              },
              {
                "name": "product",
                "in": "path",
                "description": "Product name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Product"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          }
        },
        "/products/{org}/{catalog}/{product}/{version}/apis": {
          "get": {
            "operationId": "product_listApis",
            "summary": "Get the APIs referenced by the Product",
            "description": "Get the APIs referenced by the Product",
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "catalog",
                "in": "path",
                "description": "Catalog name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "version",
                "in": "path",
                "description": "Product version",
                "required": true,
                "type": "string"
              },
              {
                "name": "product",
                "in": "path",
                "description": "Product name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/ApiList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Products (Catalog)"
            ]
          }
        },
        "/orgs/{org}/roles": {
          "post": {
            "operationId": "role_create",
            "summary": "Create a Role",
            "description": "Create a Role",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Role"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/Role"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Roles"
            ]
          },
          "get": {
            "operationId": "role_list",
            "summary": "List the Roles",
            "description": "List the Roles",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/RoleList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Roles"
            ]
          }
        },
        "/orgs/{org}/roles/{role}": {
          "get": {
            "operationId": "role_get",
            "summary": "Get the Role",
            "description": "Get the Role",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "role",
                "in": "path",
                "description": "Role name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Role"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Roles"
            ]
          },
          "patch": {
            "operationId": "role_update",
            "summary": "Update the Role",
            "description": "Update the Role",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "role",
                "in": "path",
                "description": "Role name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Role to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Role"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Role"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Roles"
            ]
          },
          "delete": {
            "operationId": "role_del",
            "summary": "Delete the Role",
            "description": "Delete the Role",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "role",
                "in": "path",
                "description": "Role name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Role"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Roles"
            ]
          }
        },
        "/orgs/{org}/slack-servers": {
          "post": {
            "x-bhendi-url-path-base": "/slack-servers/{org}",
            "operationId": "slack_server_create",
            "summary": "Create a Slack Server",
            "description": "Create a Slack Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Slack Server to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SlackServer"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/SlackServer"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Slack Servers"
            ]
          },
          "get": {
            "operationId": "slack_server_list",
            "summary": "List the Slack Servers",
            "description": "List the Slack Servers",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SlackServerList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Slack Servers"
            ]
          }
        },
        "/slack-servers/{org}/{slack-server}": {
          "get": {
            "operationId": "slack_server_get",
            "summary": "Get the Slack Server",
            "description": "Get the Slack Server",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "slack-server",
                "in": "path",
                "description": "Slack Server name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SlackServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Slack Servers"
            ]
          },
          "patch": {
            "operationId": "slack_server_update",
            "summary": "Update the Slack Server",
            "description": "Update the Slack Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "slack-server",
                "in": "path",
                "description": "Slack Server name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Slack Server to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SlackServer"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SlackServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Slack Servers"
            ]
          },
          "delete": {
            "operationId": "slack_server_del",
            "summary": "Delete the Slack Server",
            "description": "Delete the Slack Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "slack-server",
                "in": "path",
                "description": "Slack Server name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/SlackServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Slack Servers"
            ]
          }
        },
        "/orgs/{org}/sms-servers": {
          "post": {
            "x-bhendi-url-path-base": "/sms-servers/{org}",
            "operationId": "sms_server_create",
            "summary": "Create a Sms Server",
            "description": "Create a Sms Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "SMS Server to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SmsServer"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/SmsServer"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "SMS Servers"
            ]
          },
          "get": {
            "operationId": "sms_server_list",
            "summary": "List the SMS Servers",
            "description": "List the SMS Servers",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SmsServerList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "SMS Servers"
            ]
          }
        },
        "/sms-servers/{org}/{sms-server}": {
          "get": {
            "operationId": "sms_server_get",
            "summary": "Get the SMS Server",
            "description": "Get the SMS Server",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "sms-server",
                "in": "path",
                "description": "SMS Server name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SmsServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "SMS Servers"
            ]
          },
          "patch": {
            "operationId": "sms_server_update",
            "summary": "Update the SMS Server",
            "description": "Update the SMS Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "sms-server",
                "in": "path",
                "description": "SMS Server name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "SMS Server to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/SmsServer"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/SmsServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "SMS Servers"
            ]
          },
          "delete": {
            "operationId": "sms_server_del",
            "summary": "Delete the SMS Server",
            "description": "Delete the SMS Server",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "sms-server",
                "in": "path",
                "description": "SMS Server name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/SmsServer"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "SMS Servers"
            ]
          }
        },
        "/orgs/{org}/tls-profiles": {
          "post": {
            "x-bhendi-url-path-base": "/tls-profiles/{org}",
            "operationId": "tls_profile_create",
            "summary": "Create a TLS Profile",
            "description": "Create a TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "TLS Profile to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          },
          "get": {
            "operationId": "tls_profile_list",
            "summary": "List TLS Profiles",
            "description": "List TLS Profiles",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/TLSProfileList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/tls-profiles/{org}/{tls-profile}": {
          "get": {
            "operationId": "tls_profile_get",
            "summary": "Get the TLS Profile",
            "description": "Get the TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          },
          "patch": {
            "operationId": "tls_profile_update",
            "summary": "Update the TLS Profile",
            "description": "Update the TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "TLS Profile to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          },
          "delete": {
            "operationId": "tls_profile_del",
            "summary": "Delete the TLS Profile",
            "description": "Delete the TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/tls-profiles/{org}/{tls-profile}/keystore": {
          "post": {
            "operationId": "tls_profile_keystoreAdd",
            "summary": "Add p12 to keystore in TLS Profile",
            "description": "Add p12 ro keystore in TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "The p12 file to add",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/P12File"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successfully added",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/tls-profiles/{org}/{tls-profile}/keystore/certificate": {
          "post": {
            "operationId": "tls_profile_keystoreCertificateAdd",
            "summary": "Add pem to keystore in TLS Profile",
            "description": "Add pem to keystore in TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "The pem file to add",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/CertificateFile"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful added",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/tls-profiles/{org}/{tls-profile}/keystore/key": {
          "post": {
            "operationId": "tls_profile_keystoreKeyAdd",
            "summary": "Add private key to keystore in TLS Profile",
            "description": "Add private key to keystore in TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "Private key to add",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/CertificateFile"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/tls-profiles/{org}/{tls-profile}/truststore": {
          "post": {
            "operationId": "tls_profile_truststoreCertificateAdd",
            "summary": "Add pem to truststore in TLS Profile",
            "description": "Add pem to truststore in TLS Profile",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "The pem file to add",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/CertificateFile"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successfully added",
                "schema": {
                  "$ref": "#/definitions/TLSProfile"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/certificates/{org}/{tls-profile}/{certificate}": {
          "get": {
            "operationId": "certificate_get",
            "summary": "Get the Certificate",
            "description": "Get the Certificate",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "certificate",
                "in": "path",
                "description": "Certificate name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Certificate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          },
          "delete": {
            "operationId": "certificate_del",
            "summary": "Delete the Certificate",
            "description": "Delete the Certificate",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "tls-profile",
                "in": "path",
                "description": "TLS Profile name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "certificate",
                "in": "path",
                "description": "Certificate name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/Certificate"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "TLS Profiles and Certificates"
            ]
          }
        },
        "/orgs/{org}/user-registries": {
          "post": {
            "x-bhendi-url-path-base": "/user-registries/{org}",
            "operationId": "user_registry_create",
            "summary": "Create a User Registry",
            "description": "Create a User Registry",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "User Registry to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/UserRegistry"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/UserRegistry"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "User Registries"
            ]
          },
          "get": {
            "operationId": "user_registry_list",
            "summary": "List User Registrys",
            "description": "List User Registrys",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/UserRegistryList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "User Registries"
            ]
          }
        },
        "/user-registries/{org}/{user-registry}": {
          "get": {
            "operationId": "user_registry_get",
            "summary": "Get the User Registry",
            "description": "Get the User Registry",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/UserRegistry"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "User Registries"
            ]
          },
          "patch": {
            "operationId": "user_registry_update",
            "summary": "Update the User Registry",
            "description": "Update the User Registry",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "User Registry to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/UserRegistry"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/UserRegistry"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "User Registries"
            ]
          },
          "delete": {
            "operationId": "user_registry_del",
            "summary": "Delete the User Registry",
            "description": "Delete the User Registry",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/UserRegistry"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "User Registries"
            ]
          }
        },
        "/user-registries/{org}/{user-registry}/users": {
          "post": {
            "x-bhendi-url-path-base": "/users/{org}/{user-registry}",
            "operationId": "user_create",
            "summary": "Create a User",
            "description": "Create a User",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "User to create",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/User"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Successful create",
                "schema": {
                  "$ref": "#/definitions/User"
                },
                "headers": {
                  "Location": {
                    "description": "The location of the newly created resource",
                    "type": "string"
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          },
          "get": {
            "operationId": "user_list",
            "summary": "List the Users",
            "description": "List the Users",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              }
            ],
            "consumes": [],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/UserList"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          }
        },
        "/users/{org}/{user-registry}/{user}": {
          "get": {
            "operationId": "user_get",
            "summary": "Get the User",
            "description": "Get the User",
            "security": [
              {
                "oauth": [
                  "settings-view",
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user",
                "in": "path",
                "description": "User name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/User"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          },
          "patch": {
            "operationId": "user_update",
            "summary": "Update the User",
            "description": "Update the User",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user",
                "in": "path",
                "description": "User name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "payload",
                "in": "body",
                "description": "User to update",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/User"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/User"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          },
          "delete": {
            "operationId": "user_delete",
            "summary": "Delete the User",
            "description": "Delete the User",
            "security": [
              {
                "oauth": [
                  "settings-manage"
                ]
              }
            ],
            "consumes": [],
            "parameters": [
              {
                "name": "org",
                "in": "path",
                "description": "Organization name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user-registry",
                "in": "path",
                "description": "User Registry name or id",
                "required": true,
                "type": "string"
              },
              {
                "name": "user",
                "in": "path",
                "description": "User name or id",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful delete",
                "schema": {
                  "$ref": "#/definitions/User"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          }
        },
        "/token": {
          "post": {
            "operationId": "user_token",
            "summary": "User returns a token.",
            "consumes": [],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": "user credentials (username, password, realm)",
                "required": true,
                "type": "object",
                "schema": {
                  "$ref": "#/definitions/UserLogin"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Anything"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          }
        },
        "/password-reset": {
          "post": {
            "operationId": "user_passwordReset",
            "summary": "Reset the users password",
            "description": "Reset the users password",
            "consumes": [],
            "parameters": [
              {
                "name": "payload",
                "in": "body",
                "description": null,
                "required": true,
                "type": "object",
                "schema": {
                  "$ref": "#/definitions/User"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Anything"
                }
              },
              "default": {
                "description": "Unexpected error",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            },
            "tags": [
              "Users"
            ]
          }
        }
      },
      "definitions": {
        "User": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "user_registry_url": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "photo": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "last_login_at": {
              "type": "string",
              "format": "dateTime"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "UserList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "AdminSetting": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "provider_self_service_onboarding": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "Api": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "ApiList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Api"
              }
            }
          }
        },
        "Catalog": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "org_url": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "CatalogList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Catalog"
              }
            }
          }
        },
        "CatalogSetting": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "gateway_urls": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "user_registry_urls": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "development_mode": {
              "type": "boolean"
            },
            "default_route": {
              "type": "boolean"
            },
            "workflow": {
              "type": "string"
            },
            "product_approvals": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "portal_type": {
              "type": "string"
            },
            "onboarding": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "spaces_enabled": {
              "type": "boolean"
            },
            "space_urls": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "Certificate": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "self": {
              "$ref": "#/definitions/CertificateInfo"
            },
            "chain": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateInfo"
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "CertificateInfo": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "version": {
              "type": "integer"
            },
            "subject": {
              "$ref": "#/definitions/CertificateAddress"
            },
            "issuer": {
              "$ref": "#/definitions/CertificateAddress"
            },
            "serial": {
              "type": "string"
            },
            "not_before": {
              "type": "string",
              "format": "date-time"
            },
            "not_after": {
              "type": "string",
              "format": "date-time"
            },
            "signature_algorithm": {
              "type": "string"
            },
            "key_size": {
              "type": "integer"
            },
            "alternate_names": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "pem": {
              "type": "string"
            }
          }
        },
        "CertificateAddress": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "organization_name": {
              "type": "string"
            },
            "organizational_unit_name": {
              "type": "string"
            },
            "email_address": {
              "type": "string"
            },
            "locality_name": {
              "type": "string"
            },
            "state_or_province_name": {
              "type": "string"
            },
            "country_name": {
              "type": "string"
            },
            "common_name": {
              "type": "string"
            }
          }
        },
        "DraftApi": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "org": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "api": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "swagger": {
                  "type": "string"
                },
                "info": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "title",
                    "version"
                  ],
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "DraftApiList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "$ref": "#/definitions/DraftApi"
                }
              ]
            }
          }
        },
        "DraftProduct": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "id": {
              "type": "string"
            },
            "org": {
              "type": "object",
              "required": [
                "url"
              ],
              "additionalProperties": true,
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "draft_product": {
              "$ref": "#/definitions/ProductDocument"
            }
          }
        },
        "DraftProductList": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "draft_products": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "$ref": "#/definitions/DraftProduct"
                }
              ]
            }
          }
        },
        "Gateway": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "cluster_id": {
              "type": "string"
            },
            "cluster_ip": {
              "type": "string"
            },
            "port": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            },
            "target_port": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "remote_created_at": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "GatewayList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Gateway"
              }
            }
          }
        },
        "Invitation": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "invitation_type": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "slack": {
              "type": "string"
            },
            "roles": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "org_type": {
              "type": "string"
            },
            "credentials": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            },
            "communications_channel": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "expires_at": {
              "type": "string",
              "format": "dateTime"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "InvitationList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invitation"
              }
            }
          }
        },
        "InvitationAccept": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "user_registry": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "org": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        },
        "InvitationRegistration": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "user_registry": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "org": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        },
        "MailServer": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "namespace2": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "host": {
              "type": "string"
            },
            "port": {
              "type": "string"
            },
            "service": {
              "type": "string"
            },
            "sender_email": {
              "type": "string"
            },
            "sender_title": {
              "type": "string"
            },
            "credentials": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "MailServerList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MailServer"
              }
            }
          }
        },
        "MailServerSetting": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "mail_server": {
              "$ref": "#/definitions/MailServer"
            },
            "content_type": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "SmsServer": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "account_sid": {
              "type": "string"
            },
            "auth_token": {
              "type": "string"
            },
            "sender_number": {
              "type": "string"
            },
            "sender_title": {
              "type": "string"
            },
            "credentials": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "SmsServerList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmsServer"
              }
            }
          }
        },
        "SmsServerSetting": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "sms_server": {
              "$ref": "#/definitions/SmsServer"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "MailTemplate": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "body": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "content_type": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "MailTemplateList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MailTemplate"
              }
            }
          }
        },
        "MemberSelfJoin": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "Member": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "org_url": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/User"
            },
            "roles": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "status": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "MemberList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Member"
              }
            }
          }
        },
        "OrgSelfCreate": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "Org": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "org_type": {
              "type": "string"
            },
            "owner_url": {
              "type": "string"
            },
            "admin": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "OrgList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Org"
              }
            }
          }
        },
        "OrgSetting": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "OrgSettingList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrgSetting"
              }
            }
          }
        },
        "Permission": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "namespace2": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "permission_type": {
              "type": "string",
              "enum": [
                "org",
                "admin",
                "provider",
                "catalog",
                "space",
                "consumer"
              ]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "PermissionList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          }
        },
        "SlackServer": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "webhook": {
              "type": "string"
            },
            "channel": {
              "type": "string"
            },
            "sender_email": {
              "type": "string"
            },
            "sender_title": {
              "type": "string"
            },
            "credentials": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "SlackServerList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SlackServer"
              }
            }
          }
        },
        "SlackServerSetting": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "slack_server": {
              "$ref": "#/definitions/SlackServer"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "Product": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "ProductList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        },
        "Role": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "org_type": {
              "type": "string",
              "enum": [
                "admin",
                "provider",
                "catalog",
                "space",
                "consumer"
              ]
            },
            "admin_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "org_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "provider_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "catalog_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "space_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "consumer_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "RoleList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          }
        },
        "RoleDefault": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "org_type": {
              "type": "string",
              "enum": [
                "admin",
                "provider",
                "catalog",
                "space",
                "consumer"
              ]
            },
            "admin_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "org_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "provider_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "catalog_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "space_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "consumer_permissions": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "RoleDefaultList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleDefault"
              }
            }
          }
        },
        "Subscription": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "client_id": {
              "type": "string"
            },
            "client_secret": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "SubscriptionList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        },
        "TLSProfile": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "ciphers": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "protocols": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "mutual_auth": {
              "type": "boolean",
              "default": false
            },
            "keystore": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "certificate_url": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            },
            "truststore": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "certificates_url": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            },
            "visibility": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "org_types": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string",
                      "enum": [
                        "admin",
                        "provider"
                      ]
                    }
                  ]
                }
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "TLSProfileList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TLSProfile"
              }
            }
          }
        },
        "P12File": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string"
            },
            "p12": {
              "type": "string"
            },
            "password": {
              "type": "string",
              "format": "password"
            }
          }
        },
        "CertificateFile": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string"
            },
            "pem": {
              "type": "string"
            }
          }
        },
        "UserRegistry": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "managed": {
              "type": "boolean"
            },
            "registration": {
              "type": "boolean"
            },
            "email_based": {
              "type": "boolean"
            },
            "case_sensitive": {
              "type": "boolean"
            },
            "registry_type": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "configuration": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "identity_providers": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "realm": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "visibility": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "org_types": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    }
                  ]
                },
                "providers": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "UserRegistryList": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total_results": {
              "type": "integer"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRegistry"
              }
            }
          }
        },
        "UserRegistrySetting": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "admin": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "provider": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "updated_at": {
              "type": "string",
              "format": "dateTime"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "ProductDocument": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "product",
            "info"
          ],
          "properties": {
            "product": {
              "type": "string",
              "enum": [
                "1.0.0"
              ]
            },
            "info": {
              "$ref": "#/definitions/InfoSection"
            },
            "visibility": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "view",
                "subscribe"
              ],
              "properties": {
                "view": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "enum": [
                        "public",
                        "authenticated",
                        "custom"
                      ]
                    },
                    "orgs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  }
                },
                "subscribe": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "enum": [
                        "authenticated",
                        "custom"
                      ]
                    },
                    "orgs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "apis": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "$ref": {
                      "type": "object",
                      "$ref": "#/definitions/DraftApi"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operationId": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          },
                          "operation": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "plans": {
              "type": "object",
              "additionalProperties": true,
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "title",
                  "apis"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "approval": {
                    "type": "boolean"
                  },
                  "rate-limit": {
                    "$ref": "#/definitions/RateLimitSection"
                  },
                  "apis": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "operations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "operationId": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "operation": {
                                "type": "string"
                              },
                              "rate-limit": {
                                "$ref": "#/definitions/RateLimitSection"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "RateLimitSection": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "string",
              "pattern": "^(\\d+)\\/(\\d+)?(second|minute|hour|day|week)$"
            },
            "hard-limit": {
              "type": "boolean",
              "default": false
            }
          }
        },
        "InfoSection": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "title",
            "version"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "termsOfService": {
              "type": "string"
            },
            "contact": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "license": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "UserLogin": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "client_id": {
              "type": "string"
            },
            "client_secret": {
              "type": "string"
            },
            "grant_type": {
              "type": "string"
            }
          }
        },
        "Error": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "status": {
              "type": "integer"
            },
            "message": {
              "type": [
                "string",
                "array"
              ]
            },
            "errors": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "Anything": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "IBM APIM BankA",
        "description": "API resources related to the financial industry.\n\nYou may download the swagger.json definition to use in your API Management demos.\n\nOptionally, you can obtain the [source code](https://hub.jazz.net/git/bakert/apim-banka) and run it locally.",
        "version": "1.0.0",
        "x-ibm-name": "ibm-apim-banka"
      },
      "host": "apim-services.mybluemix.net",
      "basePath": "/banka/v1",
      "schemes": [
        "https"
      ],
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "paths": {
        "/branches": {
          "post": {
            "tags": [
              "branch"
            ],
            "summary": "Create a new instance of the model and persist it into the data source.",
            "operationId": "branch.create",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "branch"
            ],
            "summary": "Update an existing model instance or insert a new one into the data source.",
            "operationId": "branch.upsert",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "branch"
            ],
            "summary": "Find all instances of the model matched by filter from the data source.",
            "operationId": "branch.find",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields, where, include, order, offset, and limit",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "zip",
                "in": "query",
                "description": "restrict matches to the selected zip code",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "opening_time",
                "in": "query",
                "description": "restrict matches to branches that are open after this time",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "hour",
                "in": "query",
                "description": "restrict matches to branches that are open at this hour",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "sunset",
                "in": "query",
                "description": "restrict matches to branches that are open before this sunset time",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "humidity",
                "in": "query",
                "description": "something about the humidity for some reason",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "pressure",
                "in": "query",
                "description": "something something pressure",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "temperature",
                "in": "query",
                "description": "something something temperature",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "country",
                "in": "query",
                "description": "something something country",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "countryShort",
                "in": "query",
                "description": "something something country code",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "countryCode",
                "in": "query",
                "description": "something something country in short form",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/branch"
                  }
                },
                "examples": {
                  "application/json": "overridden the proper body with a string"
                }
              }
            },
            "deprecated": false
          }
        },
        "/branches/{id}/exists": {
          "get": {
            "tags": [
              "branch"
            ],
            "summary": "Check whether a model instance exists in the data source.",
            "operationId": "branch.exists",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/branches/{id}": {
          "head": {
            "tags": [
              "branch"
            ],
            "summary": "Check whether a model instance exists in the data source.",
            "operationId": "branch.exists.head",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "branch"
            ],
            "summary": "Find a model instance by id from the data source.",
            "operationId": "branch.findById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields and include",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            },
            "deprecated": false
          },
          "delete": {
            "tags": [
              "branch"
            ],
            "summary": "Delete a model instance by id from the data source.",
            "operationId": "branch.deleteById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "branch"
            ],
            "summary": "Update attributes for a model instance and persist it into the data source.",
            "operationId": "branch.prototype.updateAttributes",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "An object of model property name/value pairs",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/branch"
                }
              }
            },
            "deprecated": false
          }
        },
        "/branches/count": {
          "get": {
            "tags": [
              "branch"
            ],
            "summary": "Count instances of the model matched by where from the data source.",
            "operationId": "branch.count",
            "parameters": [
              {
                "name": "where",
                "in": "query",
                "description": "Criteria to match model instances",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/customers/{id}/accounts/{fk}": {
          "get": {
            "tags": [
              "customer"
            ],
            "summary": "Find a related item by id for accounts.",
            "operationId": "customer.prototype.__findById__accounts",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for accounts",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/account"
                }
              }
            },
            "deprecated": false
          },
          "delete": {
            "tags": [
              "customer"
            ],
            "summary": "Delete a related item by id for accounts.",
            "operationId": "customer.prototype.__destroyById__accounts",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for accounts",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "customer"
            ],
            "summary": "Update a related item by id for accounts.",
            "operationId": "customer.prototype.__updateById__accounts",
            "parameters": [
              {
                "name": "fk",
                "in": "path",
                "description": "Foreign key for accounts",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "data",
                "in": "body",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/account"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/account"
                }
              }
            },
            "deprecated": false
          }
        },
        "/customers/{id}/accounts": {
          "get": {
            "tags": [
              "customer"
            ],
            "summary": "Queries accounts of customer.",
            "operationId": "customer.prototype.__get__accounts",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/account"
                  }
                }
              }
            },
            "deprecated": false
          },
          "post": {
            "tags": [
              "customer"
            ],
            "summary": "Creates a new instance in accounts of this model.",
            "operationId": "customer.prototype.__create__accounts",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/account"
                }
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/account"
                }
              }
            },
            "deprecated": false
          },
          "delete": {
            "tags": [
              "customer"
            ],
            "summary": "Deletes all accounts of this model.",
            "operationId": "customer.prototype.__delete__accounts",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          }
        },
        "/customers/{id}/accounts/count": {
          "get": {
            "tags": [
              "customer"
            ],
            "summary": "Counts accounts of customer.",
            "operationId": "customer.prototype.__count__accounts",
            "parameters": [
              {
                "name": "where",
                "in": "query",
                "description": "Criteria to match model instances",
                "required": false,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "id",
                "in": "path",
                "description": "PersistedModel id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "object"
                }
              }
            },
            "deprecated": false
          }
        },
        "/customers": {
          "post": {
            "tags": [
              "customer"
            ],
            "summary": "Create a new instance of the model and persist it into the data source.",
            "operationId": "customer.create",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/customer"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/customer"
                }
              }
            },
            "deprecated": false
          },
          "put": {
            "tags": [
              "customer"
            ],
            "summary": "Update an existing model instance or insert a new one into the data source.",
            "operationId": "customer.upsert",
            "parameters": [
              {
                "name": "data",
                "in": "body",
                "description": "Model instance data",
                "required": false,
                "schema": {
                  "$ref": "#/definitions/customer"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/customer"
                }
              }
            },
            "deprecated": false
          },
          "get": {
            "tags": [
              "customer"
            ],
            "summary": "Find all instances of the model matched by filter from the data source.",
            "operationId": "customer.find",
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields, where, include, order, offset, and limit",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/customer"
                  }
                }
              }
            },
            "deprecated": false
          }
        },
        "/customers/{id}": {
          "get": {
            "tags": [
              "customer"
            ],
            "summary": "Find a model instance by id from the data source.",
            "operationId": "customer.findById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Filter defining fields and include",
                "required": false,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/customer"
                }
              }
            },
            "deprecated": false
          },
          "delete": {
            "tags": [
              "customer"
            ],
            "summary": "Delete a model instance by id from the data source.",
            "operationId": "customer.deleteById",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Model id",
                "required": true,
                "type": "string",
                "format": "JSON"
              }
            ],
            "responses": {
              "204": {
                "description": "Request was successful"
              }
            },
            "deprecated": false
          }
        },
        "/loans/quote": {
          "get": {
            "tags": [
              "loan"
            ],
            "summary": "Calculate a monthly payment",
            "operationId": "loan.quote",
            "parameters": [
              {
                "name": "apr",
                "in": "query",
                "description": "annual percentage rate (%)",
                "required": true,
                "type": "number",
                "format": "double"
              },
              {
                "name": "amount",
                "in": "query",
                "description": "total amount of the loan ($)",
                "required": true,
                "type": "number",
                "format": "double"
              },
              {
                "name": "term",
                "in": "query",
                "description": "loan duration (months)",
                "required": true,
                "type": "number",
                "format": "double"
              }
            ],
            "responses": {
              "200": {
                "description": "Request was successful",
                "schema": {
                  "$ref": "#/definitions/quote"
                }
              }
            },
            "deprecated": false
          }
        },
        "/branches/multiple_withref": {
          "post": {
            "tags": [
              "branch"
            ],
            "description": "Create multiple branches",
            "responses": {
              "201": {
                "description": "201 Created"
              }
            },
            "parameters": [
              {
                "name": "body",
                "required": true,
                "in": "body",
                "description": "Branches request",
                "schema": {
                  "$ref": "#/definitions/branchrequest_ref"
                }
              }
            ]
          }
        },
        "/branches/multiple_inline": {
          "post": {
            "tags": [
              "branch"
            ],
            "description": "Create multiple branches",
            "responses": {
              "201": {
                "description": "201 Created"
              }
            },
            "parameters": [
              {
                "name": "body",
                "required": true,
                "in": "body",
                "description": "Branches request",
                "schema": {
                  "$ref": "#/definitions/branchrequest_inline"
                }
              }
            ]
          }
        },
        "/branches/array_of_arrays": {
          "post": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            },
            "tags": [
              "branch"
            ],
            "summary": "An artificial operation allowing for testing of a body with a recursively defined, self-referential object",
            "parameters": [
              {
                "name": "body",
                "required": true,
                "in": "body",
                "schema": {
                  "$ref": "#/definitions/arrayofarray"
                }
              }
            ]
          }
        }
      },
      "definitions": {
        "address": {
          "properties": {
            "street1": {
              "type": "string"
            },
            "street2": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "zip_code": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "example": {
            "street1": "15 Fancy Street",
            "street2": "Faraway",
            "city": "Toptown",
            "state": "Hundera",
            "zip_code": "123456"
          }
        },
        "account": {
          "properties": {
            "id": {
              "type": "string",
              "example": "ACC-10298362"
            },
            "name": {
              "type": "string",
              "example": "Universal Saver"
            },
            "type": {
              "type": "string",
              "example": "checking"
            },
            "balance": {
              "type": "number",
              "format": "double",
              "example": 2000.2
            },
            "status": {
              "type": "string",
              "example": "open"
            },
            "credit_limit": {
              "type": "number",
              "format": "double",
              "example": 2000
            },
            "customer_id": {
              "type": "string",
              "example": "CUST-102928282"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "customer": {
          "description": "operations for customer accounts",
          "properties": {
            "id": {
              "type": "string",
              "example": "ABC-DE-12345"
            },
            "first_name": {
              "type": "string",
              "example": "Thomas"
            },
            "last_name": {
              "type": "string",
              "example": "Maxwell"
            },
            "email": {
              "type": "string",
              "example": "thomas.maxwell@example.com"
            },
            "address": {
              "$ref": "#/definitions/address"
            },
            "dob": {
              "type": "string",
              "format": "date",
              "example": "01-01-1901"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "branch": {
          "description": "operations for branch information",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/address"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false,
          "example": {
            "id": 1234,
            "type": "retail",
            "phone": 474747,
            "address": {
              "street1": "15 Sunrise Drive",
              "street2": "Havenbrook",
              "city": "Millwall",
              "state": "Penshire",
              "zip_code": 47471
            }
          }
        },
        "quote": {
          "properties": {
            "monthly_payment": {
              "type": "number",
              "example": 12
            }
          }
        },
        "branchrequest_inline": {
          "properties": {
            "requestId": {
              "type": "string",
              "description": "The ID of the request",
              "example": "ABCD1234"
            },
            "branches": {
              "properties": {},
              "type": "array",
              "description": "The array of branches",
              "items": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "address": {
                    "$ref": "#/definitions/address"
                  }
                },
                "required": [
                  "id",
                  "type",
                  "phone",
                  "address"
                ],
                "additionalProperties": false,
                "example": {
                  "id": "BR-123",
                  "type": "retail",
                  "phone": 1234474747,
                  "address": {
                    "street1": "15 Sunrise Drive",
                    "street2": "Havenbrook",
                    "city": "Millwall",
                    "state": "Penshire",
                    "zip_code": 47471
                  }
                }
              }
            }
          },
          "required": [
            "requestId",
            "branches"
          ]
        },
        "branchrequest_ref": {
          "properties": {
            "requestId": {
              "type": "string",
              "description": "The ID of the request",
              "example": "AABB-11223344"
            },
            "branches": {
              "type": "array",
              "description": "The array of branches",
              "items": {
                "$ref": "#/definitions/branch"
              },
              "example": [
                {
                  "id": "BR-123",
                  "type": "retail",
                  "phone": 1234474747,
                  "address": {
                    "street1": "15 Sunrise Drive",
                    "street2": "Havenbrook",
                    "city": "Millwall",
                    "state": "Penshire",
                    "zip_code": 47471
                  }
                }
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "requestId",
            "branches"
          ]
        },
        "arrayofarray": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "tags": [
        {
          "name": "branch",
          "description": "operations for branch information"
        },
        {
          "name": "customer",
          "description": "operations for customer accounts"
        },
        {
          "name": "loan",
          "description": "operations for loans"
        }
      ],
      "x-ibm-configuration": {
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "GlobalWeather",
        "description": "",
        "x-ibm-name": "globalweather",
        "version": "1.0.0"
      },
      "schemes": [
        "https"
      ],
      "basePath": "/GlobalWeather",
      "produces": [
        "application/xml"
      ],
      "consumes": [
        "text/xml"
      ],
      "securityDefinitions": {
        "clientID": {
          "type": "apiKey",
          "name": "X-IBM-Client-Id",
          "in": "header",
          "description": ""
        }
      },
      "security": [
        {
          "clientID": []
        }
      ],
      "x-ibm-configuration": {
        "type": "wsdl",
        "wsdl-definition": {
          "wsdl": "globalweather.wsdl",
          "service": "GlobalWeather",
          "port": "GlobalWeatherSoap",
          "soap-version": "1.1"
        },
        "assembly": {
          "execute": [
            {
              "proxy": {
                "title": "proxy",
                "target-url": "http://www.webservicex.com/globalweather.asmx"
              }
            }
          ]
        },
        "gateway": "datapower-gateway",
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        }
      },
      "paths": {
        "/GetWeather": {
          "post": {
            "summary": "Operation GetWeather",
            "description": "Get weather report for all major cities around the world.",
            "operationId": "GetWeather",
            "x-ibm-soap": {
              "soap-action": "http://www.webserviceX.NET/GetWeather",
              "soap-operation": "{http://www.webserviceX.NET}GetWeather"
            },
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/GetWeatherInput"
                },
                "description": "Get Weather Input body",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Obtenir le corps de l'entrée météorologique"
                  }
                }
              }
            ],
            "responses": {
              "default": {
                "description": "",
                "schema": {
                  "$ref": "#/definitions/GetWeatherOutput"
                }
              }
            }
          }
        },
        "/GetCitiesByCountry": {
          "post": {
            "summary": "Operation GetCitiesByCountry",
            "description": "Get all major\n\t\t\t\tcities by country name(full / part).",
            "operationId": "GetCitiesByCountry",
            "x-ibm-soap": {
              "soap-action": "http://www.webserviceX.NET/GetCitiesByCountry",
              "soap-operation": "{http://www.webserviceX.NET}GetCitiesByCountry"
            },
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/GetCitiesByCountryInput"
                }
              }
            ],
            "responses": {
              "default": {
                "description": "",
                "schema": {
                  "$ref": "#/definitions/GetCitiesByCountryOutput"
                }
              }
            }
          }
        }
      },
      "definitions": {
        "Security": {
          "xml": {
            "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
            "prefix": "wsse"
          },
          "type": "object",
          "properties": {
            "UsernameToken": {
              "type": "object",
              "properties": {
                "Username": {
                  "type": "string"
                },
                "Password": {
                  "type": "string"
                }
              }
            }
          }
        },
        "GetWeatherInput": {
          "type": "object",
          "properties": {
            "Envelope": {
              "xml": {
                "prefix": "soap-env",
                "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
              },
              "type": "object",
              "properties": {
                "Header": {
                  "$ref": "#/definitions/GetWeatherHeader"
                },
                "Body": {
                  "type": "object",
                  "properties": {
                    "GetWeather": {
                      "$ref": "#/definitions/GetWeather_tns"
                    }
                  }
                }
              }
            }
          },
          "example": "\n<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n <soap-env:Header>\n  <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n   <UsernameToken>\n    <Username>string</Username>\n    <Password>string</Password>\n   </UsernameToken>\n  </wsse:Security>\n </soap-env:Header>\n <soap-env:Body>\n  <tns:GetWeather xmlns:tns=\"http://www.webserviceX.NET\">\n   <tns:CityName>string</tns:CityName>\n   <tns:CountryName>string</tns:CountryName>\n  </tns:GetWeather>\n </soap-env:Body>\n</soap-env:Envelope>"
        },
        "GetWeatherHeader": {
          "type": "object",
          "properties": {
            "Security": {
              "$ref": "#/definitions/Security"
            }
          }
        },
        "GetWeatherOutput": {
          "type": "object",
          "properties": {
            "Envelope": {
              "xml": {
                "prefix": "soap-env",
                "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
              },
              "type": "object",
              "properties": {
                "Body": {
                  "type": "object",
                  "properties": {
                    "GetWeatherResponse": {
                      "$ref": "#/definitions/GetWeatherResponse_tns"
                    }
                  }
                }
              }
            }
          },
          "example": "\n<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n <soap-env:Body>\n  <tns:GetWeatherResponse xmlns:tns=\"http://www.webserviceX.NET\">\n   <tns:GetWeatherResult>string</tns:GetWeatherResult>\n  </tns:GetWeatherResponse>\n </soap-env:Body>\n</soap-env:Envelope>"
        },
        "GetCitiesByCountryInput": {
          "type": "object",
          "properties": {
            "Envelope": {
              "xml": {
                "prefix": "soap-env",
                "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
              },
              "type": "object",
              "properties": {
                "Header": {
                  "$ref": "#/definitions/GetCitiesByCountryHeader"
                },
                "Body": {
                  "type": "object",
                  "properties": {
                    "GetCitiesByCountry": {
                      "$ref": "#/definitions/GetCitiesByCountry_tns"
                    }
                  }
                }
              }
            }
          },
          "example": "\n<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n <soap-env:Header>\n  <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n   <UsernameToken>\n    <Username>string</Username>\n    <Password>string</Password>\n   </UsernameToken>\n  </wsse:Security>\n </soap-env:Header>\n <soap-env:Body>\n  <tns:GetCitiesByCountry xmlns:tns=\"http://www.webserviceX.NET\">\n   <tns:CountryName>string</tns:CountryName>\n  </tns:GetCitiesByCountry>\n </soap-env:Body>\n</soap-env:Envelope>"
        },
        "GetCitiesByCountryHeader": {
          "type": "object",
          "properties": {
            "Security": {
              "$ref": "#/definitions/Security"
            }
          }
        },
        "GetCitiesByCountryOutput": {
          "type": "object",
          "properties": {
            "Envelope": {
              "xml": {
                "prefix": "soap-env",
                "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
              },
              "type": "object",
              "properties": {
                "Body": {
                  "type": "object",
                  "properties": {
                    "GetCitiesByCountryResponse": {
                      "$ref": "#/definitions/GetCitiesByCountryResponse_tns"
                    }
                  }
                }
              }
            }
          },
          "example": "\n<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n <soap-env:Body>\n  <tns:GetCitiesByCountryResponse xmlns:tns=\"http://www.webserviceX.NET\">\n   <tns:GetCitiesByCountryResult>string</tns:GetCitiesByCountryResult>\n  </tns:GetCitiesByCountryResponse>\n </soap-env:Body>\n</soap-env:Envelope>"
        },
        "GetWeather_tns": {
          "xml": {
            "namespace": "http://www.webserviceX.NET",
            "prefix": "tns"
          },
          "type": "object",
          "properties": {
            "CityName": {
              "type": "string"
            },
            "CountryName": {
              "type": "string"
            }
          },
          "example": "\n<tns:GetWeather xmlns:tns=\"http://www.webserviceX.NET\">\n <tns:CityName>string</tns:CityName>\n <tns:CountryName>string</tns:CountryName>\n</tns:GetWeather>"
        },
        "GetWeatherResponse_tns": {
          "xml": {
            "namespace": "http://www.webserviceX.NET",
            "prefix": "tns"
          },
          "type": "object",
          "properties": {
            "GetWeatherResult": {
              "type": "string"
            }
          },
          "example": "\n<tns:GetWeatherResponse xmlns:tns=\"http://www.webserviceX.NET\">\n <tns:GetWeatherResult>string</tns:GetWeatherResult>\n</tns:GetWeatherResponse>"
        },
        "GetCitiesByCountry_tns": {
          "xml": {
            "namespace": "http://www.webserviceX.NET",
            "prefix": "tns"
          },
          "type": "object",
          "properties": {
            "CountryName": {
              "type": "string"
            }
          },
          "example": "\n<tns:GetCitiesByCountry xmlns:tns=\"http://www.webserviceX.NET\">\n <tns:CountryName>string</tns:CountryName>\n</tns:GetCitiesByCountry>"
        },
        "GetCitiesByCountryResponse_tns": {
          "xml": {
            "namespace": "http://www.webserviceX.NET",
            "prefix": "tns"
          },
          "type": "object",
          "properties": {
            "GetCitiesByCountryResult": {
              "type": "string"
            }
          },
          "example": "\n<tns:GetCitiesByCountryResponse xmlns:tns=\"http://www.webserviceX.NET\">\n <tns:GetCitiesByCountryResult>string</tns:GetCitiesByCountryResult>\n</tns:GetCitiesByCountryResponse>"
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "google-drive",
        "title": "Google Drive",
        "version": "1.0.0"
      },
      "schemes": [
        "https"
      ],
      "host": "www.googleapis.com",
      "basePath": "/drive",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "Google OAuth": {
          "type": "oauth2",
          "description": "",
          "flow": "accessCode",
          "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
          "scopes": {
            "https://www.googleapis.com/auth/drive": ""
          },
          "tokenUrl": "https://www.googleapis.com/oauth2/v4/token"
        }
      },
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "phase": "realized"
      },
      "paths": {
        "/v3/files": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          }
        }
      },
      "definitions": {},
      "tags": [],
      "security": [
        {
          "Google OAuth": []
        }
      ]
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "basicauth",
        "title": "BasicAuth",
        "description": "API with Basic Authentication and key and secret schemes",
        "version": "1.0.0"
      },
      "schemes": [
        "https"
      ],
      "host": "localhost:3000",
      "basePath": "/basicauth",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "client_secret": {
          "type": "apiKey",
          "description": "Secret key",
          "in": "header",
          "name": "X-IBM-Client-Secret"
        },
        "basic_auth": {
          "type": "basic",
          "description": "Basic authentication",
          "x-ibm-authentication-url": {
            "url": "http://example.com/auth"
          }
        },
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id",
          "description": "Client ID key"
        }
      },
      "security": [
        {
          "basic_auth": []
        },
        {
          "clientIdHeader": []
        },
        {
          "client_secret": []
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "$(target-url)$(request.path)"
              }
            }
          ]
        },
        "phase": "realized"
      },
      "paths": {
        "/basicStuffs": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          }
        }
      },
      "definitions": {},
      "tags": []
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "custom-client-key",
        "title": "Custom Client Key",
        "version": "1.0.0",
        "description": "API with custom client key using x-key-type to identify them as API Key and API Secret."
      },
      "schemes": [
        "https"
      ],
      "host": "localhost:3000",
      "basePath": "/custom-client-key",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "Custom Secret header": {
          "type": "apiKey",
          "description": "Custom secret in the header",
          "x-key-type": "clientSecret",
          "in": "header",
          "name": "custom_secret_header"
        },
        "Custom Secret": {
          "type": "apiKey",
          "description": "Custom secret in the query",
          "x-key-type": "clientSecret",
          "in": "query",
          "name": "custom_secret"
        },
        "Custom ID header": {
          "type": "apiKey",
          "description": "Custom API Key in header",
          "x-key-type": "clientId",
          "in": "header",
          "name": "custom_id_header"
        },
        "Custom ID": {
          "type": "apiKey",
          "description": "custom API key in the query",
          "x-key-type": "clientId",
          "x-something": "blah",
          "in": "query",
          "name": "custom_id_key"
        },
        "key_secret": {
          "type": "apiKey",
          "description": "",
          "in": "header",
          "name": "X-IBM-Client-Secret"
        },
        "key_id": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "security": [
        {
          "key_id": []
        },
        {
          "key_secret": []
        },
        {
          "Custom Secret header": []
        },
        {
          "Custom Secret": []
        },
        {
          "Custom ID header": []
        },
        {
          "Custom ID": []
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "$(target-url)$(request.path)"
              }
            }
          ]
        },
        "phase": "realized"
      },
      "paths": {
        "/keys": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          },
          "post": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            },
            "security": [
              {
                "Custom ID header": []
              }
            ]
          },
          "put": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            },
            "security": [
              {
                "Custom ID": []
              }
            ]
          },
          "delete": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            },
            "security": [
              {
                "Custom Secret": []
              }
            ]
          },
          "head": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            },
            "security": [
              {
                "Custom Secret header": []
              }
            ]
          }
        }
      },
      "definitions": {},
      "tags": []
    },
    {
      "swagger": "2.0",
      "info": {
        "version": "1.0.0",
        "title": "Catalog Search",
        "description": "REST version",
        "x-ibm-name": "catalog-search",
        "contact": {
          "name": "wasadmin"
        }
      },
      "basePath": "/CatalogSearch/jaxrs",
      "paths": {
        "/catalog/{id}/": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              },
            },
            "x-my-extension": {
              "name": "value",
              "name2": "value2"
            },
            "security": []
          },
          "parameters": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "in": "path",
              "description": "catalog item identifier"
            }
          ]
        }
      },
      "securityDefinitions": {},
      "schemes": [
        "https"
      ],
      "produces": [
        "application/json"
      ],
      "x-ibm-configuration": {
        "phase": "realized",
        "assembly": {
          "execute": [
            {
              "proxy": {
                "title": "proxy",
                "target-url": "https://example.com:9443$(request.path)"
              }
            }
          ]
        },
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        }
      },
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "climbing-weather-api",
        "title": "Climbing Weather API",
        "description": "API for climbing and weather.",
        "version": "1.0.0",
        "x-ibm-languages": {
          "title": {
            "fr": "Climat d'escalade"
          },
          "description": {
            "fr": "API pour l'escalade et la météo."
          }
        }
      },
      "externalDocs": {
        "url": "http://www.weather.com",
        "description": "Sample clients for the API.",
        "x-ibm-languages": {
          "description": {
            "fr": "Exemples de clients pour l'API."
          }
        }
      },
      "schemes": [
        "https"
      ],
      "host": "$(catalog.host)",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "x-ibm-configuration": {
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "https://api.us.apiconnect.ibmcloud.com/developmentoperations-apiconnect/sb$(request.path)$(request.search)&client_id=d5dff2e6-2c03-4970-b322-a2595797945f",
                "title": "3 day forecast invocation",
                "cache-response": "time-to-live",
                "cache-key": "$(request.search)"
              }
            }
          ]
        },
        "gateway": "datapower-gateway",
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        }
      },
      "paths": {
        "/weather/forecast": {
          "get": {
            "summary": "Retrieve the 3 day forecast for a location",
            "description": "Retrieve the locations weather forecast descriptions for the next 3 days and nights",
            "operationId": "getWeather",
            "externalDocs": {
              "url": "http://www.weather.com",
              "description": "Documentation with user guide and sample clients.",
              "x-ibm-languages": {
                "description": {
                  "fr": "Documentation avec guide d'utilisation et exemples de clients."
                }
              }
            },
            "x-ibm-languages": {
              "summary": {
                "fr": "Récupérer la prévision de 3 jours pour un emplacement"
              },
              "description": {
                "fr": "Récupérer les descriptions des prévisions météo pour les 3 prochains jours et les nuits"
              }
            },
            "tags": [
              "Weather"
            ],
            "parameters": [
              {
                "name": "zip",
                "type": "string",
                "in": "query",
                "description": "A 5 number zip code",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Un code postal à 5 numéros"
                  }
                }
              },
              {
                "name": "country",
                "type": "string",
                "in": "query",
                "description": "A 2 letter country code",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Un code de pays de 2 lettres"
                  }
                }
              },
              {
                "name": "lat",
                "type": "string",
                "in": "query",
                "description": "A latitude value between -90 and 90",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Une valeur de latitude entre -90 et 90"
                  }
                }
              },
              {
                "name": "lon",
                "type": "string",
                "in": "query",
                "description": "A longitude value between -180 and 180",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Une valeur de longitude entre -180 et 180"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Succès"
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Mauvaise Demande"
                  }
                }
              },
              "408": {
                "description": "Request Timeout",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Délai de délai de demande"
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "x-ibm-languages": {
                  "description": {
                    "fr": "Erreur Interne du Serveur"
                  }
                }
              }
            }
          }
        }
      },
      "basePath": "/",
      "tags": [
        {
          "name": "Weather",
          "description": "Sample API to get weather forecast data",
          "x-ibm-languages": {
            "description": {
              "fr": "Exemple d'API pour obtenir des données météorologiques"
            }
          }
        }
      ],
      "securityDefinitions": {
        "client-secret": {
          "type": "apiKey",
          "description": "Client secret in the header",
          "in": "header",
          "name": "X-IBM-Client-Secret",
          "x-ibm-languages": {
            "description": {
              "fr": "Client secret dans l'en-tête"
            }
          }
        },
        "client-id": {
          "type": "apiKey",
          "description": "API key in the header",
          "in": "header",
          "name": "X-IBM-Client-Id",
          "x-ibm-languages": {
            "description": {
              "fr": "Clé API dans l'en-tête"
            }
          }
        },
        "oauth-1": {
          "type": "oauth2",
          "description": "OAuth2 security",
          "flow": "password",
          "scopes": {
            "scope1": "Find out about the weather",
            "x-ibm-languages": {
              "scope1": {
                "fr": "Découvrez la météo"
              }
            }
          },
          "tokenUrl": "https://sjsldev083.dev.ciondemand.com/si/sb/oauth/oauth2/token",
          "x-ibm-languages": {
            "description": {
              "fr": "Sécurité OAuth2"
            }
          }
        },
      },
      "security": [
        {
          "client-secret": [],
          "client-id": [],
          "oauth-1": [
            "scope1"
          ]
        }
      ]
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "Hursley House environment",
        "description": "Updates from environmental sensors in Hursley House",
        "version": "0.0.1"
      },
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "x-ibm-events": {
        "hursleyhouse-event-stream": {
          "description": "Events about environmental readings taken by sensors in Hursley House",
          "kafkaTopic": "d2a7edd0-6807-11e7-b5db-0d602bf3149c",
          "x-ibm-configuration": {
            "websocket": "wss://wk-events-gateway-demo.mybluemix.net/api/v1/tenants/whiteknight/topics/21a0e200-adbf-11e7-8b79-a3627365ccc2/live"
          },
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/StreamPayload"
              }
            }
          }
        }
      },
      "x-ibm-endpoints": [{
        endpointUrl: "https://my-prod-server.com",
        type: ["production"],
        description: "I'm a description - markdown supported",
        kafka: {
          bootstrapServers: ["kafka01-prod01.messagehub.services.us-south.bluemix.net:9093", "kafka04-prod01.messagehub.services.us-south.bluemix.net:9093", "kafka02-prod01.messagehub.services.us-south.bluemix.net:9093", "kafka03-prod01.messagehub.services.us-south.bluemix.net:9093", "kafka05-prod01.messagehub.services.us-south.bluemix.net:9093"],
          restURL: 'https://kafka-rest-prod01.messagehub.services.us-south.bluemix.net:443'
        }
      }, {
        endpointUrl: "https://my-dev-server.com/sandbox",
        type: ["development"],
        kafka: {
          bootstrapServers: ["kafka01-stage1.messagehub.services.us-south.bluemix.net:9093", "kafka04-stage1.messagehub.services.us-south.bluemix.net:9093", "kafka02-stage1.messagehub.services.us-south.bluemix.net:9093", "kafka03-stage1.messagehub.services.us-south.bluemix.net:9093", "kafka05-stage1.messagehub.services.us-south.bluemix.net:9093"],
          restURL: 'https://kafka-rest-stage1.messagehub.services.us-south.bluemix.net:443'
        }
      }],
      "paths": {},
      "definitions": {
        "StreamPayload": {
          "type": "object",
          "required": [
            "typeId",
            "deviceId",
            "eventId",
            "timestamp",
            "payload"
          ],
          "properties": {
            "typeId": {
              "type": "string",
              "description": "Type of sensor that produced the event"
            },
            "deviceId": {
              "type": "string",
              "description": "ID of the sensor that produced the event"
            },
            "eventId": {
              "type": "string"
            },
            "format": {
              "type": "string",
              "enum": [
                "json"
              ]
            },
            "timestamp": {
              "type": "string",
              "example": "2017-06-28T19:57:37.754+0000"
            },
            "payload": {
              "$ref": "#/definitions/SensorReadingEnvelope"
            }
          }
        },
        "SensorReadingEnvelope": {
          "type": "object",
          "required": [
            "d"
          ],
          "properties": {
            "d": {
              "$ref": "#/definitions/SensorReading"
            }
          }
        },
        "SensorReading": {
          "type": "object",
          "required": [
            "timestamp",
            "sensor",
            "data"
          ],
          "properties": {
            "timestamp": {
              "type": "number",
              "example": 1498680272827
            },
            "sensor": {
              "type": "string",
              "example": "H004LE"
            },
            "room": {
              "type": "string",
              "description": "name of the room the sensor reading was taken in"
            },
            "data": {
              "$ref": "#/definitions/SensorReadingData"
            }
          }
        },
        "SensorReadingData": {
          "type": "object",
          "properties": {
            "Temperature": {
              "type": "number",
              "description": "Temperature in celsius",
              "example": 23.7
            },
            "Occupancy": {
              "type": "string",
              "enum": [
                "occupied"
              ]
            },
            "Light Level": {
              "type": "number"
            },
            "Pressure": {
              "type": "number",
              "example": 1010.35110641
            },
            "Relative Humidity": {
              "type": "number",
              "example": 39.6
            },
            "Noise Level": {
              "type": "number",
              "description": "dB",
              "example": 35
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "Company share prices",
        "description": "Updates on trades of shares of company in the NYSE",
        "version": "0.0.1"
      },
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "x-ibm-events": {
        "stocktrade-event-stream": {
          "description": "Events about share trades of company",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/StreamPayload"
              }
            }
          }
        }
      },
      "paths": {
        "/history": {
          "get": {
            "summary": "Gets historical events",
            "description": "Retrieve previous events from the events stream",
            "parameters": [
              {
                "name": "pointer",
                "in": "query",
                "type": "number",
                "required": false,
                "description": "The bookmark for where in the stream to retrieve from. If not provided, assumes from the beginning of the stream."
              }
            ],
            "responses": {
              "200": {
                "description": "Array of previous events",
                "schema": {
                  "$ref": "#/definitions/Events"
                }
              },
              "500": {
                "description": "Server error prevented the return of a list of event streams",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            }
          }
        }
      },
      "definitions": {
        "Events": {
          "type": "array",
          "title": "Events",
          "items": {
            "$ref": "#/definitions/StreamPayload"
          }
        },
        "StreamPayload": {
          "type": "object",
          "required": [
            "name",
            "currency",
            "price",
            "lasttrade"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Full name of the company"
            },
            "currency": {
              "type": "string",
              "description": "Short code for currency of the trade",
              "example": "USD"
            },
            "price": {
              "type": "number",
              "description": "Value of the trade",
              "example": 76.73
            },
            "lasttrade": {
              "$ref": "#/definitions/LastTrade"
            }
          }
        },
        "LastTrade": {
          "required": [
            "date",
            "time"
          ],
          "properties": {
            "date": {
              "type": "string"
            },
            "time": {
              "type": "string"
            }
          }
        },
        "Error": {
          "description": "Returned if an API request has failed, with a description of what went wrong.",
          "required": [
            "error",
            "code"
          ],
          "properties": {
            "error": {
              "type": "string",
              "description": "Human-readable description of the error"
            },
            "code": {
              "type": "string",
              "description": "Unique code for the type of error"
            },
            "detail": {
              "type": "string",
              "description": "Additional detail about what caused the error, if known."
            }
          }
        }
      }
    },
    {
      "openapi": "3.0.0",
      "info": {
        "title": "Link Example",
        "version": "1.0.0"
      },
      "paths": {
        "/2.0/users/{username}": {
          "get": {
            "operationId": "getUserByName",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The User",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                },
                "links": {
                  "userRepositories": {
                    "$ref": "#/components/links/UserRepositories"
                  }
                }
              }
            }
          }
        },
        "/2.0/repositories/{username}": {
          "get": {
            "operationId": "getRepositoriesByOwner",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "repositories owned by the supplied user",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository"
                      }
                    }
                  }
                },
                "links": {
                  "userRepository": {
                    "$ref": "#/components/links/UserRepository"
                  }
                }
              }
            }
          }
        },
        "/2.0/repositories/{username}/{slug}": {
          "get": {
            "operationId": "getRepository",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "slug",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The repository",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/repository"
                    }
                  }
                },
                "links": {
                  "repositoryPullRequests": {
                    "$ref": "#/components/links/RepositoryPullRequests"
                  }
                }
              }
            }
          }
        },
        "/2.0/repositories/{username}/{slug}/pullrequests": {
          "get": {
            "operationId": "getPullRequestsByRepository",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "slug",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "state",
                "in": "query",
                "schema": {
                  "type": "string",
                  "enum": [
                    "open",
                    "merged",
                    "declined"
                  ]
                }
              }
            ],
            "responses": {
              "200": {
                "description": "an array of pull request objects",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/pullrequest"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/2.0/repositories/{username}/{slug}/pullrequests/{pid}": {
          "get": {
            "operationId": "getPullRequestsById",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "slug",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "pid",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "a pull request object",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/pullrequest"
                    }
                  }
                },
                "links": {
                  "pullRequestMerge": {
                    "$ref": "#/components/links/PullRequestMerge"
                  }
                }
              }
            }
          }
        },
        "/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge": {
          "post": {
            "operationId": "mergePullRequest",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "slug",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "pid",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "the PR was successfully merged"
              }
            }
          }
        }
      },
      "components": {
        "links": {
          "UserRepositories": {
            "operationId": "getRepositoriesByOwner",
            "parameters": {
              "username": "$response.body#/username"
            }
          },
          "UserRepository": {
            "operationId": "getRepository",
            "parameters": {
              "username": "$response.body#/owner/username",
              "slug": "$response.body#/slug"
            }
          },
          "RepositoryPullRequests": {
            "operationId": "getPullRequestsByRepository",
            "parameters": {
              "username": "$response.body#/owner/username",
              "slug": "$response.body#/slug"
            }
          },
          "PullRequestMerge": {
            "operationId": "mergePullRequest",
            "parameters": {
              "username": "$response.body#/author/username",
              "slug": "$response.body#/repository/slug",
              "pid": "$response.body#/id"
            }
          }
        },
        "schemas": {
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            }
          },
          "repository": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string"
              },
              "owner": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "pullrequest": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "repository": {
                "$ref": "#/components/schemas/repository"
              },
              "author": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        }
      }
    },
    {
      "openapi": "3.0.0",
      "info": {
        "title": "Uber API",
        "description": "Move your app forward with the Uber API",
        "version": "1.0.0"
      },
      "servers": [
        {
          "url": "https://api.uber.com/v1"
        }
      ],
      "paths": {
        "/products": {
          "get": {
            "summary": "Product Types",
            "description": "The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.",
            "parameters": [
              {
                "name": "latitude",
                "in": "query",
                "description": "Latitude component of location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              {
                "name": "longitude",
                "in": "query",
                "description": "Longitude component of location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            ],
            "security": [
              {
                "apikey": []
              }
            ],
            "tags": [
              "Products"
            ],
            "responses": {
              "200": {
                "description": "An array of products",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ProductList"
                    }
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "/estimates/price": {
          "get": {
            "summary": "Price Estimates",
            "description": "The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.<br><br>The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier.",
            "parameters": [
              {
                "name": "start_latitude",
                "in": "query",
                "description": "Latitude component of start location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              {
                "name": "start_longitude",
                "in": "query",
                "description": "Longitude component of start location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              {
                "name": "end_latitude",
                "in": "query",
                "description": "Latitude component of end location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              {
                "name": "end_longitude",
                "in": "query",
                "description": "Longitude component of end location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            ],
            "tags": [
              "Estimates"
            ],
            "responses": {
              "200": {
                "description": "An array of price estimates by product",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PriceEstimate"
                      }
                    }
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "/estimates/time": {
          "get": {
            "summary": "Time Estimates",
            "description": "The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.",
            "parameters": [
              {
                "name": "start_latitude",
                "in": "query",
                "description": "Latitude component of start location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              {
                "name": "start_longitude",
                "in": "query",
                "description": "Longitude component of start location.",
                "required": true,
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              {
                "name": "customer_uuid",
                "in": "query",
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "Unique customer identifier to be used for experience customization."
              },
              {
                "name": "product_id",
                "in": "query",
                "schema": {
                  "type": "string"
                },
                "description": "Unique identifier representing a specific product for a given latitude & longitude."
              }
            ],
            "tags": [
              "Estimates"
            ],
            "responses": {
              "200": {
                "description": "An array of products",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "/me": {
          "get": {
            "summary": "User Profile",
            "description": "The User Profile endpoint returns information about the Uber user that has authorized with the application.",
            "tags": [
              "User"
            ],
            "responses": {
              "200": {
                "description": "Profile information for a user",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Profile"
                    }
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "/history": {
          "get": {
            "summary": "User Activity",
            "description": "The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.",
            "parameters": [
              {
                "name": "offset",
                "in": "query",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Offset the list of returned results by this amount. Default is zero."
              },
              {
                "name": "limit",
                "in": "query",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Number of items to retrieve. Default is 5, maximum is 100."
              }
            ],
            "tags": [
              "User"
            ],
            "responses": {
              "200": {
                "description": "History information for the given user",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Activities"
                    }
                  }
                }
              },
              "default": {
                "description": "Unexpected error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "securitySchemes": {
          "apikey": {
            "type": "apiKey",
            "name": "server_token",
            "in": "query"
          }
        },
        "schemas": {
          "Product": {
            "properties": {
              "product_id": {
                "type": "string",
                "description": "Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles."
              },
              "description": {
                "type": "string",
                "description": "Description of product."
              },
              "display_name": {
                "type": "string",
                "description": "Display name of product."
              },
              "capacity": {
                "type": "integer",
                "description": "Capacity of product. For example, 4 people."
              },
              "image": {
                "type": "string",
                "description": "Image URL representing the product."
              }
            }
          },
          "ProductList": {
            "properties": {
              "products": {
                "description": "Contains the list of products",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "PriceEstimate": {
            "properties": {
              "product_id": {
                "type": "string",
                "description": "Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles"
              },
              "currency_code": {
                "type": "string",
                "description": "[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code."
              },
              "display_name": {
                "type": "string",
                "description": "Display name of product."
              },
              "estimate": {
                "type": "string",
                "description": "Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI."
              },
              "low_estimate": {
                "type": "number",
                "description": "Lower bound of the estimated price."
              },
              "high_estimate": {
                "type": "number",
                "description": "Upper bound of the estimated price."
              },
              "surge_multiplier": {
                "type": "number",
                "description": "Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier."
              }
            }
          },
          "Profile": {
            "properties": {
              "first_name": {
                "type": "string",
                "description": "First name of the Uber user."
              },
              "last_name": {
                "type": "string",
                "description": "Last name of the Uber user."
              },
              "email": {
                "type": "string",
                "description": "Email address of the Uber user"
              },
              "picture": {
                "type": "string",
                "description": "Image URL of the Uber user."
              },
              "promo_code": {
                "type": "string",
                "description": "Promo code of the Uber user."
              }
            }
          },
          "Activity": {
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Unique identifier for the activity"
              }
            }
          },
          "Activities": {
            "properties": {
              "offset": {
                "type": "integer",
                "format": "int32",
                "description": "Position in pagination."
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "Number of items to retrieve (100 max)."
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "Total number of items available."
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "Error": {
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "fields": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "Salesforce-Aficiones",
        "description": "Gestion de aficiones con Salesforce",
        "version": "v1.0",
        "x-ibm-name": "salesforce-aficiones"
      },
      "schemes": [
        "https"
      ],
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "basePath": "/SALESFORCE/rest/services",
      "host": "pre.cajamar.es:6454",
      "paths": {
        "/GetAficionesPersona(PERS_NUME='{id_persona}')": {
          "get": {
            "summary": "Obtiene las aficiones asociadas a una persona",
            "parameters": [
              {
                "name": "id_persona",
                "description": "Numero de persona",
                "in": "path",
                "type": "string",
                "required": true
              }
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Respuesta ante una finalizacion correcta de la operacion",
                "schema": {
                  "$ref": "#/definitions/GetAficionesPersona"
                }
              },
              "default": {
                "description": "Error",
                "schema": {
                  "$ref": "#/definitions/ErrorResp"
                }
              }
            }
          }
        }
      },
      "definitions": {
        "aficion-persona": {
          "type": "object",
          "required": [
            "COD_TIEMPO_ID",
            "PERS_NUME",
            "COD_AFICION",
            "DESC_AFICION",
            "GESTOR",
            "GESTOR_NOMB"
          ],
          "properties": {
            "COD_TIEMPO_ID": {
              "description": "Fecha de alta",
              "type": "string"
            },
            "PERS_NUME": {
              "description": "Numero de persona",
              "type": "string"
            },
            "COD_AFICION": {
              "description": "Codigo de aficion",
              "type": "string"
            },
            "DESC_AFICION": {
              "description": "Descripcion de aficion",
              "type": "string"
            },
            "GESTOR": {
              "description": "Codigo de gestor",
              "type": "string"
            },
            "GESTOR_NOMB": {
              "description": "Nombre de gestor",
              "type": "string"
            }
          }
        },
        "GetAficionesPersona": {
          "type": "object",
          "properties": {
            "@odata.context": {
              "description": "Contexto OData",
              "type": "string"
            },
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aficion-persona"
              }
            }
          }
        },
        "OdataError": {
          "type": "object",
          "properties": {
            "Code": {
              "description": "Codigo de error",
              "type": "string"
            },
            "Message": {
              "description": "Mensaje de error",
              "type": "string"
            }
          }
        },
        "SysError": {
          "type": "object",
          "properties": {
            "code": {
              "description": "Codigo de error",
              "type": "string"
            },
            "message": {
              "description": "Mensaje de error",
              "type": "string"
            }
          }
        },
        "ErrorResp": {
          "type": "object",
          "properties": {
            "odata.error": {
              "$ref": "#/definitions/OdataError"
            },
            "error": {
              "$ref": "#/definitions/SysError"
            }
          }
        }
      },
      "x-ibm-configuration": {
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "gatewayscript": {
                "title": "gatewayscript",
                "version": "1.0.0",
                "source": "console.error(\"Anything\")"
              }
            }
          ],
          "catch": []
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "no-operations",
        "title": "No Operations API",
        "version": "1.0.0",
        "description": "This API has no operations at all",
        "contact": {
          "name": "Nobody",
          "email": "nobody@example.com",
          "url": "https://none.example.com"
        }
      },
      "schemes": [
        "https"
      ],
      "host": "$(catalog.host)",
      "basePath": "/testapi",
      "consumes": [
        "application/xml",
        "application/json"
      ],
      "produces": [
        "application/xml",
        "application/json"
      ],
      "securityDefinitions": {
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "security": [
        {
          "clientIdHeader": []
        }
      ],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "invoke": {
                "target-url": "$(target-url)$(request.path)"
              }
            }
          ]
        },
        "phase": "realized"
      },
      "paths": {},
      "definitions": {
        "noop": {
          "properties": {
            "noop": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "description": "This is a noop"
        }
      },
      "tags": [],
      "parameters": {
        "noop": {
          "name": "noop",
          "required": false,
          "in": "body",
          "schema": {
            "$ref": "#/definitions/noop"
          }
        }
      }
    },
    {
      "openapi": "3.0.0",
      "info": {
        "version": "1.0.0",
        "title": "Empty Path Item",
        "description": "An API demonstrating a path item object that is empty which is supported per the OAI v3 spec",
        "termsOfService": "https://example.com/terms",
        "contact": {
          "name": "Empty",
          "email": "empty@example.com",
          "url": "http://empty-path.example.com"
        }
      },
      "servers": [
        {
          "url": "http://example.com/empty"
        }
      ],
      "paths": {
        "/users": {},
        "/me": {
          "get": {
            "description": "Gets your own account\n",
            "operationId": "getMe",
            "parameters": [],
            "responses": {
              "200": {
                "description": "Me response",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Me"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Me": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Me"
              },
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            ]
          },
          "NewPet": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "QuickCarQuote",
        "description": "",
        "x-ibm-name": "quickcarquote",
        "version": "1.0.0"
      },
      "schemes": ["https"],
      "basePath": "/QuickCarQuote",
      "produces": ["application/xml"],
      "consumes": ["text/xml"],
      "securityDefinitions": {
        "clientID": {
          "type": "apiKey",
          "name": "X-IBM-Client-Id",
          "in": "header",
          "description": ""
        }
      },
      "security": [{
        "clientID": []
      }],
      "x-ibm-configuration": {
        "type": "wsdl",
        "wsdl-definition": {
          "service": "QuickCarQuote",
          "port": "QuickCarQuoteSOAP",
          "soap-version": "1.1"
        },
        "enforced": true,
        "testable": true,
        "phase": "realized"
      },
      "paths": {
        "/getQuote": {
          "post": {
            "summary": "Operation getQuote",
            "description": "",
            "operationId": "getQuote",
            "x-ibm-soap": {
              "soap-action": "http://apimtest.org/QuickCarQuote/getQuote",
              "soap-operation": "{http://apimtest.org/QuickCarQuote/}quoteParm"
            },
            "parameters": [{
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/getQuoteInput"
              }
            }],
            "responses": {
              "default": {
                "description": "",
                "schema": {
                  "$ref": "#/definitions/getQuoteOutput"
                }
              }
            }
          }
        }
      },
      "definitions": {
        "Security": {
          "xml": {
            "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
            "prefix": "wsse"
          },
          "type": "object",
          "properties": {
            "UsernameToken": {
              "xml": {
                "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                "prefix": "wsse"
              },
              "type": "object",
              "properties": {
                "Username": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                    "prefix": "wsse"
                  },
                  "type": "string"
                },
                "Password": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                    "prefix": "wsse"
                  },
                  "type": "string"
                },
                "Nonce": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                    "prefix": "wsse"
                  },
                  "type": "string",
                  "properties": {
                    "EncodingType": {
                      "xml": {
                        "namespace": "",
                        "attribute": true
                      },
                      "type": "string"
                    }
                  }
                },
                "Created": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd",
                    "prefix": "wsu"
                  },
                  "type": "string"
                }
              }
            },
            "Timestamp": {
              "xml": {
                "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd",
                "prefix": "wsu"
              },
              "type": "object",
              "properties": {
                "Created": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd",
                    "prefix": "wsu"
                  },
                  "type": "string"
                },
                "Expires": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd",
                    "prefix": "wsu"
                  },
                  "type": "string"
                },
                "Id": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd",
                    "prefix": "wsu",
                    "attribute": true
                  },
                  "type": "string"
                }
              }
            }
          }
        },
        "getQuoteInput": {
          "type": "object",
          "properties": {
            "Envelope": {
              "xml": {
                "prefix": "soapenv",
                "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
              },
              "type": "object",
              "properties": {
                "Header": {
                  "$ref": "#/definitions/getQuoteHeader"
                },
                "Body": {
                  "type": "object",
                  "properties": {
                    "quoteParm": {
                      "$ref": "#/definitions/quoteParm_impl"
                    }
                  },
                  "required": ["quoteParm"]
                }
              },
              "required": ["Body"]
            }
          },
          "required": ["Envelope"],
          "example": "\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n <soapenv:Header>\n  <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n   <wsse:UsernameToken>\n    <wsse:Username>string</wsse:Username>\n    <wsse:Password>string</wsse:Password>\n    <wsse:Nonce EncodingType=\"string\">string</wsse:Nonce>\n    <wsu:Created>string</wsu:Created>\n   </wsse:UsernameToken>\n   <wsu:Timestamp wsu:Id=\"string\">\n    <wsu:Created>string</wsu:Created>\n    <wsu:Expires>string</wsu:Expires>\n   </wsu:Timestamp>\n  </wsse:Security>\n </soapenv:Header>\n <soapenv:Body>\n  <impl:quoteParm xmlns:impl=\"http://apimtest.org/QuickCarQuote/\"><!-- mandatory -->\n   <riskLevel><!-- mandatory -->string</riskLevel>\n  </impl:quoteParm>\n </soapenv:Body>\n</soapenv:Envelope>"
        },
        "getQuoteHeader": {
          "type": "object",
          "properties": {
            "Security": {
              "$ref": "#/definitions/Security"
            }
          }
        },
        "getQuoteOutput": {
          "type": "object",
          "properties": {
            "Envelope": {
              "xml": {
                "prefix": "soapenv",
                "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
              },
              "type": "object",
              "properties": {
                "Body": {
                  "type": "object",
                  "properties": {
                    "quoteRet": {
                      "$ref": "#/definitions/quoteRet_impl"
                    }
                  }
                }
              },
              "required": ["Body"]
            }
          },
          "required": ["Envelope"],
          "example": "\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n <soapenv:Body>\n  <impl:quoteRet xmlns:impl=\"http://apimtest.org/QuickCarQuote/\">3.14</impl:quoteRet>\n </soapenv:Body>\n</soapenv:Envelope>"
        },
        "quoteParm_impl": {
          "xml": {
            "namespace": "http://apimtest.org/QuickCarQuote/",
            "prefix": "impl"
          },
          "type": "object",
          "properties": {
            "riskLevel": {
              "type": "string",
              "xml": {
                "namespace": "",
                "prefix": ""
              }
            }
          },
          "required": ["riskLevel"],
          "example": "\n<impl:quoteParm xmlns:impl=\"http://apimtest.org/QuickCarQuote/\">\n <riskLevel><!-- mandatory -->string</riskLevel>\n</impl:quoteParm>"
        },
        "quoteRet_impl": {
          "xml": {
            "namespace": "http://apimtest.org/QuickCarQuote/",
            "prefix": "impl"
          },
          "type": "number",
          "format": "float",
          "example": "\n<impl:quoteRet>3.14\n</impl:quoteRet>"
        }
      },
      "x-ibm-endpoints": [{
        "endpointUrl": "https://example.com/demo",
        "type": ["development", "production"]
      }]
    },
    {
      "swagger": "2.0",
      "info": {
        "version": "1.1",
        "title": "Twitter REST API",
        "x-ibm-name": "twitter-rest-api",
        "description": "Retrieved from http://editor.swagger.io/ on 29th Feb 2016. \nAssembly implementation added on 29th Feb 2016. \n\nNote that this API is NOT enforced and CAN NOT be invoked."
      },
      "host": "api.twitter.com",
      "basePath": "/1.1",
      "schemes": [
        "http",
        "https"
      ],
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "oauth": {
          "type": "oauth2",
          "flow": "implicit",
          "authorizationUrl": "https://twitter.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token",
          "scopes": {
            "basic": "to read any and all data related to twitter\n"
          }
        }
      },
      "security": [
        {
          "oauth": [
            "basic"
          ]
        }
      ],
      "paths": {
        "/statuses/mentions_timeline": {
          "get": {
            "description": "Returns the 20 most recent mentions for the authenticating user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "count",
                "in": "query",
                "description": "Specifies the number of tweets to try and retrieve",
                "required": false,
                "type": "string"
              },
              {
                "name": "since_id",
                "in": "query",
                "description": "Returns result with an ID greater than the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Returns results with an ID less than or equal to the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              },
              {
                "name": "contributor_details",
                "in": "query",
                "description": "This parameter enhances the contributors element of the status response",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "The entities node will be disincluded when set to false",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tweets"
                  }
                }
              }
            }
          }
        },
        "/statuses/user_timeline": {
          "get": {
            "description": "Returns a collection of the most recent Tweets posted by the User",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "count",
                "in": "query",
                "description": "Specifies the number of tweets to try and retrieve",
                "required": false,
                "type": "string"
              },
              {
                "name": "since_id",
                "in": "query",
                "description": "Returns result with an ID greater than the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Returns results with an ID less than or equal to the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              },
              {
                "name": "exclude_replies",
                "in": "query",
                "description": "This paramters will prevent from appearing in the returned timeline",
                "required": false,
                "type": "boolean"
              },
              {
                "name": "contributor_details",
                "in": "query",
                "description": "This paramters enhances the contributors element of the status response to include the screen_name of the contributor",
                "required": false,
                "type": "boolean"
              },
              {
                "name": "include_rts",
                "in": "query",
                "description": "When set to false, the timeline will strip any native retweet",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tweets"
                  }
                }
              }
            }
          }
        },
        "/statuses/home_timeline": {
          "get": {
            "description": "Returns a collection of the most recent Tweets",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "since_id",
                "in": "query",
                "description": "Returns result with an ID greater than the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Returns results with an ID less than or equal to the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              },
              {
                "name": "exclude_replies",
                "in": "query",
                "description": "This paramters will prevent from appearing in the returned timeline",
                "required": false,
                "type": "boolean"
              },
              {
                "name": "contributor_details",
                "in": "query",
                "description": "This paramters enhances the contributors element of the status response to include the screen_name of the contributor",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tweets"
                  }
                }
              }
            }
          }
        },
        "/statuses/retweets/{id}": {
          "post": {
            "description": "Retweens a tweet",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "The numerical ID of the desired status",
                "required": true,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Tweets"
                }
              }
            }
          }
        },
        "/statuses/show/{id}": {
          "get": {
            "description": "Retruns a single Tweet",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "The numerical ID of the desired status",
                "required": true,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_my_retweet",
                "in": "query",
                "description": "When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating",
                "required": true,
                "type": "string"
              },
              {
                "name": "include_entities",
                "type": "string",
                "in": "query",
                "description": "The entities node will be disincluded when set to false",
                "required": false
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Tweets"
                }
              }
            }
          }
        },
        "/statuses/destroy/{id}": {
          "post": {
            "description": "Destroys the status specified by the required ID parameter",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "The numerical ID of the desired status",
                "required": true,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Tweets"
                }
              }
            }
          }
        },
        "/statuses/update": {
          "post": {
            "description": "Updates the authenticating user's status",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "description": "The text of your status update",
                "required": true,
                "type": "string"
              },
              {
                "name": "in_reply_to_status_id",
                "in": "query",
                "description": "The ID of an existing status",
                "required": false,
                "type": "string"
              },
              {
                "name": "lat",
                "in": "query",
                "description": "The latitude of the location",
                "required": false,
                "type": "string"
              },
              {
                "name": "long",
                "in": "query",
                "description": "The longitude of the location",
                "required": false,
                "type": "string"
              },
              {
                "name": "place_id",
                "in": "query",
                "description": "A place in the world",
                "required": false,
                "type": "string"
              },
              {
                "name": "display_coordinates",
                "in": "query",
                "description": "Whether or not to put a pin on the exact coordinates a tweet",
                "required": false,
                "type": "string"
              },
              {
                "name": "trim_user",
                "in": "query",
                "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Tweets"
                }
              },
              "403": {
                "description": "Error"
              }
            }
          }
        },
        "/statuses/oembed": {
          "get": {
            "description": "Returns information allowing the creation of an embedded representation",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "query",
                "description": "The tweet/status id to return embed code for",
                "required": true,
                "type": "string"
              },
              {
                "name": "url",
                "in": "query",
                "description": "The encoded URL of the Tweet status to be embedded",
                "required": true,
                "type": "string"
              },
              {
                "name": "maxwidth",
                "in": "query",
                "description": "The maximum width in pixels that the embed should be rendered at",
                "required": false,
                "type": "string"
              },
              {
                "name": "hide_media",
                "in": "query",
                "description": "Specifies whether the embedded tweet should automatically show the original message in the case that the embedded Tweet is a reply",
                "required": false,
                "type": "string"
              },
              {
                "name": "hide_thread",
                "in": "query",
                "description": "Specifies whether the embedded Tweet html should include a 'script' element pointing to widgets.js",
                "required": false,
                "type": "string"
              },
              {
                "name": "align",
                "in": "query",
                "description": "Specifies whether the embedded Tweet should be left aligned",
                "required": false,
                "type": "string"
              },
              {
                "name": "related",
                "in": "query",
                "description": "A value for the TWT related parameters",
                "required": false,
                "type": "string"
              },
              {
                "name": "lang",
                "in": "query",
                "description": "Languages code for the rendered embed",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Tweets"
                }
              }
            }
          }
        },
        "/lists/list": {
          "get": {
            "description": "Return all lists the authenticating or specified user subscribes to, including their own.",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to return results for",
                "required": true,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The ID of the user for whom to return results for",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Lists"
                  }
                }
              }
            }
          }
        },
        "/lists/statuses": {
          "get": {
            "description": "Returns a timeline of tweets authored by memebers of the specified list",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list by its slug instead of its numerical id",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "since_id",
                "in": "query",
                "description": "Returns results with an ID greater than the sepcified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Returns results with an ID less than or equal to the specified ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "count",
                "in": "query",
                "description": "Specifies the number of results to retrieve per page",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "Entities are ON by default",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_rts",
                "in": "query",
                "description": "When set to either true, t or 1, the list timeline will contain native retweets in addition to the standard stream of tweets",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tweets"
                  }
                }
              }
            }
          }
        },
        "/lists/members/destroy": {
          "get": {
            "description": "Returns the list of memebers destroy",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list by its slug instrad of its numerical id",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The is of the user who wons the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success"
              }
            }
          }
        },
        "/lists/memberships": {
          "get": {
            "description": "Returns the lists of the specified user has been added to",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to return results for",
                "required": false,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to return results for",
                "required": false,
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "Breaks the results into pages",
                "required": false,
                "type": "string"
              },
              {
                "name": "filter_to_owned_lists",
                "in": "query",
                "description": "When set to true, t or 1, will return just lists the authenticating user owns",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Cursor_lists"
                }
              }
            }
          }
        },
        "/lists/subscribers": {
          "get": {
            "description": "Returns the subscribers of the specified list",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list by its slug insted of its numerical id",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "the screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "Breaks the results into pages",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "Wehn set to either true, t or 1",
                "required": false,
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "When set to either true, t or 1",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Cursor_lists"
                }
              }
            }
          }
        },
        "/lists/subscribers/create": {
          "post": {
            "description": "Subscribes the authenticated user to the specified list",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "the screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Lists"
                }
              }
            }
          }
        },
        "/lists/subscribers/show": {
          "get": {
            "description": "Check if the specified user is a subscriber of the specified list",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The is of the user who wons the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "Wehn set to either true, t or 1",
                "required": false,
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "When set to either true, t or 1",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/lists/subscribers/destroy": {
          "get": {
            "description": "Returns list of subscribers destroy",
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "the screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success"
              }
            }
          }
        },
        "/lists/members/create_all": {
          "get": {
            "description": "Returns lists of members create_all",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "the screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success"
              }
            }
          }
        },
        "/list/members/show": {
          "get": {
            "description": "Check if the specified user is a member of the specified list",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "Wehn set to either true, t or 1",
                "required": false,
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "When set to either true, t or 1",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/list/members": {
          "get": {
            "description": "Returns the members of the specified list",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "Wehn set to either true, t or 1",
                "required": false,
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "When set to either true, t or 1",
                "required": false,
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "Breaks the results into pages",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/list/members/create": {
          "post": {
            "description": "Returns list of members create",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success"
              }
            }
          }
        },
        "/lists/destroy": {
          "post": {
            "description": "Returns list of destroy",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Lists"
                }
              }
            }
          }
        },
        "/lists/update": {
          "post": {
            "description": "Returns lists of updates",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "name",
                "in": "query",
                "description": "The name for the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "mode",
                "in": "query",
                "description": "Whether your list is public or private",
                "required": false,
                "type": "string"
              },
              {
                "name": "description",
                "in": "query",
                "description": "The description to give the list",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success"
              }
            }
          }
        },
        "/lists/create": {
          "post": {
            "description": "Returns list of create",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "name",
                "in": "query",
                "description": "The name for the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "mode",
                "in": "query",
                "description": "Whether your list is public or private",
                "required": false,
                "type": "string"
              },
              {
                "name": "description",
                "in": "query",
                "description": "The description to give the list",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Lists"
                }
              }
            }
          }
        },
        "/lists/show": {
          "get": {
            "description": "Returns list of show",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Lists"
                }
              }
            }
          }
        },
        "/lists/subscriptions": {
          "get": {
            "description": "Returns list of subscriptions",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user",
                "required": false,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to return results for",
                "required": false,
                "type": "string"
              },
              {
                "name": "count",
                "in": "query",
                "description": "The amount of results to return per page",
                "required": false,
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "Breaks the results into pages",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Cursor_lists"
                }
              }
            }
          }
        },
        "/list/members/destroy_all": {
          "get": {
            "description": "Returns lists of destroy all",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "list_id",
                "in": "query",
                "description": "The numerical id of the list",
                "required": true,
                "type": "string"
              },
              {
                "name": "slug",
                "in": "query",
                "description": "You can identify a list being requested by a slug",
                "required": true,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The id of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "The screen name of the user for whom to remove from the list",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_screen_name",
                "in": "query",
                "description": "The screen name of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              },
              {
                "name": "owner_id",
                "in": "query",
                "description": "The user ID of the user who owns the list being requested by a slug",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Cursor_lists"
                }
              }
            }
          }
        },
        "/direct_messages/sent": {
          "get": {
            "description": "return 20 most recent direct messages sent",
            "parameters": [
              {
                "name": "since_id",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "count",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "page",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Messages"
                  }
                }
              }
            }
          }
        },
        "/direct_messages/show": {
          "get": {
            "description": "returns a single direct message specified by an id",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "query",
                "description": "ID of direct message",
                "type": "string",
                "required": true
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Messages"
                  }
                }
              }
            }
          }
        },
        "/search/tweets": {
          "get": {
            "description": "returns collection of relevant Tweets matching query",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "q",
                "in": "query",
                "description": "URL-encoded search query of 500 characters max",
                "type": "string",
                "required": true
              },
              {
                "name": "geocode",
                "in": "query",
                "description": "returns tweets by users located within given radius",
                "type": "string",
                "required": false
              },
              {
                "name": "lang",
                "in": "query",
                "description": "restricts tweets to a given language",
                "type": "string",
                "required": false
              },
              {
                "name": "locale",
                "in": "query",
                "description": "language of query you are sending",
                "type": "string",
                "required": false
              },
              {
                "name": "result_type",
                "in": "query",
                "description": "specifies type of search results you prefer",
                "type": "string",
                "required": false
              },
              {
                "name": "count",
                "in": "query",
                "description": "number of tweets to return",
                "type": "string"
              },
              {
                "name": "until",
                "in": "query",
                "description": "returns tweets created before given date",
                "type": "string"
              },
              {
                "name": "since_id",
                "in": "query",
                "description": "return results with ID greater than specified",
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "returns results with an ID less than/equal to specified ID",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "callback",
                "in": "query",
                "description": "response will use the callback with given name",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tweets"
                  }
                }
              }
            }
          }
        },
        "/saved_searches/list": {
          "get": {
            "description": "Returns the authenticated user's saved search queries",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Query"
                  }
                }
              }
            }
          }
        },
        "/saved_searches/show/{id}": {
          "get": {
            "description": "Retrieve the information for the saved search represented by the given id",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "The id of the saved search",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Query"
                }
              }
            }
          }
        },
        "/saved_searches/create": {
          "post": {
            "description": "Create a new saved search for the authenticated user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "query",
                "in": "query",
                "description": "The query of the search the user would like to save",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Query"
                }
              }
            }
          }
        },
        "/saved_searches/destroy/{id}": {
          "post": {
            "description": "Destroy a saved search for the authenticating user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "The id of the saved search",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Query"
                }
              }
            }
          }
        },
        "/direct_messages": {
          "get": {
            "description": "return 20 most recent direct messages sent to user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "since_id",
                "in": "query",
                "description": "return results with ID greater than specified",
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "returns results with an ID less than/equal to specified ID",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to include status",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Messages"
                  }
                }
              }
            }
          }
        },
        "/direct_messages/destroy": {
          "post": {
            "description": "destroys direct messages specified in required ID",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "query",
                "description": "ID of direct message to delete",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Messages"
                }
              }
            }
          }
        },
        "/direct_messages/new": {
          "post": {
            "description": "sends a new direct message to specified user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "user_id",
                "in": "query",
                "description": "description",
                "type": "string",
                "required": true
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user receiving message",
                "type": "string"
              },
              {
                "name": "text",
                "in": "query",
                "description": "text of your direct message",
                "type": "string",
                "required": true
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Messages"
                }
              }
            }
          }
        },
        "/friends/ids": {
          "get": {
            "description": "returns a cursored collection of user IDs followed by user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user for whom to return results for",
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user for whom to return results for",
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "causes list of connections to be broken in pages",
                "type": "string"
              },
              {
                "name": "stringify_ids",
                "in": "query",
                "description": "IDs converted to strings",
                "type": "string"
              },
              {
                "name": "count",
                "in": "query",
                "description": "number of IDs to attempt retrieval of",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cursor_ids"
                }
              }
            }
          }
        },
        "/followers/ids": {
          "get": {
            "description": "returns a cursored collection of user IDs following the user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user for whom to return results for",
                "type": "string"
              },
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user for whom to return results for",
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "causes list of connections to be broken in pages",
                "type": "string"
              },
              {
                "name": "stringify_ids",
                "in": "query",
                "description": "IDs converted to strings",
                "type": "string"
              },
              {
                "name": "count",
                "in": "query",
                "description": "number of IDs to attempt retrieval of",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cursor_ids"
                }
              }
            }
          }
        },
        "/friendships/incoming": {
          "get": {
            "description": "returns collection of IDs of users with pending follow request",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "cursor",
                "in": "query",
                "description": "causes list of connections to be broken in pages",
                "type": "string"
              },
              {
                "name": "stringify_ids",
                "in": "query",
                "description": "IDs converted to strings",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cursor_ids"
                }
              }
            }
          }
        },
        "/friendships/outgoing": {
          "get": {
            "description": "returns collection of IDs of users with pending follow request from the user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "cursor",
                "in": "query",
                "description": "causes list of connections to be broken in pages",
                "type": "string"
              },
              {
                "name": "stringify_ids",
                "in": "query",
                "description": "IDs converted to strings",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cursor_ids"
                }
              }
            }
          }
        },
        "/friendships/create": {
          "post": {
            "description": "allows users to follow user sepcified by ID",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user for whom to befriend",
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user for whom to befriend",
                "type": "string"
              },
              {
                "name": "follow",
                "in": "query",
                "description": "enable notifications for target user",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/friendships/destroy": {
          "post": {
            "description": "allows user to unfollow user psecified by ID",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user for whom to befriend",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user for whom to befriend",
                "type": "string",
                "required": true
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/friendships/update": {
          "post": {
            "description": "Allows one to enable or disable settings for specified user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user for whom to befriend",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user for whom to befriend",
                "type": "string",
                "required": true
              },
              {
                "name": "device",
                "in": "query",
                "description": "enable/disable device notifications for user",
                "type": "string",
                "required": true
              },
              {
                "name": "retweets",
                "in": "query",
                "description": "enable/disable retweets from target user",
                "type": "string",
                "required": true
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Friendship"
                }
              }
            }
          }
        },
        "/friendships/show": {
          "get": {
            "description": "returns detailed info about relationship between two users",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "source_id",
                "in": "query",
                "description": "user id of subject user",
                "type": "string"
              },
              {
                "name": "source_screen_name",
                "in": "query",
                "description": "screen_name of subject user",
                "type": "string"
              },
              {
                "name": "target_id",
                "in": "query",
                "description": "user id of target user",
                "type": "string",
                "required": true
              },
              {
                "name": "target_screen_name",
                "in": "query",
                "description": "screen name of target user",
                "type": "string",
                "required": true
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Friendship"
                }
              }
            }
          }
        },
        "/account/settings": {
          "get": {
            "summary": "returns settings for user",
            "description": "returns settings for user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          },
          "post": {
            "summary": "updates user's settings",
            "description": "updates user's settings",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "trend_location_woeid",
                "in": "query",
                "description": "the Yahoo! Where On Earth ID to user as defaul tend location",
                "type": "string"
              },
              {
                "name": "sleep_time_enabled",
                "in": "query",
                "description": "enables/disables sleep time, silencing notifications",
                "type": "string"
              },
              {
                "name": "start_sleep_time",
                "in": "query",
                "description": "the hour that sleep time should begin if enabled",
                "type": "string"
              },
              {
                "name": "end_sleep_time",
                "in": "query",
                "description": "the hour that sleep time should end if enabled",
                "type": "string"
              },
              {
                "name": "time_zone",
                "in": "query",
                "description": "timezone dates and times should be displayed in",
                "type": "string"
              },
              {
                "name": "lang",
                "in": "query",
                "description": "language which Twitter should render in for the user",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          }
        },
        "/account/update_delivery_device": {
          "post": {
            "summary": "sets which device Twitter delivers updates to for user",
            "description": "sets which device Twitter delivers updates to for user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "device",
                "in": "query",
                "description": "must be one of sms, none",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          }
        },
        "/account/update_profile": {
          "post": {
            "summary": "sets values that users ar eable to set under Account tab",
            "description": "sets values that users ar eable to set under Account tab",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "name",
                "in": "query",
                "description": "full name of profile",
                "type": "string"
              },
              {
                "name": "url",
                "in": "query",
                "description": "url associated with profile",
                "type": "string"
              },
              {
                "name": "location",
                "in": "query",
                "description": "city or country describing where user of account is.",
                "type": "string"
              },
              {
                "name": "description",
                "in": "query",
                "description": "a description of user owning account",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to include statuses in response",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          }
        },
        "/account/update_profile_background_image": {
          "post": {
            "summary": "updates user's profile background image",
            "description": "updates user's profile background image",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "consumes": [
              "multipart/form-data"
            ],
            "parameters": [
              {
                "name": "tile",
                "in": "query",
                "description": "whether or not to tile background image",
                "type": "string"
              },
              {
                "name": "use",
                "in": "query",
                "description": "display background image or not",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to include status in returned user objects",
                "type": "string"
              },
              {
                "name": "file",
                "in": "formData",
                "description": "image to replace background image of profile",
                "required": true,
                "type": "file"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          }
        },
        "/account/update_profile_colors": {
          "post": {
            "summary": "sets one or more hex values that controls color scheme",
            "description": "sets one or more hex values that controls color scheme",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "profile_background_color",
                "in": "query",
                "description": "profile background color",
                "type": "string"
              },
              {
                "name": "profile_link_color",
                "in": "query",
                "description": "profile link color",
                "type": "string"
              },
              {
                "name": "profile_sidebar_border_color",
                "in": "query",
                "description": "profile sidebar's border color",
                "type": "string"
              },
              {
                "name": "profile_sidebar_fill_color",
                "in": "query",
                "description": "profile's sidebar background color",
                "type": "string"
              },
              {
                "name": "profile_text_color",
                "in": "query",
                "description": "profile text color",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to include statuses",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          }
        },
        "/account/update_profile_image": {
          "post": {
            "summary": "updates user's profile image",
            "description": "updates user's profile image",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "consumes": [
              "multipart/form-data"
            ],
            "parameters": [
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to include statuses",
                "type": "string"
              },
              {
                "name": "image",
                "in": "formData",
                "description": "image to be set as profile image",
                "type": "file",
                "required": true
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Settings"
                }
              }
            }
          }
        },
        "/blocks/list": {
          "get": {
            "summary": "disallows retweets and device notifications from a user",
            "description": "disallows retweets and device notifications from a user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to include statuses in response",
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "breaks block of user to be broken up into pages",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cursor_users"
                }
              }
            }
          }
        },
        "/blocks/ids": {
          "get": {
            "summary": "returns array of numeric user ids of blocked users",
            "description": "returns array of numeric user ids of blocked users",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "stringify_ids",
                "in": "query",
                "description": "returns array of numeric IDs as string IDs",
                "type": "string"
              },
              {
                "name": "cursor",
                "in": "query",
                "description": "breaks up block of user IDs into pages",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cursor_users"
                }
              }
            }
          }
        },
        "/blocks/create": {
          "post": {
            "summary": "blocks the specified user",
            "description": "blocks the specified user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user to be blocked",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user to be blocked",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to skip statuses",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/blocks/destroy": {
          "post": {
            "summary": "un-blocks the specified user",
            "description": "un-blocks the specified user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user to be un-blocked",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user to be un-blocked",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to skip statuses",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/users/lookup": {
          "get": {
            "summary": "returns fully-hydrated user objects up to 100",
            "description": "returns fully-hydrated user objects up to 100",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user to lookup",
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user to lookup",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Users"
                  }
                }
              }
            }
          }
        },
        "/users/show": {
          "get": {
            "summary": "returns a variety of info about specified user",
            "description": "returns a variety of info about specified user",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user to be shown",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user to be shown",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/users/search": {
          "get": {
            "summary": "simple relevance-based user search",
            "description": "simple relevance-based user search",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "q",
                "in": "query",
                "description": "the search query to run against people search",
                "type": "string",
                "required": true
              },
              {
                "name": "page",
                "in": "query",
                "description": "specifies the page of results to receive",
                "type": "string"
              },
              {
                "name": "count",
                "in": "query",
                "description": "number of people to return per page",
                "type": "string"
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Users"
                  }
                }
              }
            }
          }
        },
        "/users/contributees": {
          "get": {
            "summary": "collection of users specified user can contribute to",
            "description": "collection of users specified user can contribute to",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user that is contributed to",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user to that is contributed to",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to skip statuses",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Users"
                  }
                }
              }
            }
          }
        },
        "/users/contributors": {
          "get": {
            "summary": "collection of users that can contribute to specified account",
            "description": "collection of users that can contribute to specified account",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "screen name of user contributing",
                "type": "string",
                "required": true
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "ID of user contributing",
                "type": "string",
                "required": true
              },
              {
                "name": "include_entities",
                "in": "query",
                "description": "whether or not to include entities",
                "type": "string"
              },
              {
                "name": "skip_status",
                "in": "query",
                "description": "whether or not to skip statuses",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Users"
                  }
                }
              }
            }
          }
        },
        "/geo/id/{place_id}": {
          "get": {
            "description": "Returns all the information about a know place",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "place_id",
                "in": "path",
                "description": "A place in the world",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Places"
                  }
                }
              }
            }
          }
        },
        "/geo/reverse_geoncode": {
          "get": {
            "description": "Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updatting a status",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "lat",
                "in": "query",
                "description": "The latitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "long",
                "in": "query",
                "description": "The longtitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "accuracy",
                "in": "query",
                "description": "A hint on region in which to search",
                "required": false,
                "type": "string"
              },
              {
                "name": "granularity",
                "in": "query",
                "description": "This is the minimal granularity of place types to return",
                "required": false,
                "type": "string"
              },
              {
                "name": "max_results",
                "in": "query",
                "description": "A hint as to the number of results to return",
                "required": false,
                "type": "string"
              },
              {
                "name": "callback",
                "in": "query",
                "description": "If supplied, the responses will use the JSON format with a callback of the given name",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Places"
                  }
                }
              }
            }
          }
        },
        "/geo/search": {
          "get": {
            "description": "Search for places that can be attached to a statuses/updates",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "lat",
                "in": "query",
                "description": "The latitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "long",
                "in": "query",
                "description": "The longtitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "query",
                "in": "query",
                "description": "Free-form text to match against while executing a geo-based query",
                "required": true,
                "type": "string"
              },
              {
                "name": "ip",
                "in": "query",
                "description": "An Ip address",
                "required": true,
                "type": "string"
              },
              {
                "name": "accuracy",
                "in": "query",
                "description": "A hint on region in which to search",
                "required": false,
                "type": "string"
              },
              {
                "name": "granularity",
                "in": "query",
                "description": "This is the minimal granularity of place types to return",
                "required": false,
                "type": "string"
              },
              {
                "name": "contained_within",
                "in": "query",
                "description": "This is the place_id which you would like to restrict the search results to",
                "required": false,
                "type": "string"
              },
              {
                "name": "attribute:street_address",
                "in": "query",
                "description": "This parameter searches for places which have this givven street address",
                "required": false,
                "type": "string"
              },
              {
                "name": "callback",
                "in": "query",
                "description": "If supplied, the responses will use the JSON format with a callback of the given name",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Places"
                  }
                }
              }
            }
          }
        },
        "/geo/similar_places": {
          "get": {
            "description": "Locates places near the given coordinates which are similar in name",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "lat",
                "in": "query",
                "description": "The latitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "long",
                "in": "query",
                "description": "The longtitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "name",
                "in": "query",
                "description": "The name a place is known as",
                "required": true,
                "type": "string"
              },
              {
                "name": "contained_within",
                "in": "query",
                "description": "This is the place_id which you would like to restrict the search results to",
                "required": false,
                "type": "string"
              },
              {
                "name": "attribute:street_address",
                "in": "query",
                "description": "This parameter searches for places which have this givven street address",
                "required": false,
                "type": "string"
              },
              {
                "name": "callback",
                "in": "query",
                "description": "If supplied, the responses will use the JSON format with a callback of the given name",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Places"
                  }
                }
              }
            }
          }
        },
        "/geo/places": {
          "get": {
            "description": "Create a new place object at the given latitude and logitude",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "lat",
                "in": "query",
                "description": "The latitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "long",
                "in": "query",
                "description": "The longtitude to search around",
                "required": true,
                "type": "string"
              },
              {
                "name": "name",
                "in": "query",
                "description": "The name a place is known as",
                "required": true,
                "type": "string"
              },
              {
                "name": "token",
                "in": "query",
                "description": "The token found in the response from geo/similar_places",
                "required": true,
                "type": "string"
              },
              {
                "name": "contained_within",
                "in": "query",
                "description": "This is the place_id which you would like to restrict the search results to",
                "required": false,
                "type": "string"
              },
              {
                "name": "attribute:street_address",
                "in": "query",
                "description": "This parameter searches for places which have this givven street address",
                "required": false,
                "type": "string"
              },
              {
                "name": "callback",
                "in": "query",
                "description": "If supplied, the responses will use the JSON format with a callback of the given name",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Places"
                }
              }
            }
          }
        },
        "/trends/place": {
          "get": {
            "description": "Returns the top 10 trending topics for a specific WOEID",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "query",
                "description": "The yahoo where on earch id",
                "required": true,
                "type": "string"
              },
              {
                "name": "exclude",
                "in": "query",
                "description": "Setting this equal to hashtages will remove all hashtages from the trends list",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/TrendInfo"
                }
              }
            }
          }
        },
        "/trends/available": {
          "get": {
            "description": "Returns the availability",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Location"
                  }
                }
              }
            }
          }
        },
        "/trends/closest": {
          "get": {
            "description": "Returns the location that Twitter has trending topic information for",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "lat",
                "in": "query",
                "description": "If provided with a long parameter the available trend locations wil be stored by distance",
                "required": true,
                "type": "string"
              },
              {
                "name": "long",
                "in": "query",
                "description": "If provided with a lat parameters the available trend locations will be sorted by distance",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Location"
                  }
                }
              }
            }
          }
        },
        "/users/report_spam": {
          "post": {
            "description": "Returna users report spam",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "screen_name",
                "in": "query",
                "description": "The ID or screen_name of the user you want to report as a spammer",
                "required": false,
                "type": "string"
              },
              {
                "name": "user_id",
                "in": "query",
                "description": "The ID of the user you want to report as a spammer",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Users"
                }
              }
            }
          }
        },
        "/help/configuration": {
          "get": {
            "description": "Returns the current configuration used by Twitter including twitter.com slugs which are not usernames",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Help_Config"
                }
              }
            }
          }
        },
        "/help/languages": {
          "get": {
            "description": "Returns the list of languages supported by Twitter along with the language code supported by Twitter",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Help_Language"
                  }
                }
              }
            }
          }
        },
        "/help/privacy": {
          "get": {
            "description": "Returns Twitter's privacy policy",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Help_Privacy"
                }
              }
            }
          }
        },
        "/help/tos": {
          "get": {
            "description": "Returns the Twitter Terms of Service",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "schema": {
                  "$ref": "#/definitions/Help_Tos"
                }
              }
            }
          }
        },
        "/application/rate_limit_status": {
          "get": {
            "description": "Returns the current rate limits for methods belonging to the specified resource families",
            "security": [
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "parameters": [
              {
                "name": "resources",
                "in": "query",
                "description": "A comma-separated list of resource families you want to know the current rate limit disposition for",
                "required": false,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Success"
              }
            }
          }
        }
      },
      "definitions": {
        "Tweets": {
          "type": "object",
          "properties": {
            "contributors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contributors"
              }
            },
            "coordinates": {
              "$ref": "#/definitions/Coordinates"
            },
            "created_at": {
              "type": "string"
            },
            "current_user_retweet": {
              "$ref": "#/definitions/Tweets"
            },
            "entities": {
              "$ref": "#/definitions/Entities"
            },
            "favorite_count": {
              "type": "integer"
            },
            "favorited": {
              "type": "boolean"
            },
            "filter_level": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "in_reply_to_screen_name": {
              "type": "string"
            },
            "in_reply_to_status_id": {
              "type": "integer"
            },
            "in_reply_to_status_id_str": {
              "type": "string"
            },
            "in_reply_to_user_id": {
              "type": "integer"
            },
            "in_reply_to_user_id_str": {
              "type": "string"
            },
            "lang": {
              "type": "string"
            },
            "place": {
              "$ref": "#/definitions/Places"
            },
            "possibly_sensitive": {
              "type": "boolean"
            },
            "quoted_status_id": {
              "type": "integer"
            },
            "quoted_status_id_str": {
              "type": "string"
            },
            "quoted_status": {
              "$ref": "#/definitions/Tweets"
            },
            "scopes": {
              "type": "object",
              "additionalProperties": {}
            },
            "retweet_count": {
              "type": "integer"
            },
            "retweeted": {
              "type": "boolean"
            },
            "retweeted_status": {
              "$ref": "#/definitions/Tweets"
            },
            "source": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "truncated": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/Users"
            },
            "withheld_copyright": {
              "type": "boolean"
            },
            "withheld_countries": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "withheld_scope": {
              "type": "string"
            }
          }
        },
        "Contributors": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "screen_name": {
              "type": "string"
            }
          }
        },
        "Coordinates": {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "type": {
              "type": "string"
            }
          }
        },
        "Users": {
          "type": "object",
          "properties": {
            "contributors_enabled": {
              "type": "boolean"
            },
            "created_at": {
              "type": "string"
            },
            "default_profile": {
              "type": "boolean"
            },
            "default_profile_image": {
              "type": "boolean"
            },
            "description": {
              "type": "string"
            },
            "entities": {
              "$ref": "#/definitions/Entities"
            },
            "favorites_count": {
              "type": "integer"
            },
            "follow_request_sent": {
              "type": "boolean"
            },
            "following": {
              "type": "boolean"
            },
            "followers_count": {
              "type": "integer"
            },
            "friends_count": {
              "type": "integer"
            },
            "geo_enabled": {
              "type": "boolean"
            },
            "id": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "is_translator": {
              "type": "boolean"
            },
            "lang": {
              "type": "string"
            },
            "listed_count": {
              "type": "integer"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "notifications": {
              "type": "boolean"
            },
            "profile_background_color": {
              "type": "string"
            },
            "profile_background_image_url": {
              "type": "string"
            },
            "profile_background_image_url_https": {
              "type": "string"
            },
            "profile_background_tile": {
              "type": "string"
            },
            "profile_banner_url": {
              "type": "string"
            },
            "profile_image_url": {
              "type": "string"
            },
            "profile_image_url_https": {
              "type": "string"
            },
            "profile_link_color": {
              "type": "string"
            },
            "profile_sidebar_border_color": {
              "type": "string"
            },
            "profile_sidebar_fill_color": {
              "type": "string"
            },
            "profile_text_color": {
              "type": "string"
            },
            "profile_use_background_image": {
              "type": "boolean"
            },
            "protected": {
              "type": "boolean"
            },
            "screen_name": {
              "type": "string"
            },
            "show_all_inline_media": {
              "type": "boolean"
            },
            "status": {
              "$ref": "#/definitions/Tweets"
            },
            "statuses_count": {
              "type": "integer"
            },
            "time_zone": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "utc_offset": {
              "type": "integer"
            },
            "verified": {
              "type": "boolean"
            },
            "withheld_in_countries": {
              "type": "string"
            },
            "withheld_scope": {
              "type": "string"
            }
          }
        },
        "Entities": {
          "type": "object",
          "properties": {
            "hashtags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hashtags"
              }
            },
            "media": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            },
            "urls": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/URL"
              }
            },
            "user_mentions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User_Mention"
              }
            }
          }
        },
        "Hashtags": {
          "type": "object",
          "properties": {
            "indices": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "text": {
              "type": "string"
            }
          }
        },
        "Media": {
          "type": "object",
          "properties": {
            "display_url": {
              "type": "string"
            },
            "expanded_url": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "indices": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "media_url": {
              "type": "string"
            },
            "media_url_https": {
              "type": "string"
            },
            "sizes": {
              "$ref": "#/definitions/Sizes"
            },
            "source_status_id": {
              "type": "integer"
            },
            "source_status_id_str": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "Size": {
          "type": "object",
          "properties": {
            "h": {
              "type": "integer"
            },
            "resize": {
              "type": "string"
            },
            "w": {
              "type": "integer"
            }
          }
        },
        "Sizes": {
          "type": "object",
          "properties": {
            "thumb": {
              "$ref": "#/definitions/Size"
            },
            "large": {
              "$ref": "#/definitions/Size"
            },
            "medium": {
              "$ref": "#/definitions/Size"
            },
            "small": {
              "$ref": "#/definitions/Size"
            }
          }
        },
        "URL": {
          "type": "object",
          "properties": {
            "display_url": {
              "type": "string"
            },
            "expanded_url": {
              "type": "string"
            },
            "indices": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "User_Mention": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "indices": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "type": "string"
            },
            "screen_name": {
              "type": "string"
            }
          }
        },
        "Places": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "additionalProperties": {}
            },
            "bounding_box": {
              "$ref": "#/definitions/Bounding_box"
            },
            "country": {
              "type": "string"
            },
            "country_code": {
              "type": "string"
            },
            "full_name": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "place_type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "Bounding_box": {
          "type": "object",
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "type": {
              "type": "string"
            }
          }
        },
        "Lists": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "following": {
              "type": "boolean"
            },
            "user": {
              "$ref": "#/definitions/Users"
            },
            "member_count": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "subscriber_count": {
              "type": "integer"
            },
            "id": {
              "type": "integer"
            },
            "uri": {
              "type": "string"
            }
          }
        },
        "Cursor_lists": {
          "type": "object",
          "properties": {
            "previous_cursor": {
              "type": "integer"
            },
            "lists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Lists"
              }
            },
            "previous_cursor_str": {
              "type": "string"
            },
            "next_cursor": {
              "type": "integer"
            },
            "next_cursor_str": {
              "type": "string"
            }
          }
        },
        "Cursor_users": {
          "type": "object",
          "properties": {
            "previous_cursor": {
              "type": "integer"
            },
            "users": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            },
            "previous_cursor_str": {
              "type": "string"
            },
            "next_cursor": {
              "type": "integer"
            },
            "next_cursor_str": {
              "type": "string"
            }
          }
        },
        "Cursor_ids": {
          "type": "object",
          "properties": {
            "previous_cursor": {
              "type": "integer"
            },
            "users": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "previous_cursor_str": {
              "type": "string"
            },
            "next_cursor": {
              "type": "integer"
            },
            "next_cursor_str": {
              "type": "string"
            }
          }
        },
        "Messages": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string"
            },
            "entities": {
              "$ref": "#/definitions/Entities"
            },
            "id": {
              "type": "integer"
            },
            "id_string": {
              "type": "string"
            },
            "recipient": {
              "$ref": "#/definitions/Users"
            },
            "recipient_id": {
              "type": "integer"
            },
            "recipient_screen_name": {
              "type": "string"
            },
            "sender": {
              "$ref": "#/definitions/Users"
            },
            "sender_id": {
              "type": "integer"
            },
            "sender_screen_name": {
              "type": "string"
            },
            "text": {
              "type": "string"
            }
          }
        },
        "Query": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "id_str": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "position": {
              "type": "string"
            },
            "query": {
              "type": "string"
            }
          }
        },
        "Friendship": {
          "type": "object",
          "properties": {
            "relationship": {
              "$ref": "#/definitions/Targets"
            },
            "source": {
              "$ref": "#/definitions/Source"
            }
          }
        },
        "Targets": {
          "type": "object",
          "properties": {
            "target": {
              "$ref": "#/definitions/Target"
            }
          }
        },
        "Target": {
          "type": "object",
          "properties": {
            "id_str": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "followed_by": {
              "type": "boolean"
            },
            "screen_name": {
              "type": "string"
            },
            "following": {
              "type": "boolean"
            }
          }
        },
        "Source": {
          "type": "object",
          "properties": {
            "can_dm": {
              "type": "boolean"
            },
            "blocking": {
              "type": "boolean"
            },
            "id_str": {
              "type": "boolean"
            },
            "all_replies": {
              "type": "boolean"
            },
            "want_retweets": {
              "type": "boolean"
            },
            "id": {
              "type": "integer"
            },
            "marked_spam": {
              "type": "boolean"
            },
            "followed_by": {
              "type": "boolean"
            },
            "notifications_enable": {
              "type": "boolean"
            },
            "screen_name": {
              "type": "string"
            },
            "following": {
              "type": "boolean"
            }
          }
        },
        "Settings": {
          "type": "object",
          "properties": {
            "sleep_time": {
              "$ref": "#/definitions/Sleep"
            },
            "use_cookie_personalization": {
              "type": "boolean"
            },
            "trend_location": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            },
            "language": {
              "type": "string"
            },
            "discoverable_by_email": {
              "type": "boolean"
            },
            "always_use_https": {
              "type": "boolean"
            },
            "protected": {
              "type": "boolean"
            },
            "geo_enabled": {
              "type": "boolean"
            },
            "show_all_inline_media": {
              "type": "boolean"
            },
            "screen_name": {
              "type": "string"
            }
          }
        },
        "Sleep": {
          "type": "object",
          "properties": {
            "end_time": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "start_time": {
              "type": "string"
            }
          }
        },
        "Location": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "placeType": {
              "$ref": "#/definitions/PlaceType"
            },
            "woeid": {
              "type": "integer"
            },
            "country": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "countryCode": {
              "type": "string"
            },
            "parentid": {
              "type": "integer"
            }
          }
        },
        "PlaceType": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            }
          }
        },
        "TrendInfo": {
          "type": "object",
          "properties": {
            "as_of": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            },
            "trends": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trends"
              }
            }
          }
        },
        "Trends": {
          "type": "object",
          "properties": {
            "events": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "promoted_content": {
              "type": "string"
            },
            "query": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "Help_Config": {
          "type": "object",
          "properties": {
            "dm_text_character_limit": {
              "type": "integer"
            },
            "characters_reserved_per_media": {
              "type": "integer"
            },
            "max_media_per_upload": {
              "type": "integer"
            },
            "non_username_paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "photo_size_limit": {
              "type": "integer"
            },
            "photo_sizes": {
              "$ref": "#/definitions/Sizes"
            }
          }
        },
        "Help_Language": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "Help_Privacy": {
          "type": "object",
          "properties": {
            "privacy": {
              "type": "string"
            }
          }
        },
        "Help_Tos": {
          "type": "object",
          "properties": {
            "Tos": {
              "type": "string"
            }
          }
        }
      },
      "x-ibm-configuration": {
        "gateway": "datapower-gateway",
        "enforced": false,
        "testable": false,
        "phase": "identified",
        "cors": {
          "enabled": false
        },
        "assembly": {
          "execute": [
            {
              "activity-log": {
                "title": "activity-log",
                "content": "payload",
                "error-content": "payload",
                "description": "Log all traffic through our managed API"
              }
            },
            {
              "operation-switch": {
                "title": "operation-switch",
                "case": [
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/statuses/mentions_timeline"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/mentions_timeline"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/statuses/user_timeline"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statues/user_timeline"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/statuses/home_timeline"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/home_timeline"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/statuses/retweets/{id}"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/retweets/$(request.parameters.id)"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/statuses/show/{id}"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/show/$(request.parameters.id)"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/statuses/destroy/{id}"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/destroy/$(request.parameters.id)"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/statuses/update"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/update"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/statuses/oembed"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/statuses/oembed"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/list"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/list"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/statuses"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/statuses"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/members/destroy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/members/destroy"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/memberships"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/memberships"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/subscribers"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/subscribers"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/lists/subscribers/create"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/subscribers/create"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/subscribers/show"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/subscribers/show"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/subscribers/destroy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/subscribers/destroy"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/members/create_all"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/members/create_all"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/list/members/show"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/list/members/show"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/list/members"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/list/members"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/list/members/create"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/list/members/create"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/lists/destroy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/destroy"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/lists/update"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/update"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/lists/create"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/create"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/show"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/show"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/lists/subscriptions"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/lists/subscriptions"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/list/members/destroy_all"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/list/members/destroy_all"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/direct_messages/sent"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/direct_messages/sent"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/direct_messages/show"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/direct_messages/show"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/search/tweets"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/search/tweets"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/saved_searches/list"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/saved_searches/list"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/saved_searches/show/{id}"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/saved_searches/show/$(request.parameters.id)"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/saved_searches/create"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/saved_searches/create"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/saved_searches/destroy/{id}"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/saved_searches/destroy/$(request.parameters.id)"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/direct_messages"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/direct_messages"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/direct_messages/destroy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/direct_messages/view"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/direct_messages/new"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/direct_messages/new"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/friends/ids"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friends/ids"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/followers/ids"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/followers/ids"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/friendships/incoming"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friendships/incoming"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/friendships/outgoing"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friendships/outgoing"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/friendships/create"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friendships/create"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/friendships/destroy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friendships/destroy"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/friendships/update"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friendships/update"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/friendships/show"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/friendships/show"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/account/settings"
                      },
                      {
                        "verb": "post",
                        "path": "/account/settings"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/account/settings"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/account/update_delivery_device"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/account/update_delivery_device"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/account/update_profile"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/account/update_profile"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/account/update_profile_background_image"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/account/update_profile_background_image"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/account/update_profile_colors"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/account/update_profile_colors"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/account/update_profile_image"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/account/update_profile_image"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/blocks/list"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/blocks/list"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/blocks/ids"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/blocks/ids"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/blocks/create"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/blocks/create"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/blocks/destroy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/blocks/destroy"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/users/lookup"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/users/lookup"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/users/show"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/users/show"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/users/search"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/users/search"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/users/contributees"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/users/contributees"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/users/contributors"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/users/contributors"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/geo/id/{place_id}"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/geo/id/$(request.parameters.place_id)"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/geo/reverse_geoncode"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/geo/reverse_geoncode"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/geo/search"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/geo/search"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/geo/similar_places"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/geo/similar_places"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/geo/places"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/geo/places"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/trends/available"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/trends/available"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/trends/place"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/trends/place"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/trends/closest"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/trends/closest"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "post",
                        "path": "/users/report_spam"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/users/report_spam"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/help/configuration"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/help/configuration"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/help/languages"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/help/languages"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/help/privacy"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/help/privacy"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/help/tos"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/help/tos"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/application/rate_limit_status"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.twitter.com/application/rate_limit_status"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "redact": {
                "title": "redact",
                "actions": [
                  {
                    "action": "redact",
                    "from": [
                      "all"
                    ],
                    "path": "/*/ibm"
                  }
                ],
                "description": "Remove all instances of the word IBM from responses"
              }
            }
          ]
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "version": "v1",
        "title": "Instagram API",
        "description": "Retrieved from editor.swagger.io on 29th Feb 2016\nAssembly added on 29th Feb 2016\n\nNOTE : This API is not enforced and cannot be invoked!\n\nThe first version of the Instagram API is an exciting step forward towards\nmaking it easier for users to have open access to their data. We created it\nso that you can surface the amazing content Instagram users share every\nsecond, in fun and innovative ways.\n\nBuild something great!\n\nOnce you've\n[registered your client](http://instagram.com/developer/register/) it's easy\nto start requesting data from Instagram.\n\nAll endpoints are only accessible via https and are located at\n`api.instagram.com`. For instance: you can grab the most popular photos at\nthe moment by accessing the following URL with your client ID\n(replace CLIENT-ID with your own):\n```\n  https://api.instagram.com/v1/media/popular?client_id=CLIENT-ID\n```\nYou're best off using an access_token for the authenticated user for each\nendpoint, though many endpoints don't require it.\nIn some cases an access_token will give you more access to information, and\nin all cases, it means that you are operating under a per-access_token limit\nvs. the same limit for your single client_id.\n\n\n## Limits\nBe nice. If you're sending too many requests too quickly, we'll send back a\n`503` error code (server unavailable).\nYou are limited to 5000 requests per hour per `access_token` or `client_id`\noverall. Practically, this means you should (when possible) authenticate\nusers so that limits are well outside the reach of a given user.\n\n## Deleting Objects\nWe do our best to have all our URLs be\n[RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).\nEvery endpoint (URL) may support one of four different http verbs. GET\nrequests fetch information about an object, POST requests create objects,\nPUT requests update objects, and finally DELETE requests will delete\nobjects.\n\nSince many old browsers don't support PUT or DELETE, we've made it easy to\nfake PUTs and DELETEs. All you have to do is do a POST with _method=PUT or\n_method=DELETE as a parameter and we will treat it as if you used PUT or\nDELETE respectively.\n\n## Structure\n\n### The Envelope\nEvery response is contained by an envelope. That is, each response has a\npredictable set of keys with which you can expect to interact:\n```json\n{\n    \"meta\": {\n        \"code\": 200\n    },\n    \"data\": {\n        ...\n    },\n    \"pagination\": {\n        \"next_url\": \"...\",\n        \"next_max_id\": \"13872296\"\n    }\n}\n```\n\n#### META\nThe meta key is used to communicate extra information about the response to\nthe developer. If all goes well, you'll only ever see a code key with value\n200. However, sometimes things go wrong, and in that case you might see a\nresponse like:\n```json\n{\n    \"meta\": {\n        \"error_type\": \"OAuthException\",\n        \"code\": 400,\n        \"error_message\": \"...\"\n    }\n}\n```\n\n#### DATA\nThe data key is the meat of the response. It may be a list or dictionary,\nbut either way this is where you'll find the data you requested.\n#### PAGINATION\nSometimes you just can't get enough. For this reason, we've provided a\nconvenient way to access more data in any request for sequential data.\nSimply call the url in the next_url parameter and we'll respond with the\nnext set of data.\n```json\n{\n    ...\n    \"pagination\": {\n        \"next_url\":\n\"https://api.instagram.com/v1/tags/puppy/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296\",\n        \"next_max_id\": \"13872296\"\n    }\n}\n```\nOn views where pagination is present, we also support the \"count\" parameter.\nSimply set this to the number of items you'd like to receive. Note that the\ndefault values should be fine for most applications - but if you decide to\nincrease this number there is a maximum value defined on each endpoint.\n\n### JSONP\nIf you're writing an AJAX application, and you'd like to wrap our response\nwith a callback, all you have to do is specify a callback parameter with\nany API call:\n```\nhttps://api.instagram.com/v1/tags/coffee/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction\n```\nWould respond with:\n```js\ncallbackFunction({\n    ...\n});\n```",
        "termsOfService": "http://instagram.com/about/legal/terms/api",
        "x-ibm-name": "instagram-api"
      },
      "host": "api.instagram.com",
      "basePath": "/v1",
      "schemes": [
        "https"
      ],
      "produces": [
        "application/json"
      ],
      "consumes": [
        "application/json"
      ],
      "tags": [
        {
          "name": "Users"
        },
        {
          "name": "Relationships",
          "description": "Relationships are expressed using the following terms:\n\n**outgoing_status**: Your relationship to the user. Can be \"follows\",\n  \"requested\", \"none\".\n**incoming_status**: A user's relationship to you. Can be \"followed_by\",\n  \"requested_by\", \"blocked_by_you\", \"none\".\n"
        },
        {
          "name": "Media",
          "description": "At this time, uploading via the API is not possible. We made a conscious\nchoice not to add this for the following reasons:\n\n* Instagram is about your life on the go – we hope to encourage photos\n  from within the app.\n* We want to fight spam & low quality photos. Once we allow uploading\n  from other sources, it's harder to control what comes into the Instagram\n  ecosystem. All this being said, we're working on ways to ensure users\n  have a consistent and high-quality experience on our platform.\n"
        },
        {
          "name": "Commnts"
        },
        {
          "name": "Likes"
        },
        {
          "name": "Tags"
        },
        {
          "name": "Location"
        },
        {
          "name": "Subscribtions"
        }
      ],
      "securityDefinitions": {
        "oauth": {
          "type": "oauth2",
          "flow": "implicit",
          "authorizationUrl": "https://instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token",
          "scopes": {
            "basic": "to read any and all data related to a user (e.g. following/followed-by\n lists, photos, etc.) (granted by default)\n",
            "comments": "to create or delete comments on a user’s behalf",
            "relationships": "to follow and unfollow users on a user’s behalf",
            "likes": "to like and unlike items on a user’s behalf"
          }
        },
        "key": {
          "type": "apiKey",
          "in": "query",
          "name": "access_token"
        }
      },
      "security": [
        {
          "oauth": [
            "basic",
            "comments",
            "relationships",
            "likes"
          ]
        },
        {
          "key": []
        }
      ],
      "parameters": {
        "user-id": {
          "name": "user-id",
          "in": "path",
          "description": "The user identifier number",
          "type": "number",
          "required": true
        },
        "tag-name": {
          "name": "tag-name",
          "in": "path",
          "description": "Tag name",
          "type": "string",
          "required": true
        }
      },
      "paths": {
        "/users/{user-id}": {
          "parameters": [
            {
              "$ref": "#/parameters/user-id"
            }
          ],
          "get": {
            "security": [
              {
                "key": []
              },
              {
                "oauth": [
                  "basic"
                ]
              }
            ],
            "tags": [
              "Users"
            ],
            "description": "Get basic information about a user.",
            "responses": {
              "200": {
                "description": "The user object",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              }
            }
          }
        },
        "/users/self/feed": {
          "get": {
            "tags": [
              "Users"
            ],
            "description": "See the authenticated user's feed.",
            "parameters": [
              {
                "name": "count",
                "in": "query",
                "description": "Count of media to return.",
                "type": "integer"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Return media earlier than this max_id.s",
                "type": "integer"
              },
              {
                "name": "min_id",
                "in": "query",
                "description": "Return media later than this min_id.",
                "type": "integer"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Media"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/users/{user-id}/media/recent": {
          "parameters": [
            {
              "$ref": "#/parameters/user-id"
            }
          ],
          "get": {
            "tags": [
              "Users"
            ],
            "responses": {
              "200": {
                "description": "Get the most recent media published by a user. To get the most recent\nmedia published by the owner of the access token, you can use `self`\ninstead of the `user-id`.\n",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Media"
                      }
                    }
                  }
                }
              }
            },
            "parameters": [
              {
                "name": "count",
                "in": "query",
                "description": "Count of media to return.",
                "type": "integer"
              },
              {
                "name": "max_timestamp",
                "in": "query",
                "description": "Return media before this UNIX timestamp.",
                "type": "integer"
              },
              {
                "name": "min_timestamp",
                "in": "query",
                "description": "Return media after this UNIX timestamp.",
                "type": "integer"
              },
              {
                "name": "min_id",
                "in": "query",
                "description": "Return media later than this min_id.",
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Return media earlier than this max_id.",
                "type": "string"
              }
            ]
          }
        },
        "/users/self/media/liked": {
          "get": {
            "tags": [
              "Users"
            ],
            "description": "See the list of media liked by the authenticated user.\nPrivate media is returned as long as the authenticated user\nhas permissionto view that media. Liked media lists are only\navailable for the currently authenticated user.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Media"
                      }
                    }
                  }
                }
              }
            },
            "parameters": [
              {
                "name": "count",
                "in": "query",
                "description": "Count of media to return.",
                "type": "integer"
              },
              {
                "name": "max_like_id",
                "in": "query",
                "description": "Return media liked before this id.",
                "type": "integer"
              }
            ]
          }
        },
        "/users/search": {
          "get": {
            "tags": [
              "Users"
            ],
            "description": "Search for a user by name.",
            "parameters": [
              {
                "name": "q",
                "in": "query",
                "description": "A query string",
                "type": "string",
                "required": true
              },
              {
                "name": "count",
                "in": "query",
                "description": "Number of users to return.",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/MiniProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/users/{user-id}/follows": {
          "parameters": [
            {
              "$ref": "#/parameters/user-id"
            }
          ],
          "get": {
            "tags": [
              "Relationships"
            ],
            "description": "Get the list of users this user follows.",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/MiniProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/users/{user-id}/followed-by": {
          "parameters": [
            {
              "$ref": "#/parameters/user-id"
            }
          ],
          "get": {
            "tags": [
              "Relationships"
            ],
            "description": "Get the list of users this user is followed by.",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/MiniProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/users/self/requested-by": {
          "get": {
            "tags": [
              "Relationships"
            ],
            "description": "List the users who have requested this user's permission to follow.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "integer"
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/MiniProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/users/{user-id}/relationship": {
          "parameters": [
            {
              "$ref": "#/parameters/user-id"
            }
          ],
          "post": {
            "tags": [
              "Relationships"
            ],
            "description": "Modify the relationship between the current user and thetarget user.\n",
            "security": [
              {
                "oauth": [
                  "relationships"
                ]
              }
            ],
            "parameters": [
              {
                "name": "action",
                "in": "body",
                "description": "One of follow/unfollow/block/unblock/approve/ignore.",
                "schema": {
                  "type": "string",
                  "enum": [
                    "follow",
                    "unfollow",
                    "block",
                    "unblock",
                    "approve"
                  ]
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/MiniProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/media/{media-id}": {
          "parameters": [
            {
              "name": "media-id",
              "in": "path",
              "description": "The media ID",
              "type": "integer",
              "required": true
            }
          ],
          "get": {
            "tags": [
              "Media"
            ],
            "description": "Get information about a media object.\nThe returned type key will allow you to differentiate between `image`\nand `video` media.\n\nNote: if you authenticate with an OAuth Token, you will receive the\n`user_has_liked` key which quickly tells you whether the current user\nhas liked this media item.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Media"
                }
              }
            }
          }
        },
        "/media1/{shortcode}": {
          "parameters": [
            {
              "name": "shortcode",
              "in": "path",
              "description": "The media shortcode",
              "type": "string",
              "required": true
            }
          ],
          "get": {
            "tags": [
              "Media"
            ],
            "description": "This endpoint returns the same response as **GET** `/media/media-id`.\n\nA media object's shortcode can be found in its shortlink URL.\nAn example shortlink is `http://instagram.com/p/D/`\nIts corresponding shortcode is D.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Media"
                }
              }
            }
          }
        },
        "/media/search": {
          "get": {
            "tags": [
              "Media"
            ],
            "description": "Search for media in a given area. The default time span is set to 5\ndays. The time span must not exceed 7 days. Defaults time stamps cover\nthe last 5 days. Can return mix of image and video types.\n",
            "parameters": [
              {
                "name": "LAT",
                "description": "Latitude of the center search coordinate. If used, lng is required.\n",
                "type": "number",
                "in": "query"
              },
              {
                "name": "MIN_TIMESTAMP",
                "description": "A unix timestamp. All media returned will be taken later than\nthis timestamp.\n",
                "type": "integer",
                "in": "query"
              },
              {
                "name": "LNG",
                "description": "Longitude of the center search coordinate. If used, lat is required.\n",
                "type": "number",
                "in": "query"
              },
              {
                "name": "MAX_TIMESTAMP",
                "description": "A unix timestamp. All media returned will be taken earlier than this\ntimestamp.\n",
                "type": "integer",
                "in": "query"
              },
              {
                "name": "DISTANCE",
                "description": "Default is 1km (distance=1000), max distance is 5km.",
                "type": "integer",
                "maximum": 5000,
                "default": 1000,
                "in": "query"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "description": "List of all media with added `distance` property",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/Media"
                          },
                          {
                            "properties": {
                              "distance": {
                                "type": "number"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/media/popular": {
          "get": {
            "tags": [
              "Media"
            ],
            "description": "Get a list of what media is most popular at the moment.\nCan return mix of image and video types.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Media"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/media/{media-id}/comments": {
          "parameters": [
            {
              "name": "media-id",
              "in": "path",
              "description": "Media ID",
              "type": "integer",
              "required": true
            }
          ],
          "get": {
            "tags": [
              "Comments"
            ],
            "description": "Get a list of recent comments on a media object.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "number"
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Comment"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "Comments",
              "Media"
            ],
            "description": "Create a comment on a media object with the following rules:\n\n* The total length of the comment cannot exceed 300 characters.\n* The comment cannot contain more than 4 hashtags.\n* The comment cannot contain more than 1 URL.\n* The comment cannot consist of all capital letters.\n",
            "security": [
              {
                "oauth": [
                  "comments"
                ]
              }
            ],
            "parameters": [
              {
                "name": "TEXT",
                "description": "Text to post as a comment on the media object as specified in\nmedia-id.\n",
                "in": "body",
                "schema": {
                  "type": "number"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "number"
                        }
                      }
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Comments"
            ],
            "description": "Remove a comment either on the authenticated user's media object or\nauthored by the authenticated user.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "number"
                        }
                      }
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "/media/{media-id}/likes": {
          "parameters": [
            {
              "name": "media-id",
              "in": "path",
              "description": "Media ID",
              "type": "integer",
              "required": true
            }
          ],
          "get": {
            "tags": [
              "Likes",
              "Media"
            ],
            "description": "Get a list of users who have liked this media.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "number"
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Like"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "Likes"
            ],
            "description": "Set a like on this media by the currently authenticated user.",
            "security": [
              {
                "oauth": [
                  "comments"
                ]
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "number"
                        }
                      }
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Likes"
            ],
            "description": "Remove a like on this media by the currently authenticated user.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "number"
                        }
                      }
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "/tags/{tag-name}": {
          "parameters": [
            {
              "$ref": "#/parameters/tag-name"
            }
          ],
          "get": {
            "tags": [
              "Tags"
            ],
            "description": "Get information about a tag object.",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Tag"
                }
              }
            }
          }
        },
        "/tags/{tag-name}/media/recent": {
          "parameters": [
            {
              "$ref": "#/parameters/tag-name"
            }
          ],
          "get": {
            "tags": [
              "Tags"
            ],
            "description": "Get a list of recently tagged media. Use the `max_tag_id` and\n`min_tag_id` parameters in the pagination response to paginate through\nthese objects.\n",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/tags/search": {
          "get": {
            "tags": [
              "Tags"
            ],
            "parameters": [
              {
                "name": "q",
                "description": "A valid tag name without a leading #. (eg. snowy, nofilter)\n",
                "in": "query",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "properties": {
                        "code": {
                          "type": "integer"
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/locations/{location-id}": {
          "parameters": [
            {
              "name": "location-id",
              "description": "Location ID",
              "in": "path",
              "type": "integer",
              "required": true
            }
          ],
          "get": {
            "tags": [
              "Location"
            ],
            "description": "Get information about a location.",
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/Location"
                    }
                  }
                }
              }
            }
          }
        },
        "/locations/{location-id}/media/recent": {
          "parameters": [
            {
              "name": "location-id",
              "description": "Location ID",
              "in": "path",
              "type": "integer",
              "required": true
            }
          ],
          "get": {
            "tags": [
              "Location",
              "Media"
            ],
            "description": "Get a list of recent media objects from a given location.",
            "parameters": [
              {
                "name": "max_timestamp",
                "in": "query",
                "description": "Return media before this UNIX timestamp.",
                "type": "integer"
              },
              {
                "name": "min_timestamp",
                "in": "query",
                "description": "Return media after this UNIX timestamp.",
                "type": "integer"
              },
              {
                "name": "min_id",
                "in": "query",
                "description": "Return media later than this min_id.",
                "type": "string"
              },
              {
                "name": "max_id",
                "in": "query",
                "description": "Return media earlier than this max_id.",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Media"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/locations/search": {
          "get": {
            "tags": [
              "Location"
            ],
            "description": "Search for a location by geographic coordinate.",
            "parameters": [
              {
                "name": "distance",
                "in": "query",
                "description": "Default is 1000m (distance=1000), max distance is 5000.",
                "type": "integer"
              },
              {
                "name": "facebook_places_id",
                "in": "query",
                "description": "Returns a location mapped off of a Facebook places id. If used, a\nFoursquare id and lat, lng are not required.\n",
                "type": "integer"
              },
              {
                "name": "foursquare_id",
                "in": "query",
                "description": "returns a location mapped off of a foursquare v1 api location id.\nIf used, you are not required to use lat and lng. Note that this\nmethod is deprecated; you should use the new foursquare IDs with V2\nof their API.\n",
                "type": "integer"
              },
              {
                "name": "lat",
                "in": "query",
                "description": "atitude of the center search coordinate. If used, lng is required.\n",
                "type": "number"
              },
              {
                "name": "lng",
                "in": "query",
                "description": "ongitude of the center search coordinate. If used, lat is required.\n",
                "type": "number"
              },
              {
                "name": "foursquare_v2_id",
                "in": "query",
                "description": "Returns a location mapped off of a foursquare v2 api location id. If\nused, you are not required to use lat and lng.\n",
                "type": "integer"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Location"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/geographies/{geo-id}/media/recent": {
          "parameters": [
            {
              "name": "geo-id",
              "in": "path",
              "description": "Geolocation ID",
              "type": "integer",
              "required": true
            }
          ],
          "get": {
            "description": "Get recent media from a geography subscription that you created.\n**Note**: You can only access Geographies that were explicitly created\nby your OAuth client. Check the Geography Subscriptions section of the\n[real-time updates page](https://instagram.com/developer/realtime/).\nWhen you create a subscription to some geography\nthat you define, you will be returned a unique geo-id that can be used\nin this query. To backfill photos from the location covered by this\ngeography, use the [media search endpoint\n](https://instagram.com/developer/endpoints/media/).\n",
            "parameters": [
              {
                "name": "count",
                "in": "query",
                "description": "Max number of media to return.",
                "type": "integer"
              },
              {
                "name": "min_id",
                "in": "query",
                "description": "Return media before this `min_id`.",
                "type": "integer"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              }
            }
          }
        }
      },
      "definitions": {
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "username": {
              "type": "string"
            },
            "full_name": {
              "type": "string"
            },
            "profile_picture": {
              "type": "string"
            },
            "bio": {
              "type": "string"
            },
            "website": {
              "type": "string"
            },
            "counts": {
              "type": "object",
              "properties": {
                "media": {
                  "type": "integer"
                },
                "follows": {
                  "type": "integer"
                },
                "follwed_by": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "Media": {
          "type": "object",
          "properties": {
            "created_time": {
              "description": "Epoc time (ms)",
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "filter": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "id": {
              "type": "integer"
            },
            "user": {
              "$ref": "#/definitions/MiniProfile"
            },
            "users_in_photo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MiniProfile"
              }
            },
            "location": {
              "$ref": "#/definitions/Location"
            },
            "comments:": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            },
            "likes": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MiniProfile"
                  }
                }
              }
            },
            "images": {
              "properties": {
                "low_resolution": {
                  "$ref": "#/definitions/Image"
                },
                "thumbnail": {
                  "$ref": "#/definitions/Image"
                },
                "standard_resolution": {
                  "$ref": "#/definitions/Image"
                }
              }
            },
            "videos": {
              "properties": {
                "low_resolution": {
                  "$ref": "#/definitions/Image"
                },
                "standard_resolution": {
                  "$ref": "#/definitions/Image"
                }
              }
            }
          }
        },
        "Location": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "latitude": {
              "type": "number"
            },
            "longitude": {
              "type": "number"
            }
          }
        },
        "Comment": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "created_time": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "from": {
              "$ref": "#/definitions/MiniProfile"
            }
          }
        },
        "Like": {
          "type": "object",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        },
        "Tag": {
          "type": "object",
          "properties": {
            "media_count": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "Image": {
          "type": "object",
          "properties": {
            "width": {
              "type": "integer"
            },
            "height": {
              "type": "integer"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "MiniProfile": {
          "type": "object",
          "description": "A shorter version of User for likes array",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "full_name": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "profile_picture": {
              "type": "string"
            }
          }
        }
      },
      "x-ibm-configuration": {
        "gateway": "datapower-gateway",
        "enforced": false,
        "testable": false,
        "phase": "identified",
        "cors": {
          "enabled": false
        },
        "assembly": {
          "execute": [
            {
              "validate": {
                "title": "validate",
                "definition": "request",
                "description": "Validate incoming request"
              }
            },
            {
              "operation-switch": {
                "title": "operation-switch",
                "case": [
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/users/{user-id}"
                      },
                      {
                        "verb": "get",
                        "path": "/users/self/feed"
                      },
                      {
                        "verb": "get",
                        "path": "/users/{user-id}/media/recent"
                      },
                      {
                        "verb": "get",
                        "path": "/users/self/media/liked"
                      },
                      {
                        "verb": "get",
                        "path": "/users/search"
                      },
                      {
                        "verb": "get",
                        "path": "/users/{user-id}/follows"
                      },
                      {
                        "verb": "get",
                        "path": "/users/{user-id}/followed-by"
                      },
                      {
                        "verb": "get",
                        "path": "/users/self/requested-by"
                      },
                      {
                        "verb": "post",
                        "path": "/users/{user-id}/relationship"
                      }
                    ],
                    "execute": [
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/User",
                          "description": "Validate that we have a user"
                        }
                      },
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.instagram.com/users"
                        }
                      },
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/User",
                          "description": "Validate that we are returning a user"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/media/{media-id}"
                      },
                      {
                        "verb": "get",
                        "path": "/media1/{shortcode}"
                      },
                      {
                        "verb": "get",
                        "path": "/media/search"
                      },
                      {
                        "verb": "get",
                        "path": "/media/popular"
                      },
                      {
                        "verb": "get",
                        "path": "/media/{media-id}/comments"
                      },
                      {
                        "verb": "post",
                        "path": "/media/{media-id}/comments"
                      },
                      {
                        "verb": "delete",
                        "path": "/media/{media-id}/comments"
                      },
                      {
                        "verb": "get",
                        "path": "/media/{media-id}/likes"
                      },
                      {
                        "verb": "post",
                        "path": "/media/{media-id}/likes"
                      },
                      {
                        "verb": "delete",
                        "path": "/media/{media-id}/likes"
                      }
                    ],
                    "execute": [
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/Media",
                          "description": "Validate that we have valid media"
                        }
                      },
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.instagram.com/media"
                        }
                      },
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/Media",
                          "description": "Validate that we return valid media"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/tags/{tag-name}"
                      },
                      {
                        "verb": "get",
                        "path": "/tags/search"
                      },
                      {
                        "verb": "get",
                        "path": "/tags/{tag-name}/media/recent"
                      }
                    ],
                    "execute": [
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/Tag",
                          "description": "Validate that we have valid tags"
                        }
                      },
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.instagram.com/tags"
                        }
                      },
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/Tag",
                          "description": "Validate that we return valid tags"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/locations/{location-id}"
                      },
                      {
                        "verb": "get",
                        "path": "/locations/{location-id}/media/recent"
                      },
                      {
                        "verb": "get",
                        "path": "/locations/search"
                      }
                    ],
                    "execute": [
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/Location",
                          "description": "Validate that we have valid locations"
                        }
                      },
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.instagram.com/locations"
                        }
                      },
                      {
                        "validate": {
                          "title": "validate",
                          "definition": "#/definitions/Location",
                          "description": "Validate that we return valid locations"
                        }
                      }
                    ]
                  },
                  {
                    "operations": [
                      {
                        "verb": "get",
                        "path": "/geographies/{geo-id}/media/recent"
                      }
                    ],
                    "execute": [
                      {
                        "invoke": {
                          "title": "invoke",
                          "target-url": "https://api.instagram.com/geographies/$(request.parameters.geo-id)/media/recent"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "validate": {
                "title": "validate",
                "definition": "response",
                "description": "Validate outgoing response"
              }
            }
          ]
        }
      }
    },
    {
      "swagger": "2.0",
      "info": {
        "version": "1.0.0",
        "title": "ControlUserApi",
        "x-ibm-name": "controluserapi"
      },
      "host": "localhost:6573",
      "schemes": [
        "https"
      ],
      "paths": {
        "/api/Administradors/{usuari}/{codiAplicacio}/{tipusAdmin}": {
          "get": {
            "tags": [
              "Administradors"
            ],
            "summary": "Retorna el tipus d'administració que pot fer un usuari sobre una aplicació",
            "operationId": "Administradors_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "usuari",
                "in": "path",
                "description": "Usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "tipusAdmin",
                "in": "path",
                "description": "Tipus d'administració",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Administrador"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Administradors"
            ],
            "summary": "Esborra un administrador d'aplicació",
            "operationId": "Administradors_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "usuari",
                "in": "path",
                "description": "Usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "tipusAdmin",
                "in": "path",
                "description": "Tipus d'administració",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Administradors/Tipus/{usuari}/{tipusAdmin}": {
          "get": {
            "tags": [
              "Administradors"
            ],
            "summary": "Retorna les administracions que pot fer un usuari respecte un tipus d'administració",
            "operationId": "Administradors_GetbyTipus",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "usuari",
                "in": "path",
                "description": "Usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "tipusAdmin",
                "in": "path",
                "description": "Tipus d'administració",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Administrador]"
                }
              }
            }
          }
        },
        "/api/Administradors/App/{codiAplicacio}": {
          "get": {
            "tags": [
              "Administradors"
            ],
            "summary": "Obte un llistat d'administradors per aplicació",
            "operationId": "Administradors_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Administrador]"
                }
              }
            }
          }
        },
        "/api/Administradors/User/{usuari}": {
          "get": {
            "tags": [
              "Administradors"
            ],
            "summary": "Obte la llistat d'aplicacions administrades d'un usuari",
            "operationId": "Administradors_GetByUser",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "usuari",
                "in": "path",
                "description": "Codi d'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Administrador]"
                }
              }
            }
          }
        },
        "/api/Administradors": {
          "put": {
            "tags": [
              "Administradors"
            ],
            "summary": "Actualitza un administrador",
            "operationId": "Administradors_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "administrador",
                "in": "body",
                "description": "administrador a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Administrador"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Administrador"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Administradors"
            ],
            "summary": "Crea un administrador",
            "operationId": "Administradors_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "administrador",
                "in": "body",
                "description": "Objecte administrador a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Administrador"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Administrador"
                }
              }
            }
          }
        },
        "/api/Aplicacions/Count": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Retorna el número total d'aplicacions del sistema",
            "operationId": "Aplicacions_GetCount",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Aplicacions/{id}": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté una aplicació del catàleg",
            "operationId": "Aplicacions_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de l'aplicació al catàleg",
                "required": true,
                "type": "string"
              },
              {
                "name": "getRelatedInfo",
                "in": "query",
                "description": "Indica si s'ha de retornar la informació de fitxa completa (Autoritzacions | Perfils)",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cataleg"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Actualitza una aplicació del catàleg",
            "operationId": "Aplicacions_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (codigo) de l'aplicació del catàleg a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "app",
                "in": "body",
                "description": "Cataleg a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Cataleg"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cataleg"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Esborra una aplicació del catàleg y tota la seva informació associada",
            "operationId": "Aplicacions_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'aplicació (codigo)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Aplicacions": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Aplicacions_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Cataleg]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Crea una aplicació del catàleg",
            "operationId": "Aplicacions_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "app",
                "in": "body",
                "description": "Objecte catàleg a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Cataleg"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Cataleg"
                }
              }
            }
          }
        },
        "/api/Aplicacions/Admin/{usuari}": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Aplicacions_GetListByAdmin",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "usuari",
                "in": "path",
                "description": "Codi d'usuari administrador",
                "required": true,
                "type": "string"
              },
              {
                "name": "tipusAdmin",
                "in": "query",
                "description": "",
                "required": false,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Cataleg]"
                }
              }
            }
          }
        },
        "/api/Aplicacions/Excel": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Aplicacions_GetExcelList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "admin",
                "in": "query",
                "description": "Filtre per administrador",
                "required": false,
                "type": "string"
              },
              {
                "name": "tipusAdmin",
                "in": "query",
                "description": "Filtre per tipus d'administrador",
                "required": false,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/FileDownloadModel"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/Aplicacions/Excel/{id}": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Aplicacions_GetExcelApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'aplicació (codigo)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/FileDownloadModel"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/Aplicacions/Download/Excel": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Aplicacions_DownloadExcelList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "admin",
                "in": "query",
                "description": "Filtre per administrador",
                "required": false,
                "type": "string"
              },
              {
                "name": "tipusAdmin",
                "in": "query",
                "description": "Filtre per tipus d'administrador",
                "required": false,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/Aplicacions/Download/Excel/{id}": {
          "get": {
            "tags": [
              "Aplicacions"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Aplicacions_DownloadExcelApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'aplicació (codigo)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/AssignacionsGrup/{idApp}/{codiUsuari}": {
          "get": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Obté una llistat de totes les assignacions a grups d'una aplicació a un usuari",
            "operationId": "AssignacionsGrup_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Codi d'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AssignacioGrup]"
                }
              }
            }
          }
        },
        "/api/AssignacionsGrup/Grup/{codiAplicacio}/{idGrup}": {
          "get": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Obté una llistat de totes les assignacions a grups d'una aplicació a un grup",
            "operationId": "AssignacionsGrup_GetByAppGroup",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador del grup",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AssignacioGrup]"
                }
              }
            }
          }
        },
        "/api/AssignacionsGrup/Aplicacio/{idApp}": {
          "get": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Obté una llistat de totes les assignacions a grups d'una aplicació",
            "operationId": "AssignacionsGrup_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AssignacioGrup]"
                }
              }
            }
          }
        },
        "/api/AssignacionsGrup/Aplicacio/Count/{idApp}": {
          "get": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Obté el no. d'assignacions a grups d'una aplicació",
            "operationId": "AssignacionsGrup_GetCountByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/AssignacionsGrup/Usuari/{codiUsuari}": {
          "get": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Obté una llistat de totes les assignacions a grups d'un usuari",
            "operationId": "AssignacionsGrup_GetByUser",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Codi de l'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AssignacioGrup]"
                }
              }
            }
          }
        },
        "/api/AssignacionsGrup": {
          "put": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Actualitza una assignació a grup",
            "operationId": "AssignacionsGrup_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "assignacioGrup",
                "in": "body",
                "description": "Assignació a grup a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AssignacioGrup"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AssignacioGrup"
                }
              }
            }
          },
          "post": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Crea una assignació a grup",
            "operationId": "AssignacionsGrup_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "assignacioGrup",
                "in": "body",
                "description": "Objecte autoritzacio a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AssignacioGrup"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AssignacioGrup"
                }
              }
            }
          }
        },
        "/api/AssignacionsGrup/{idApp}/{idGrup}/{codiUsuari}": {
          "delete": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Esborra una assignació a grup d'aplicació ( Per Id )",
            "operationId": "AssignacionsGrup_DeleteById",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador del grup",
                "required": true,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Identificador d'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/AssignacionsGrup/Codi/{idApp}/{codiGrup}/{codiUsuari}": {
          "delete": {
            "tags": [
              "AssignacionsGrup"
            ],
            "summary": "Esborra una assignació a grup d'aplicació ( Per codi )",
            "operationId": "AssignacionsGrup_DeleteByCodi",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiGrup",
                "in": "path",
                "description": "Codi del grup",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Identificador d'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Audiencias/{id}": {
          "get": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Retorna una audiencia",
            "operationId": "Audiencias_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "getRelatedInfo",
                "in": "query",
                "description": "Indica si s'ha de retornar la informació de fitxa completa (Handlers, Bags y Tokens de refresc)",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Audiencia"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Actualitza un Audiencia",
            "operationId": "Audiencias_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'Audiencia a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "audiencia",
                "in": "body",
                "description": "Audiencia a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Audiencia"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Audiencia"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Esborra un Audiencia y tota la seva informació associada",
            "operationId": "Audiencias_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Audiencia (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Audiencias": {
          "get": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Obté un llistat de totes les audiencies",
            "operationId": "Audiencias_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Audiencia]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Crea un Audiencia",
            "operationId": "Audiencias_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "audiencia",
                "in": "body",
                "description": "Objecte Audiencia a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Audiencia"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Audiencia"
                }
              }
            }
          }
        },
        "/api/Audiencias/User/{id}": {
          "get": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Obté un llistat de totes les audiencies que esta autoritzat un usuari amb url de retorn\r\nFunció interna no securitzada, per el portal del Login, no torna el ClientSecret",
            "operationId": "Audiencias_GetListByUser",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciasUser]"
                }
              }
            }
          }
        },
        "/api/Audiencias/Portal": {
          "get": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Obté un llistat de totes les audiencies per el Portal del login\r\nFunció interna no securitzada, per el portal del Login, no torna el ClientSecret",
            "operationId": "Audiencias_GetListForPortal",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciasUser]"
                }
              }
            }
          }
        },
        "/api/Audiencias/Habilita/{id}": {
          "patch": {
            "tags": [
              "Audiencias"
            ],
            "summary": "Habilita o deshabilita una audiencia",
            "operationId": "Audiencias_Patch",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'usuari a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "habilitat",
                "in": "query",
                "description": "Indicador del estat d'habilitació",
                "required": true,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions/Aplicacio/{idApp}": {
          "get": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Obté una llistat de totes les autoritzacions d'audiencies d'una aplicació",
            "operationId": "AudienciasAutoritzacio_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaAutoritzacio]"
                }
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions/Aplicacio/Count/{idApp}": {
          "get": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Obté el no. d'assignacions a grups d'una aplicació",
            "operationId": "AudienciasAutoritzacio_GetCountByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions/{ClientId}": {
          "get": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Obté una llistat de totes les autoritzacions d'una audiencia (AppToApp)",
            "operationId": "AudienciasAutoritzacio_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "ClientId",
                "in": "path",
                "description": "Identificador de l'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "nomesActius",
                "in": "query",
                "description": "Indica si només s'han d'agafar les autoritzacions actives ( Per defecte True )",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaAutoritzacio]"
                }
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions/{ClientId}/{idApp}/{idPerfil}": {
          "get": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "operationId": "AudienciasAutoritzacio_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "ClientId",
                "in": "path",
                "required": true,
                "type": "string"
              },
              {
                "name": "idApp",
                "in": "path",
                "required": true,
                "type": "string"
              },
              {
                "name": "idPerfil",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaAutoritzacio"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Esborra un autoritzacio d'una audiencia a una aplicació/perfil",
            "operationId": "AudienciasAutoritzacio_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "ClientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "idPerfil",
                "in": "path",
                "description": "Códi de perfil a esborrar",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions/Count/{idApp}": {
          "get": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Obté el No. de autoritzacions duna audiencia (AppToApp)",
            "operationId": "AudienciasAutoritzacio_GetCount",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "ClientId",
                "in": "query",
                "description": "Identificador de l'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "nomesActius",
                "in": "query",
                "description": "Indica si només s'han d'agafar les autoritzacions actives ( Per defecte True )",
                "required": false,
                "type": "boolean"
              },
              {
                "name": "idApp",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions/Check/{ClientId}/{idApp}": {
          "get": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Comprova si una audiencia posseeix alguna autorització activa per a una aplicació",
            "operationId": "AudienciasAutoritzacio_CheckAutoritzacion",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "ClientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "/api/Audiencies/Autoritzacions": {
          "put": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Actualitza una autorització",
            "operationId": "AudienciasAutoritzacio_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "autoritzacio",
                "in": "body",
                "description": "Autorització a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AudienciaAutoritzacio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaAutoritzacio"
                }
              }
            }
          },
          "post": {
            "tags": [
              "AudienciasAutoritzacio"
            ],
            "summary": "Crea una autoritzacio",
            "operationId": "AudienciasAutoritzacio_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "autoritzacio",
                "in": "body",
                "description": "Objecte autoritzacio a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AudienciaAutoritzacio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaAutoritzacio"
                }
              }
            }
          }
        },
        "/api/AudienciasHandler/{clientId}/{handlerId}": {
          "get": {
            "tags": [
              "AudienciasHandler"
            ],
            "summary": "Retorna un enllaç Audiencia-handler",
            "operationId": "AudienciasHandler_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "handlerId",
                "in": "path",
                "description": "Identificador de handler",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaHandler"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "AudienciasHandler"
            ],
            "summary": "Esborra un enllaç Audiencia-handler",
            "operationId": "AudienciasHandler_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "handlerId",
                "in": "path",
                "description": "Identificador de handler",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/AudienciasHandler/ClientId/{clientId}": {
          "get": {
            "tags": [
              "AudienciasHandler"
            ],
            "summary": "Retorna el enllaços audiencia-handler d'una determinada audiencia",
            "operationId": "AudienciasHandler_GetListbyClientId",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaHandler]"
                }
              }
            }
          }
        },
        "/api/AudienciasHandler": {
          "post": {
            "tags": [
              "AudienciasHandler"
            ],
            "summary": "Crea un enllaç Audiencia-handler",
            "operationId": "AudienciasHandler_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "audienciahandler",
                "in": "body",
                "description": "Objecte Audiencia a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AudienciaHandler"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaHandler"
                }
              }
            }
          }
        },
        "/api/AudienciasHandlerBag/{clientId}/{handlerId}/{bagId}": {
          "get": {
            "tags": [
              "AudienciasHandlerBag"
            ],
            "summary": "Retorna una tripleta audiencia-handler-bag",
            "operationId": "AudienciasHandlerBag_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "handlerId",
                "in": "path",
                "description": "Identificador de handler",
                "required": true,
                "type": "integer",
                "format": "int64"
              },
              {
                "name": "bagId",
                "in": "path",
                "description": "Identificador de bag",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaHandlerBag"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "AudienciasHandlerBag"
            ],
            "summary": "Esborra una tripleta audiencia-handler-bag",
            "operationId": "AudienciasHandlerBag_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "handlerId",
                "in": "path",
                "description": "Identificador de handler",
                "required": true,
                "type": "integer",
                "format": "int64"
              },
              {
                "name": "bagId",
                "in": "path",
                "description": "Identificador de bag",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/AudienciasHandlerBag/ClientId/{clientId}": {
          "get": {
            "tags": [
              "AudienciasHandlerBag"
            ],
            "summary": "Retorna les tripletes audiencia-handler-bag d'una determinada audiencia",
            "operationId": "AudienciasHandlerBag_GetListbyClientId",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaHandlerBag]"
                }
              }
            }
          }
        },
        "/api/AudienciasHandlerBag/ClientId/{clientId}/handler/{handlerId}": {
          "get": {
            "tags": [
              "AudienciasHandlerBag"
            ],
            "summary": "Retorna les tripletes audiencia-handler-bag d'una determinada audiencia-handler",
            "operationId": "AudienciasHandlerBag_GetListbyClientIdHandler",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "clientId",
                "in": "path",
                "description": "Identificador d'audiencia",
                "required": true,
                "type": "string"
              },
              {
                "name": "handlerId",
                "in": "path",
                "description": "Identificador de handler",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaHandlerBag]"
                }
              }
            }
          }
        },
        "/api/AudienciasHandlerBag/Bag/{bagId}": {
          "get": {
            "tags": [
              "AudienciasHandlerBag"
            ],
            "summary": "Retorna les tripletes audiencia-handler-bag que utilitcen un determinat bag",
            "operationId": "AudienciasHandlerBag_GetListbyBag",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "bagId",
                "in": "path",
                "description": "Identificador de bag",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaHandlerBag]"
                }
              }
            }
          }
        },
        "/api/AudienciasHandlerBag": {
          "post": {
            "tags": [
              "AudienciasHandlerBag"
            ],
            "summary": "Crea una tripleta Audiencia-handler-bag",
            "operationId": "AudienciasHandlerBag_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "audienciahandlerbag",
                "in": "body",
                "description": "Objecte Audiencia a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AudienciaHandlerBag"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaHandlerBag"
                }
              }
            }
          }
        },
        "/api/AudienciasType/{id}": {
          "get": {
            "tags": [
              "AudienciasType"
            ],
            "summary": "Retorna un AudienciaType",
            "operationId": "AudienciasType_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del districte",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaType"
                }
              }
            }
          },
          "put": {
            "tags": [
              "AudienciasType"
            ],
            "summary": "Actualitza un AudienciaType",
            "operationId": "AudienciasType_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'AudienciaType a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "AudienciaType",
                "in": "body",
                "description": "AudienciaType a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AudienciaType"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaType"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "AudienciasType"
            ],
            "summary": "Esborra un AudienciaType y tota la seva informació associada",
            "operationId": "AudienciasType_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'AudienciaType",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/AudienciasType": {
          "get": {
            "tags": [
              "AudienciasType"
            ],
            "summary": "Obté un llistat de tots els AudienciasType",
            "operationId": "AudienciasType_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[AudienciaType]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "AudienciasType"
            ],
            "summary": "Crea un AudienciaType",
            "operationId": "AudienciasType_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "AudienciaType",
                "in": "body",
                "description": "Objecte AudienciaType a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/AudienciaType"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/AudienciaType"
                }
              }
            }
          }
        },
        "/api/Autoritzacions/Aplicacio/{idApp}": {
          "get": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Obté una llistat de totes les autoritzacions d'una aplicació",
            "operationId": "Autoritzacions_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Autoritzacio]"
                }
              }
            }
          }
        },
        "/api/Autoritzacions/Aplicacio/Count/{idApp}": {
          "get": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Obté el no. d'assignacions a grups d'una aplicació",
            "operationId": "Autoritzacions_GetCountByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Autoritzacions/{codiAplicacio}/{codPerfil}": {
          "get": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Obté una llistat de totes les autoritzacions d'un perfil a una aplicació",
            "operationId": "Autoritzacions_GetByAppProfile",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codPerfil",
                "in": "path",
                "description": "Codi del perfil",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Autoritzacio]"
                }
              }
            }
          }
        },
        "/api/Autoritzacions/Usuari/{idUser}": {
          "get": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Obté una llistat de totes les autoritzacions d'un usuari",
            "operationId": "Autoritzacions_GetByUser",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idUser",
                "in": "path",
                "description": "Codi de l'usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "nomesActius",
                "in": "query",
                "description": "Indica si només s'han d'agafar les autoritzacions actives ( Per defecte True )",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Autoritzacio]"
                }
              }
            }
          }
        },
        "/api/Autoritzacions/Check/{idUser}/{idApp}": {
          "get": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Comprova si un usuari posseeix alguna autorització activa per a una aplicació",
            "operationId": "Autoritzacions_CheckAutoritzacion",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idUser",
                "in": "path",
                "description": "Códi de l'usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "/api/Autoritzacions": {
          "put": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Actualitza una autorització",
            "operationId": "Autoritzacions_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "autoritzacio",
                "in": "body",
                "description": "Autorització a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Autoritzacio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Autoritzacio"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Crea una autoritzacio",
            "operationId": "Autoritzacions_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "autoritzacio",
                "in": "body",
                "description": "Objecte autoritzacio a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Autoritzacio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Autoritzacio"
                }
              }
            }
          }
        },
        "/api/Autoritzacions/{idApp}/{idUser}/{idPerfil}": {
          "delete": {
            "tags": [
              "Autoritzacions"
            ],
            "summary": "Esborra una autoritzacio d'aplicació",
            "operationId": "Autoritzacions_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "idUser",
                "in": "path",
                "description": "Códi de l'usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "idPerfil",
                "in": "path",
                "description": "Códi de perfil a esborrar",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Bags/{id}": {
          "get": {
            "tags": [
              "Bags"
            ],
            "summary": "Retorna un bag",
            "operationId": "Bags_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del districte",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Bag"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Bags"
            ],
            "summary": "Actualitza un Bag",
            "operationId": "Bags_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de l'Bag a actualitzar",
                "required": true,
                "type": "integer",
                "format": "int64"
              },
              {
                "name": "bag",
                "in": "body",
                "description": "Bag a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Bag"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Bag"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Bags"
            ],
            "summary": "Esborra un Bag y tota la seva informació associada",
            "operationId": "Bags_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Bag (username)",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/BagsByValue/{value}": {
          "get": {
            "tags": [
              "Bags"
            ],
            "summary": "Retorna un bag por valor",
            "operationId": "Bags_GetByValue",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "value",
                "in": "path",
                "description": "Valor del bag",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Bag"
                }
              }
            }
          }
        },
        "/api/Bags": {
          "get": {
            "tags": [
              "Bags"
            ],
            "summary": "Obté un llistat de tots els bags",
            "operationId": "Bags_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Bag]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Bags"
            ],
            "summary": "Crea un Bag",
            "operationId": "Bags_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "bag",
                "in": "body",
                "description": "Objecte Bag a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Bag"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Bag"
                }
              }
            }
          }
        },
        "/api/Categories/{id}": {
          "get": {
            "tags": [
              "Categories"
            ],
            "summary": "Retorna una categoria",
            "operationId": "Categories_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de la categoria",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Categoria"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Categories"
            ],
            "summary": "Actualitza un Categoria",
            "operationId": "Categories_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'Categoria a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "categoria",
                "in": "body",
                "description": "Categoria a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Categoria"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Categoria"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Categories"
            ],
            "summary": "Esborra un Categoria y tota la seva informació associada",
            "operationId": "Categories_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Categoria (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Categories": {
          "get": {
            "tags": [
              "Categories"
            ],
            "summary": "Obté un llistat de totes les categories",
            "operationId": "Categories_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Categoria]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Categories"
            ],
            "summary": "Crea un Categoria",
            "operationId": "Categories_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "categoria",
                "in": "body",
                "description": "Objecte Categoria a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Categoria"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Categoria"
                }
              }
            }
          }
        },
        "/api/Departament": {
          "get": {
            "tags": [
              "Departaments"
            ],
            "summary": "Obté un llistat de totes els Departaments",
            "operationId": "Departaments_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Departament]"
                }
              }
            }
          }
        },
        "/api/Departament/{id}": {
          "get": {
            "tags": [
              "Departaments"
            ],
            "summary": "Retorna una categoria",
            "operationId": "Departaments_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de la categoria",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Departament"
                }
              }
            }
          }
        },
        "/api/Districtes/{id}": {
          "get": {
            "tags": [
              "Districtes"
            ],
            "summary": "Retorna un districte",
            "operationId": "Districtes_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del districte",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Districte"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Districtes"
            ],
            "summary": "Actualitza un Districte",
            "operationId": "Districtes_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'Districte a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "districte",
                "in": "body",
                "description": "Districte a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Districte"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Districte"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Districtes"
            ],
            "summary": "Esborra un Districte y tota la seva informació associada",
            "operationId": "Districtes_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Districte (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Districtes/APIConnect/{id}": {
          "get": {
            "tags": [
              "Districtes"
            ],
            "summary": "Retorna un districte",
            "operationId": "Districtes_GetForAPIConnect",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del districte",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Districte"
                }
              }
            }
          }
        },
        "/api/Districtes": {
          "get": {
            "tags": [
              "Districtes"
            ],
            "summary": "Obté un llistat de tots els districtes",
            "operationId": "Districtes_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Districte]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Districtes"
            ],
            "summary": "Crea un Districte",
            "operationId": "Districtes_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "districte",
                "in": "body",
                "description": "Objecte Districte a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Districte"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Districte"
                }
              }
            }
          }
        },
        "/api/Districtes/APIConnect": {
          "get": {
            "tags": [
              "Districtes"
            ],
            "summary": "Obté un llistat de tots els districtes",
            "operationId": "Districtes_GetListForAPIConnect",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Districte]"
                }
              }
            }
          }
        },
        "/api/Divisions/{id}": {
          "get": {
            "tags": [
              "Divisions"
            ],
            "summary": "Retorna una divisió",
            "operationId": "Divisions_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de la divisió",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Divisio"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Divisions"
            ],
            "summary": "Actualitza un Divisio",
            "operationId": "Divisions_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'Divisio a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "divisio",
                "in": "body",
                "description": "Divisio a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Divisio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Divisio"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Divisions"
            ],
            "summary": "Esborra un Divisio y tota la seva informació associada",
            "operationId": "Divisions_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Divisio (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Divisions": {
          "get": {
            "tags": [
              "Divisions"
            ],
            "summary": "Obté un llistat de totes les divisions",
            "operationId": "Divisions_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Divisio]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Divisions"
            ],
            "summary": "Crea un Divisio",
            "operationId": "Divisions_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "divisio",
                "in": "body",
                "description": "Objecte Divisio a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Divisio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Divisio"
                }
              }
            }
          }
        },
        "/api/DtoFlotants/User/{idUser}": {
          "get": {
            "tags": [
              "DtoFlotants"
            ],
            "summary": "Retorna el districte flotant asignat a un usuari, si el té.",
            "operationId": "DtoFlotants_GetByUser",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idUser",
                "in": "path",
                "description": "Identificador d'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/DtoFlotant"
                }
              }
            }
          }
        },
        "/api/DtoFlotants/Dto/{idDto}": {
          "get": {
            "tags": [
              "DtoFlotants"
            ],
            "summary": "Retorna un la llista de 'codis' d'usuaris asignats a un districte flotant",
            "operationId": "DtoFlotants_GetUsersInDto",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idDto",
                "in": "path",
                "description": "Identificador d'usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[DtoFlotant]"
                }
              }
            }
          }
        },
        "/api/DtoFlotants": {
          "get": {
            "tags": [
              "DtoFlotants"
            ],
            "summary": "Obté un llistat de tots els DtoFlotants",
            "operationId": "DtoFlotants_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[DtoFlotant]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "DtoFlotants"
            ],
            "summary": "Crea un DtoFlotant",
            "operationId": "DtoFlotants_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "DtoFlotant",
                "in": "body",
                "description": "Objecte DtoFlotant a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DtoFlotant"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/DtoFlotant"
                }
              }
            }
          }
        },
        "/api/DtoFlotants/{idUser}": {
          "put": {
            "tags": [
              "DtoFlotants"
            ],
            "summary": "Actualitza un DtoFlotant",
            "operationId": "DtoFlotants_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idUser",
                "in": "path",
                "description": "Identificador (username) de l'DtoFlotant a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "DtoFlotant",
                "in": "body",
                "description": "DtoFlotant a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DtoFlotant"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/DtoFlotant"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "DtoFlotants"
            ],
            "summary": "Esborra un DtoFlotant y tota la seva informació associada",
            "operationId": "DtoFlotants_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "idUser",
                "in": "path",
                "description": "Identificador d'DtoFlotant (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Funcions/{idApp}/{index}": {
          "get": {
            "tags": [
              "Funcions"
            ],
            "summary": "Obté les dades de'una determinada funció",
            "operationId": "Funcions_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "index",
                "in": "path",
                "description": "Índex de funció",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Funcio"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Funcions"
            ],
            "summary": "Esborra una funcio d'aplicació",
            "operationId": "Funcions_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "index",
                "in": "path",
                "description": "Índex de funció",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Funcions/{idApp}": {
          "get": {
            "tags": [
              "Funcions"
            ],
            "summary": "Obté un llistat de totes les funcions d'una aplicació",
            "operationId": "Funcions_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Funcio]"
                }
              }
            }
          }
        },
        "/api/Funcions/Count/{idApp}": {
          "get": {
            "tags": [
              "Funcions"
            ],
            "summary": "Obté el No. de funcions d'una aplicació",
            "operationId": "Funcions_GetCountByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Funcions": {
          "put": {
            "tags": [
              "Funcions"
            ],
            "summary": "Actualitza una funció",
            "operationId": "Funcions_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "funcio",
                "in": "body",
                "description": "Funció a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Funcio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Funcio"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Funcions"
            ],
            "summary": "Crea una funció",
            "operationId": "Funcions_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "funcio",
                "in": "body",
                "description": "Objecte funció a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Funcio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Funcio"
                }
              }
            }
          }
        },
        "/api/Grups": {
          "get": {
            "tags": [
              "Grups"
            ],
            "summary": "Obté un llistat de tots els grups",
            "operationId": "Grups_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Grup]"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Grups"
            ],
            "summary": "Actualitza un grup",
            "operationId": "Grups_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "grup",
                "in": "body",
                "description": "Grup a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Grup"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Grup"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Grups"
            ],
            "summary": "Crea un grup",
            "operationId": "Grups_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "grup",
                "in": "body",
                "description": "Grup a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Grup"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Grup"
                }
              }
            }
          }
        },
        "/api/Grups/{idGrup}": {
          "get": {
            "tags": [
              "Grups"
            ],
            "summary": "Obté un grup d'una aplicació amb les seves variables",
            "operationId": "Grups_GetById",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador de grup",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Grup"
                }
              }
            }
          }
        },
        "/api/Grups/Codi/{codiGrup}": {
          "get": {
            "tags": [
              "Grups"
            ],
            "summary": "Obté un grup d'una aplicació amb les seves variables",
            "operationId": "Grups_GetByCodi",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiGrup",
                "in": "path",
                "description": "Codi de grup",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Grup"
                }
              }
            }
          }
        },
        "/api/Grups/Aplicacio/{codiAplicacio}": {
          "get": {
            "tags": [
              "Grups"
            ],
            "summary": "Obté un llistat de tots els grups d'una aplicació amb les seves variables",
            "operationId": "Grups_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Grup]"
                }
              }
            }
          }
        },
        "/api/Grups/Admin/{codiAdmin}": {
          "get": {
            "tags": [
              "Grups"
            ],
            "summary": "Obté un llistat de totes els grups funcionals que pot administra un usuari administrador de cualsevol aplicació",
            "operationId": "Grups_GetByAdmin",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAdmin",
                "in": "path",
                "description": "Codi d'usuari admninistrador",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Grup]"
                }
              }
            }
          }
        },
        "/api/Grups/{codiAplicacio}/{idGrup}": {
          "delete": {
            "tags": [
              "Grups"
            ],
            "summary": "Esborra un grup d'aplicació",
            "operationId": "Grups_DeleteById",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador del grup",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Grups/Codi/{codiAplicacio}/{codiGrup}": {
          "delete": {
            "tags": [
              "Grups"
            ],
            "summary": "Esborra un grup d'aplicació ( per codi )",
            "operationId": "Grups_DeleteByCodi",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiGrup",
                "in": "path",
                "description": "Codi del grup",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Handlers/{id}": {
          "get": {
            "tags": [
              "Handlers"
            ],
            "summary": "Retorna un Handler",
            "operationId": "Handlers_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del districte",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Handler"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Handlers"
            ],
            "summary": "Actualitza un Handler",
            "operationId": "Handlers_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'Handler a actualitzar",
                "required": true,
                "type": "integer",
                "format": "int64"
              },
              {
                "name": "handler",
                "in": "body",
                "description": "Handler a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Handler"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Handler"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Handlers"
            ],
            "summary": "Esborra un Handler y tota la seva informació associada",
            "operationId": "Handlers_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Handler",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Handlers": {
          "get": {
            "tags": [
              "Handlers"
            ],
            "summary": "Obté un llistat de tots els handlers",
            "operationId": "Handlers_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Handler]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Handlers"
            ],
            "summary": "Crea un Handler",
            "operationId": "Handlers_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "handler",
                "in": "body",
                "description": "Objecte Handler a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Handler"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Handler"
                }
              }
            }
          }
        },
        "/api/Historics/HistAutoritzacions": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de totes les autoritzacions",
            "operationId": "Historics_GetListAutoritzacions",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistAutoritzacio]"
                }
              }
            }
          }
        },
        "/api/Historics/HistAssignacionsGrup": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de totes les assignacions de grup",
            "operationId": "Historics_GetListAssignacionsGrup",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistAssignacioGrup]"
                }
              }
            }
          }
        },
        "/api/Historics/HistVariablesUsuari": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de totes les variables d'usuari",
            "operationId": "Historics_GetListVariablesUsuari",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistVariableUsuari]"
                }
              }
            }
          }
        },
        "/api/Historics/HistVariablesAplicacio": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de totes les variables d'aplicació",
            "operationId": "Historics_GetListVariablesAplicacio",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistVariableAplicacio]"
                }
              }
            }
          }
        },
        "/api/Historics/HistVariablesGrup": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de totes les variables de grup",
            "operationId": "Historics_GetListVariablesGrup",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistVariableGrup]"
                }
              }
            }
          }
        },
        "/api/Historics/HistFuncions": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de totes les funcions",
            "operationId": "Historics_GetListFuncions",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistFuncio]"
                }
              }
            }
          }
        },
        "/api/Historics/HistGrups": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de tots els grups",
            "operationId": "Historics_GetListGrups",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistGrup]"
                }
              }
            }
          }
        },
        "/api/Historics/HistPerfils": {
          "get": {
            "tags": [
              "Historics"
            ],
            "summary": "Obté un llistat de tots els perfils",
            "operationId": "Historics_GetListPerfils",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[HistPerfil]"
                }
              }
            }
          }
        },
        "/api/MobLlocs/{id}": {
          "get": {
            "tags": [
              "MobLlocs"
            ],
            "summary": "Retorna un lloc ( Districte flotant - MOB )",
            "operationId": "MobLlocs_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del lloc ( Districte flotant - MOB )",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/MobLloc"
                }
              }
            }
          },
          "put": {
            "tags": [
              "MobLlocs"
            ],
            "summary": "Actualitza un lloc ( Districte flotant - MOB )",
            "operationId": "MobLlocs_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de lloc ( Districte flotant - MOB ) a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "lloc",
                "in": "body",
                "description": "Lloc ( Districte flotant - MOB ) a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MobLloc"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/MobLloc"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "MobLlocs"
            ],
            "summary": "Esborra un lloc ( Districte flotant - MOB ) y tota la seva informació associada",
            "operationId": "MobLlocs_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador de lloc ( Districte flotant - MOB )",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/MobLlocs": {
          "get": {
            "tags": [
              "MobLlocs"
            ],
            "summary": "Obté un llistat de tots els llocs ( Districte flotant - MOB )",
            "operationId": "MobLlocs_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[MobLloc]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "MobLlocs"
            ],
            "summary": "Crea un lloc ( Districte flotant - MOB )",
            "operationId": "MobLlocs_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "lloc",
                "in": "body",
                "description": "Objecte lloc ( Districte flotant - MOB ) a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/MobLloc"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/MobLloc"
                }
              }
            }
          }
        },
        "/api/Perfils": {
          "get": {
            "tags": [
              "Perfils"
            ],
            "summary": "Obté un llistat de tots els perfils",
            "operationId": "Perfils_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Perfil]"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Perfils"
            ],
            "summary": "Actualitza un perfil",
            "operationId": "Perfils_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "perfil",
                "in": "body",
                "description": "Funció a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Perfil"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Perfil"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Perfils"
            ],
            "summary": "Crea un perfil",
            "operationId": "Perfils_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "perfil",
                "in": "body",
                "description": "Objecte perfil a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Perfil"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Perfil"
                }
              }
            }
          }
        },
        "/api/Perfils/Count": {
          "get": {
            "tags": [
              "Perfils"
            ],
            "summary": "Retorna el número total de perfils del sistema",
            "operationId": "Perfils_GetCount",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Perfils/{idApp}": {
          "get": {
            "tags": [
              "Perfils"
            ],
            "summary": "Obté un llistat de totes els perfils d'una aplicació",
            "operationId": "Perfils_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Perfil]"
                }
              }
            }
          }
        },
        "/api/Perfils/Count/{idApp}": {
          "get": {
            "tags": [
              "Perfils"
            ],
            "summary": "Obté el No. de perfils d'una aplicació",
            "operationId": "Perfils_GetCountByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Perfils/Admin/{codiAdmin}": {
          "get": {
            "tags": [
              "Perfils"
            ],
            "summary": "Obté un llistat de totes els perfils que pot administra un usuari administrador de cualsevol aplicació",
            "operationId": "Perfils_GetByAdmin",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAdmin",
                "in": "path",
                "description": "Codi d'usuari admninistrador",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Perfil]"
                }
              }
            }
          }
        },
        "/api/Perfils/{idApp}/{codiPerfil}": {
          "delete": {
            "tags": [
              "Perfils"
            ],
            "summary": "Esborra un perfil d'aplicació",
            "operationId": "Perfils_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "idApp",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiPerfil",
                "in": "path",
                "description": "Codi identificador del perfil",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/RefreshTokens/{id}": {
          "get": {
            "tags": [
              "RefreshTokens"
            ],
            "summary": "Retorna una refreshToken",
            "operationId": "RefreshTokens_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del districte",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/RefreshToken"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "RefreshTokens"
            ],
            "summary": "Esborra un RefreshToken y tota la seva informació associada",
            "operationId": "RefreshTokens_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'RefreshToken (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/RefreshTokens/ClienId/{id}": {
          "get": {
            "tags": [
              "RefreshTokens"
            ],
            "summary": "Obté un llistat de tots els tokens de refresc d'un clientId",
            "operationId": "RefreshTokens_GetByClientId",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "ClientId",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[RefreshToken]"
                }
              }
            }
          }
        },
        "/api/RefreshTokens": {
          "get": {
            "tags": [
              "RefreshTokens"
            ],
            "summary": "Obté un llistat de totes les audiencies",
            "operationId": "RefreshTokens_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[RefreshToken]"
                }
              }
            }
          }
        },
        "/api/Unitats/{id}": {
          "get": {
            "tags": [
              "Unitats"
            ],
            "summary": "Retorna una unitat",
            "operationId": "Unitats_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador del Unitat",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Unitat"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Unitats"
            ],
            "summary": "Actualitza un Unitat",
            "operationId": "Unitats_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'Unitat a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "unitat",
                "in": "body",
                "description": "Unitat a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Unitat"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Unitat"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Unitats"
            ],
            "summary": "Esborra un Unitat y tota la seva informació associada",
            "operationId": "Unitats_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'Unitat (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Unitats": {
          "get": {
            "tags": [
              "Unitats"
            ],
            "summary": "Obté un llistat de totes les unitats",
            "operationId": "Unitats_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar",
                "required": false,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Unitat]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Unitats"
            ],
            "summary": "Crea un Unitat",
            "operationId": "Unitats_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "unitat",
                "in": "body",
                "description": "Objecte Unitat a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Unitat"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Unitat"
                }
              }
            }
          }
        },
        "/api/Usuaris/Count": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Retorna el número total d'usuaris al sistema",
            "operationId": "Usuaris_GetCount",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        },
        "/api/Usuaris/{id}": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Obté un usuari",
            "operationId": "Usuaris_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Códi d'usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "getRelatedInfo",
                "in": "query",
                "description": "Indica si s'ha de retornar la informació de fitxa completa (Districte | Divisio | Unitat | Categoria | Autoritzacions | OrigenBaixa)",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Usuari"
                }
              }
            }
          },
          "put": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Actualitza un usuari",
            "operationId": "Usuaris_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'usuari a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "usuari",
                "in": "body",
                "description": "Usuari a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Usuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Usuari"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Esborra un Usuari y tota la seva informació associada",
            "operationId": "Usuaris_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'usuari (username)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/Usuaris": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Obté un llistat de tots els usuaris",
            "operationId": "Usuaris_GetList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar ( per defecte cap )",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar ( per defecte 'id' )",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Número d'elements des de l'inici a no tenir en compte pel llistat ( per defecte 0 )",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Número d'elements a agafar ( per defecte 100 )",
                "required": false,
                "type": "integer",
                "format": "int32"
              },
              {
                "name": "getRelatedInfo",
                "in": "query",
                "description": "Indica si s'ha de retornar la informació bàsica d'usuari (Districte,Divisio,Unitat,Categoria)  ( per defecte false )",
                "required": false,
                "type": "boolean"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[Usuari]"
                }
              }
            }
          },
          "post": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Crea un usuari",
            "operationId": "Usuaris_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "usuari",
                "in": "body",
                "description": "Objecte usuari a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Usuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/Usuari"
                }
              }
            }
          }
        },
        "/api/Usuaris/ValidaUser/{id}/{password}/{codiAplicacio}": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Comprova la validesa de l'usuari i el mot de pas retornant informació sobre l'usuari.",
            "operationId": "Usuaris_ValidaUser",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "password",
                "in": "path",
                "description": "Mot de pas (CTRLUser)",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ValidacioUsuari"
                }
              }
            }
          }
        },
        "/api/Usuaris/Habilita/{id}": {
          "patch": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Habilita o deshabilita un usuari",
            "operationId": "Usuaris_Patch",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador (username) de l'usuari a actualitzar",
                "required": true,
                "type": "string"
              },
              {
                "name": "canviEstat",
                "in": "body",
                "description": "Objete amb la informació del canvi d'estat a realitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/CanviEstatUsuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/CanviEstatUsuari"
                }
              }
            }
          }
        },
        "/api/Usuaris/Copia": {
          "post": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Copia d'assignacions entre usuaris",
            "operationId": "Usuaris_CopyUser",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "copiaUser",
                "in": "body",
                "description": "Objete amb la informació d'una petició de copia d'assignacions entre usuaris",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/CopiaUsuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/CopiaUsuari"
                }
              }
            }
          }
        },
        "/api/Usuaris/Delegacio": {
          "post": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Delegació d'assignacions entre usuaris",
            "operationId": "Usuaris_DelegateUser",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "delegacioUser",
                "in": "body",
                "description": "Objete amb la informació d'una petició de delegació d'assignacions entre usuaris",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/DelegacioUsuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/DelegacioUsuari"
                }
              }
            }
          }
        },
        "/api/Usuaris/Excel": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Usuaris_GetExcelList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/FileDownloadModel"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/Usuaris/Excel/{id}": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Usuaris_GetExcelApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'aplicació (codigo)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/FileDownloadModel"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/Usuaris/Download/Excel": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Usuaris_DownloadExcelList",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "filter",
                "in": "query",
                "description": "Criteris de cerca a aplicar",
                "required": false,
                "type": "string"
              },
              {
                "name": "sort",
                "in": "query",
                "description": "Criteris d'ordre a aplicar",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/Usuaris/Download/Excel/{id}": {
          "get": {
            "tags": [
              "Usuaris"
            ],
            "summary": "Obté un llistat de totes les aplicacions del catàleg",
            "operationId": "Usuaris_DownloadExcelApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Identificador d'aplicació (codigo)",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "type": "object"
                }
              },
              "500": {
                "description": "Error al generar el full excel"
              }
            }
          }
        },
        "/api/VariablesAplicacio/{codiAplicacio}": {
          "get": {
            "tags": [
              "VariablesAplicacio"
            ],
            "summary": "Obté un llistat de totes les variables d'una aplicació",
            "operationId": "VariablesAplicacio_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[VariableAplicacio]"
                }
              }
            }
          }
        },
        "/api/VariablesAplicacio/{codiAplicacio}/{codiVariable}": {
          "get": {
            "tags": [
              "VariablesAplicacio"
            ],
            "summary": "Obté les dades d'una variable d'aplicació",
            "operationId": "VariablesAplicacio_GetVariable",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiVariable",
                "in": "path",
                "description": "Codi de Variable",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableAplicacio"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "VariablesAplicacio"
            ],
            "summary": "Esborra una variable d'aplicació",
            "operationId": "VariablesAplicacio_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador de l'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiVariable",
                "in": "path",
                "description": "Codi identificador de la variable",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/VariablesAplicacio/Admin/{codiAdmin}": {
          "get": {
            "tags": [
              "VariablesAplicacio"
            ],
            "summary": "Obté un llistat de totes variables d'aplicacions que pot administra un usuari administrador de cualsevol aplicació",
            "operationId": "VariablesAplicacio_GetByAdmin",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAdmin",
                "in": "path",
                "description": "Codi d'usuari admninistrador",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[VariableAplicacio]"
                }
              }
            }
          }
        },
        "/api/VariablesAplicacio": {
          "put": {
            "tags": [
              "VariablesAplicacio"
            ],
            "summary": "Actualitza una variable d'aplicació",
            "operationId": "VariablesAplicacio_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "variableAplicacio",
                "in": "body",
                "description": "Variable a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/VariableAplicacio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableAplicacio"
                }
              }
            }
          },
          "post": {
            "tags": [
              "VariablesAplicacio"
            ],
            "summary": "Crea una variable d'aplicació",
            "operationId": "VariablesAplicacio_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "variableAplicacio",
                "in": "body",
                "description": "Objecte variable a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/VariableAplicacio"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableAplicacio"
                }
              }
            }
          }
        },
        "/api/VariablesGrup/{idGrup}": {
          "get": {
            "tags": [
              "VariablesGrup"
            ],
            "summary": "Obté un llistat de totes les variables d'un grup",
            "operationId": "VariablesGrup_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador de grup",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[VariableGrup]"
                }
              }
            }
          }
        },
        "/api/VariablesGrup/Admin/{codiAdmin}": {
          "get": {
            "tags": [
              "VariablesGrup"
            ],
            "summary": "Obté un llistat de totes variables d'aplicacions que pot administra un usuari administrador de cualsevol aplicació",
            "operationId": "VariablesGrup_GetByAdmin",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAdmin",
                "in": "path",
                "description": "Codi d'usuari admninistrador",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[VariableGrup]"
                }
              }
            }
          }
        },
        "/api/VariablesGrup/{codiAplicacio}/{codiVariable}/{idGrup}": {
          "get": {
            "tags": [
              "VariablesGrup"
            ],
            "summary": "Obté una variable d'un grup",
            "operationId": "VariablesGrup_GetVariable",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador d'una aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiVariable",
                "in": "path",
                "description": "Codi identificador d'una variable",
                "required": true,
                "type": "string"
              },
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador únic de grup",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableGrup"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "VariablesGrup"
            ],
            "summary": "Esborra un variableGrup d'aplicació",
            "operationId": "VariablesGrup_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador d'una aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiVariable",
                "in": "path",
                "description": "Codi identificador d'una variable",
                "required": true,
                "type": "string"
              },
              {
                "name": "idGrup",
                "in": "path",
                "description": "Identificador únic de grup",
                "required": true,
                "type": "integer",
                "format": "int32"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/VariablesGrup": {
          "put": {
            "tags": [
              "VariablesGrup"
            ],
            "summary": "Actualitza una variable de grup",
            "operationId": "VariablesGrup_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "variableGrup",
                "in": "body",
                "description": "Variable de grup a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/VariableGrup"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableGrup"
                }
              }
            }
          },
          "post": {
            "tags": [
              "VariablesGrup"
            ],
            "summary": "Crea una variable de grup",
            "operationId": "VariablesGrup_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "variableGrup",
                "in": "body",
                "description": "Objecte variable de grup a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/VariableGrup"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableGrup"
                }
              }
            }
          }
        },
        "/api/VariablesUsuari/{codiUsuari}": {
          "get": {
            "tags": [
              "VariablesUsuari"
            ],
            "summary": "Obté un llistat de totes les variables d'un usuari",
            "operationId": "VariablesUsuari_Get",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Identificador de usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[VariableUsuari]"
                }
              }
            }
          }
        },
        "/api/VariablesUsuari/{codiAplicacio}/{codiUsuari}": {
          "get": {
            "tags": [
              "VariablesUsuari"
            ],
            "summary": "Obté un llistat de totes les variables d'un usuari per una aplicació",
            "operationId": "VariablesUsuari_GetByApp",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi d'aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Identificador de usuari",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ConjuntElements[VariableUsuari]"
                }
              }
            }
          }
        },
        "/api/VariablesUsuari/{codiAplicacio}/{codiUsuari}/{codiVariable}": {
          "get": {
            "tags": [
              "VariablesUsuari"
            ],
            "summary": "Obté una variable d'un usuari",
            "operationId": "VariablesUsuari_GetVariable",
            "consumes": [],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador d'una aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Identificador únic de usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiVariable",
                "in": "path",
                "description": "Codi identificador d'una variable",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableUsuari"
                }
              }
            }
          },
          "delete": {
            "tags": [
              "VariablesUsuari"
            ],
            "summary": "Esborra un variable d'usuari",
            "operationId": "VariablesUsuari_Delete",
            "consumes": [],
            "produces": [],
            "parameters": [
              {
                "name": "codiAplicacio",
                "in": "path",
                "description": "Codi identificador d'una aplicació",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiUsuari",
                "in": "path",
                "description": "Identificador únic de usuari",
                "required": true,
                "type": "string"
              },
              {
                "name": "codiVariable",
                "in": "path",
                "description": "Codi identificador d'una variable",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "No Content"
              }
            }
          }
        },
        "/api/VariablesUsuari": {
          "put": {
            "tags": [
              "VariablesUsuari"
            ],
            "summary": "Actualitza una variable de usuari",
            "operationId": "VariablesUsuari_Put",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "variableUsuari",
                "in": "body",
                "description": "Variable de usuari a actualitzar",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/VariableUsuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableUsuari"
                }
              }
            }
          },
          "post": {
            "tags": [
              "VariablesUsuari"
            ],
            "summary": "Crea una variable de usuari",
            "operationId": "VariablesUsuari_Post",
            "consumes": [
              "application/json",
              "text/json",
              "application/x-www-form-urlencoded"
            ],
            "produces": [
              "application/json",
              "text/json"
            ],
            "parameters": [
              {
                "name": "variableUsuari",
                "in": "body",
                "description": "Objecte variable de usuari a crear",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/VariableUsuari"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/VariableUsuari"
                }
              }
            }
          }
        }
      },
      "definitions": {
        "Administrador": {
          "type": "object",
          "properties": {
            "USER_NAME": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "TIPOADMIN": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Usuari": {
              "$ref": "#/definitions/Usuari"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Usuari": {
          "type": "object",
          "properties": {
            "USER_NAME": {
              "type": "string"
            },
            "PASS_WORD": {
              "type": "string"
            },
            "NOMBRE": {
              "type": "string"
            },
            "DEPART": {
              "type": "string"
            },
            "C_DTO": {
              "type": "string"
            },
            "C_DIV": {
              "type": "string"
            },
            "C_U_O": {
              "type": "string"
            },
            "CATEGORIA": {
              "type": "string"
            },
            "MAT_HOST": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "DNI": {
              "type": "string"
            },
            "LDAP_FULLNAME": {
              "type": "string"
            },
            "EMAIL": {
              "type": "string"
            },
            "HABILITADO": {
              "type": "string"
            },
            "FECHA_INHABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_INHABILITACION": {
              "type": "string"
            },
            "USUARIO_INHABILITACION": {
              "type": "string"
            },
            "TIPO_SIP": {
              "type": "string"
            },
            "FECHA_HABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_HABILITACION": {
              "type": "string"
            },
            "USUARIO_HABILITACION": {
              "type": "string"
            },
            "Administradors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Administrador"
              }
            },
            "Autoritzacions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Autoritzacio"
              }
            },
            "Districte": {
              "$ref": "#/definitions/Districte"
            },
            "CategoriaAssignada": {
              "$ref": "#/definitions/Categoria"
            },
            "Divisio": {
              "$ref": "#/definitions/Divisio"
            },
            "Unitat": {
              "$ref": "#/definitions/Unitat"
            },
            "OrigenBaixa": {
              "$ref": "#/definitions/OrigenBaixa"
            },
            "AssignacionsGrup": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignacioGrup"
              }
            },
            "Variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableUsuari"
              }
            },
            "OrigenAlta": {
              "$ref": "#/definitions/OrigenBaixa"
            },
            "DtoFlotant": {
              "$ref": "#/definitions/DtoFlotant"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Cataleg": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "ETIQUETA": {
              "type": "string"
            },
            "NOTAS": {
              "type": "string"
            },
            "AUTENTICACION": {
              "type": "string"
            },
            "TRAZAACTIVA": {
              "type": "string"
            },
            "TIPOTRAZA": {
              "type": "string"
            },
            "LOGACTIVO": {
              "type": "string"
            },
            "GESTION": {
              "type": "string"
            },
            "Autoritzacions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Autoritzacio"
              }
            },
            "Perfils": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Perfil"
              }
            },
            "Administradors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Administrador"
              }
            },
            "Funcions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Funcio"
              }
            },
            "VariablesAplicacio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableAplicacio"
              }
            },
            "Grups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Grup"
              }
            },
            "VariablesGrup": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGrup"
              }
            },
            "VariablesUsuari": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableUsuari"
              }
            },
            "AssignacioGrup": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignacioGrup"
              }
            },
            "AudienciaAutoritzacio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaAutoritzacio"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Autoritzacio": {
          "type": "object",
          "properties": {
            "USER_NAME": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_PER": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "HABILITADO": {
              "type": "string"
            },
            "FECHA_INHABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_INHABILITACION": {
              "type": "string"
            },
            "USUARIO_INHABILITACION": {
              "type": "string"
            },
            "TIPO_SIP": {
              "type": "string"
            },
            "FECHA_HABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_HABILITACION": {
              "type": "string"
            },
            "USUARIO_HABILITACION": {
              "type": "string"
            },
            "USU_DELEGADO": {
              "type": "string"
            },
            "FECHA_INI_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "FECHA_FIN_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "Usuari": {
              "$ref": "#/definitions/Usuari"
            },
            "Perfil": {
              "$ref": "#/definitions/Perfil"
            },
            "OrigenBaixa": {
              "$ref": "#/definitions/OrigenBaixa"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Districte": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Usuaris": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Categoria": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Usuari": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Divisio": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Usuaris": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Unitat": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Usuaris": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "OrigenBaixa": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "Autoritzacio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Autoritzacio"
              }
            },
            "Usuari": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "UsuariAlta": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "AudienciaAutoritzacio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaAutoritzacio"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "AssignacioGrup": {
          "type": "object",
          "properties": {
            "COD_APLI": {
              "type": "string"
            },
            "ID_GRUPO": {
              "format": "int32",
              "type": "integer"
            },
            "USER_NAME": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "USU_DELEGADO": {
              "type": "string"
            },
            "FECHA_INI_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "FECHA_FIN_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "Usuari": {
              "$ref": "#/definitions/Usuari"
            },
            "Grup": {
              "$ref": "#/definitions/Grup"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "VariableUsuari": {
          "type": "object",
          "properties": {
            "COD_APLI": {
              "type": "string"
            },
            "USER_NAME": {
              "type": "string"
            },
            "COD_VAR": {
              "type": "string"
            },
            "VALOR": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "USU_DELEGADO": {
              "type": "string"
            },
            "FECHA_INI_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "FECHA_FIN_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "VALOR_DELEGADO": {
              "type": "string"
            },
            "INTERCAMBIADO": {
              "type": "string"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "Usuari": {
              "$ref": "#/definitions/Usuari"
            },
            "VariableAplicacio": {
              "$ref": "#/definitions/VariableAplicacio"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "DtoFlotant": {
          "type": "object",
          "properties": {
            "USER_NAME": {
              "type": "string"
            },
            "C_DTO": {
              "type": "string"
            },
            "DATA_CANVI": {
              "format": "date-time",
              "type": "string"
            },
            "Usuari": {
              "$ref": "#/definitions/Usuari"
            },
            "MobLloc": {
              "$ref": "#/definitions/MobLloc"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Perfil": {
          "type": "object",
          "properties": {
            "COD_APLI": {
              "type": "string"
            },
            "COD_PER": {
              "type": "string"
            },
            "PERFIL": {
              "type": "string"
            },
            "DES_PER": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "EJECUTABLES": {
              "type": "string"
            },
            "Catalegs": {
              "$ref": "#/definitions/Cataleg"
            },
            "Autoritzacions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Autoritzacio"
              }
            },
            "AudienciaAutoritzacio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaAutoritzacio"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Funcio": {
          "type": "object",
          "properties": {
            "COD_APLI": {
              "type": "string"
            },
            "ORDEN": {
              "type": "string"
            },
            "FUNCION": {
              "type": "string"
            },
            "INDICE": {
              "format": "int32",
              "type": "integer"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "VariableAplicacio": {
          "type": "object",
          "properties": {
            "COD_APLI": {
              "type": "string"
            },
            "COD_VAR": {
              "type": "string"
            },
            "DESC_VAR": {
              "type": "string"
            },
            "VALOR": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "VariablesUsuari": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableUsuari"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Grup": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int32",
              "type": "integer"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_GRUPO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "VariablesGrup": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGrup"
              }
            },
            "AssignacionsGrup": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignacioGrup"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "VariableGrup": {
          "type": "object",
          "properties": {
            "COD_APLI": {
              "type": "string"
            },
            "ID_GRUPO": {
              "format": "int32",
              "type": "integer"
            },
            "COD_VAR": {
              "type": "string"
            },
            "VALOR": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "Grups": {
              "$ref": "#/definitions/Grup"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "AudienciaAutoritzacio": {
          "type": "object",
          "properties": {
            "CLIENTID": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_PER": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "HABILITADO": {
              "type": "string"
            },
            "FECHA_INHABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_INHABILITACION": {
              "type": "string"
            },
            "USUARIO_INHABILITACION": {
              "type": "string"
            },
            "FECHA_HABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_HABILITACION": {
              "type": "string"
            },
            "USUARIO_HABILITACION": {
              "type": "string"
            },
            "Audiencia": {
              "$ref": "#/definitions/Audiencia"
            },
            "OrigenBaixa": {
              "$ref": "#/definitions/OrigenBaixa"
            },
            "Cataleg": {
              "$ref": "#/definitions/Cataleg"
            },
            "Perfil": {
              "$ref": "#/definitions/Perfil"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "MobLloc": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "DEPART": {
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "DtoFlotant": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DtoFlotant"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Audiencia": {
          "type": "object",
          "properties": {
            "CLIENTID": {
              "type": "string"
            },
            "CLIENTSECRET": {
              "type": "string"
            },
            "NAME": {
              "type": "string"
            },
            "ACCESSTOKENTTL": {
              "format": "int64",
              "type": "integer"
            },
            "REFRESHTOKENENABLED": {
              "format": "int32",
              "type": "integer"
            },
            "REFRESHTOKENTTL": {
              "format": "int64",
              "type": "integer"
            },
            "ACTIVE": {
              "format": "int32",
              "type": "integer"
            },
            "ALLOWEDORIGIN": {
              "type": "string"
            },
            "URLRETORNO": {
              "type": "string"
            },
            "TOKENTYPE": {
              "type": "string"
            },
            "AudienciaHandlerBag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandlerBag"
              }
            },
            "AudienciaAutoritzacio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaAutoritzacio"
              }
            },
            "AudienciaHandler": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandler"
              }
            },
            "AudienciaType": {
              "$ref": "#/definitions/AudienciaType"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "AudienciaHandlerBag": {
          "type": "object",
          "properties": {
            "CLIENTID": {
              "type": "string"
            },
            "HANDLERID": {
              "format": "int64",
              "type": "integer"
            },
            "BAGID": {
              "format": "int64",
              "type": "integer"
            },
            "Audiencia": {
              "$ref": "#/definitions/Audiencia"
            },
            "Handler": {
              "$ref": "#/definitions/Handler"
            },
            "Bag": {
              "$ref": "#/definitions/Bag"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "AudienciaHandler": {
          "type": "object",
          "properties": {
            "CLIENTID": {
              "type": "string"
            },
            "HANDLERID": {
              "format": "int64",
              "type": "integer"
            },
            "DUMMY": {
              "type": "string"
            },
            "Audiencia": {
              "$ref": "#/definitions/Audiencia"
            },
            "handler": {
              "$ref": "#/definitions/Handler"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "AudienciaType": {
          "type": "object",
          "properties": {
            "ID": {
              "type": "string"
            },
            "DESCRIPTION": {
              "type": "string"
            },
            "Audiencia": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Audiencia"
              }
            },
            "HandlerBag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HandlerBag"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Handler": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "NAME": {
              "type": "string"
            },
            "DESCRIPTION": {
              "type": "string"
            },
            "REQUIRED": {
              "type": "string"
            },
            "AudienciaHandlerBag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandlerBag"
              }
            },
            "HandlerBag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HandlerBag"
              }
            },
            "AudienciaHandler": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandler"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Bag": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "KEY": {
              "type": "string"
            },
            "VALUE": {
              "type": "string"
            },
            "Audiencias_Handlers_Bag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandlerBag"
              }
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "HandlerBag": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "HANDLERID": {
              "format": "int64",
              "type": "integer"
            },
            "KEY": {
              "type": "string"
            },
            "DEFAULTVALUE": {
              "type": "string"
            },
            "TOKENTYPE": {
              "type": "string"
            },
            "Handler": {
              "$ref": "#/definitions/Handler"
            },
            "AudienciaType": {
              "$ref": "#/definitions/AudienciaType"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Administrador]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Administrador"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Cataleg]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cataleg"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "FileDownloadModel": {
          "description": "",
          "type": "object",
          "properties": {
            "Name": {
              "description": "Nom de l'arxiu",
              "type": "string"
            },
            "Length": {
              "format": "int64",
              "description": "Longitut de l'arxiu",
              "type": "integer"
            },
            "Data": {
              "format": "byte",
              "description": "Arxiu",
              "type": "string"
            }
          }
        },
        "ConjuntElements[AssignacioGrup]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssignacioGrup"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Audiencia]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Audiencia"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[AudienciasUser]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciasUser"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "AudienciasUser": {
          "type": "object",
          "properties": {
            "CLIENTID": {
              "type": "string"
            },
            "NAME": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "USER_NAME": {
              "type": "string"
            },
            "URLRETORNO": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[AudienciaAutoritzacio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaAutoritzacio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[AudienciaHandler]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandler"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[AudienciaHandlerBag]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaHandlerBag"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[AudienciaType]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AudienciaType"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Autoritzacio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Autoritzacio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Bag]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bag"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Categoria]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Categoria"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Departament]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Departament"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "Departament": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "SUPERDEP": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Districte]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Districte"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Divisio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Divisio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[DtoFlotant]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DtoFlotant"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Funcio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Funcio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Grup]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Grup"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Handler]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Handler"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistAutoritzacio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistAutoritzacio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistAutoritzacio": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "USER_NAME": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_PER": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "HABILITADO": {
              "type": "string"
            },
            "FECHA_INHABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_INHABILITACION": {
              "type": "string"
            },
            "USUARIO_INHABILITACION": {
              "type": "string"
            },
            "TIPO_SIP": {
              "type": "string"
            },
            "FECHA_HABILITACION": {
              "format": "date-time",
              "type": "string"
            },
            "ORIGEN_HABILITACION": {
              "type": "string"
            },
            "USUARIO_HABILITACION": {
              "type": "string"
            },
            "RECONCILIADO": {
              "type": "string"
            },
            "USU_DELEGADO": {
              "type": "string"
            },
            "FECHA_INI_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "FECHA_FIN_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistAssignacioGrup]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistAssignacioGrup"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistAssignacioGrup": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "ID_GRUPO": {
              "format": "int32",
              "type": "integer"
            },
            "USER_NAME": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "USU_DELEGADO": {
              "type": "string"
            },
            "FECHA_INI_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "FECHA_FIN_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistVariableUsuari]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistVariableUsuari"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistVariableUsuari": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "USER_NAME": {
              "type": "string"
            },
            "COD_VAR": {
              "type": "string"
            },
            "VALOR": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "USU_DELEGADO": {
              "type": "string"
            },
            "FECHA_INI_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "FECHA_FIN_DELEGADO": {
              "format": "date-time",
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistVariableAplicacio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistVariableAplicacio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistVariableAplicacio": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_VAR": {
              "type": "string"
            },
            "DESC_VAR": {
              "type": "string"
            },
            "VALOR": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistVariableGrup]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistVariableGrup"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistVariableGrup": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "ID_GRUPO": {
              "format": "int32",
              "type": "integer"
            },
            "COD_VAR": {
              "type": "string"
            },
            "VALOR": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistFuncio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistFuncio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistFuncio": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "ORDEN": {
              "type": "string"
            },
            "FUNCION": {
              "type": "string"
            },
            "INDICE": {
              "format": "int32",
              "type": "integer"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistGrup]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistGrup"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistGrup": {
          "type": "object",
          "properties": {
            "ID_HIST": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "ID": {
              "format": "int32",
              "type": "integer"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_GRUPO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[HistPerfil]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HistPerfil"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "HistPerfil": {
          "type": "object",
          "properties": {
            "ID": {
              "format": "int64",
              "type": "integer"
            },
            "DATA_HIST": {
              "format": "date-time",
              "type": "string"
            },
            "ACCIO": {
              "type": "string"
            },
            "COD_APLI": {
              "type": "string"
            },
            "COD_PER": {
              "type": "string"
            },
            "PERFIL": {
              "type": "string"
            },
            "DES_PER": {
              "type": "string"
            },
            "ALTA_REG": {
              "format": "date-time",
              "type": "string"
            },
            "MODI_REG": {
              "format": "date-time",
              "type": "string"
            },
            "USU_ALTA": {
              "type": "string"
            },
            "USU_MODI": {
              "type": "string"
            },
            "EJECUTABLES": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[MobLloc]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MobLloc"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Perfil]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Perfil"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "RefreshToken": {
          "type": "object",
          "properties": {
            "ID": {
              "type": "string"
            },
            "SUBJECT": {
              "type": "string"
            },
            "CLIENTID": {
              "type": "string"
            },
            "ISSUEDUTC": {
              "format": "date-time",
              "type": "string"
            },
            "EXPIRESUTC": {
              "format": "date-time",
              "type": "string"
            },
            "PROTECTEDTICKET": {
              "type": "string"
            },
            "EntityState": {
              "format": "int32",
              "enum": [
                2,
                4,
                8,
                16
              ],
              "type": "integer"
            },
            "Id": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[RefreshToken]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RefreshToken"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Unitat]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unitat"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[Usuari]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Usuari"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ValidacioUsuari": {
          "type": "object",
          "properties": {
            "Resultat": {
              "type": "string"
            },
            "Usuari": {
              "$ref": "#/definitions/Usuari"
            }
          }
        },
        "CanviEstatUsuari": {
          "type": "object",
          "properties": {
            "Instant": {
              "format": "date-time",
              "type": "string"
            },
            "Usuari": {
              "type": "string"
            },
            "OrigenCodi": {
              "type": "string"
            },
            "OrigenDescripcio": {
              "type": "string"
            },
            "Estat": {
              "type": "boolean"
            }
          }
        },
        "CopiaUsuari": {
          "type": "object",
          "properties": {
            "tipoCopia": {
              "format": "int32",
              "type": "integer"
            },
            "operacion": {
              "format": "int32",
              "type": "integer"
            },
            "UsuarioOrigen": {
              "$ref": "#/definitions/ElementUsuariCopia"
            },
            "UsuarioDestino": {
              "$ref": "#/definitions/ElementUsuariCopia"
            },
            "AplicacionsAutoritzades": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AplicacioAsignacio"
              }
            },
            "result": {
              "format": "int32",
              "type": "integer"
            },
            "message": {
              "type": "string"
            },
            "NAUTORITZACIONS": {
              "format": "int32",
              "type": "integer"
            },
            "NASSIGNACIONS": {
              "format": "int32",
              "type": "integer"
            },
            "NCONFIGURACIO": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ElementUsuariCopia": {
          "type": "object",
          "properties": {
            "USERNAME": {
              "type": "string"
            },
            "NOMBRE": {
              "type": "string"
            },
            "DNI": {
              "type": "string"
            },
            "EMAIL": {
              "type": "string"
            }
          }
        },
        "AplicacioAsignacio": {
          "type": "object",
          "properties": {
            "CODIGO": {
              "type": "string"
            },
            "DESCRIPCION": {
              "type": "string"
            },
            "AUTORITZACIONS": {
              "type": "boolean"
            },
            "ASSIGNACIONS": {
              "type": "boolean"
            },
            "CONFIGURACIO": {
              "type": "boolean"
            }
          }
        },
        "DelegacioUsuari": {
          "type": "object",
          "properties": {
            "UsuarioOrigen": {
              "$ref": "#/definitions/ElementUsuariCopia"
            },
            "UsuariosDestino": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementUsuariCopia"
              }
            },
            "Perfils": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementPerfilDelegacio"
              }
            },
            "Assignacions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementAssignacioGrupDelegacio"
              }
            },
            "Variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementVariableDelegacio"
              }
            },
            "DataInicial": {
              "format": "date-time",
              "type": "string"
            },
            "DataFinal": {
              "format": "date-time",
              "type": "string"
            },
            "result": {
              "format": "int32",
              "type": "integer"
            },
            "message": {
              "type": "string"
            },
            "NAUTORITZACIONS": {
              "format": "int32",
              "type": "integer"
            },
            "NASSIGNACIONS": {
              "format": "int32",
              "type": "integer"
            },
            "NCONFIGURACIO": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ElementPerfilDelegacio": {
          "type": "object",
          "properties": {
            "CODAPLI": {
              "type": "string"
            },
            "CODPER": {
              "type": "string"
            }
          }
        },
        "ElementAssignacioGrupDelegacio": {
          "type": "object",
          "properties": {
            "CODAPLI": {
              "type": "string"
            },
            "IDGRUPO": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ElementVariableDelegacio": {
          "type": "object",
          "properties": {
            "CODAPLI": {
              "type": "string"
            },
            "CODVAR": {
              "type": "string"
            }
          }
        },
        "ConjuntElements[VariableAplicacio]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableAplicacio"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[VariableGrup]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGrup"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "ConjuntElements[VariableUsuari]": {
          "type": "object",
          "properties": {
            "LlistatElements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableUsuari"
              }
            },
            "NumTotalElements": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "x-ibm-configuration": {
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        },
        "assembly": {
          "execute": [
            {
              "activity-log": {
                "title": "activity-log",
                "content": "activity",
                "error-content": "payload",
                "version": "1.0.0"
              }
            },
            {
              "set-variable": {
                "title": "set-variable",
                "actions": [
                  {
                    "set": "message.headers.X-User",
                    "value": "$(oauth.resource-owner)"
                  }
                ],
                "version": "1.0.0"
              }
            },
            {
              "invoke": {
                "title": "invoke",
                "timeout": 60,
                "verb": "keep",
                "cache-response": "protocol",
                "cache-ttl": 900,
                "version": "1.0.0",
                "target-url": "https://riapi001.imi.bcn:41443$(request.path)",
                "output": "AuthorizationResponse",
                "description": "Invocación al servicio de autorización."
              }
            },
            {
              "switch": {
                "title": "switch",
                "case": [
                  {
                    "condition": "apim.getvariable('AuthorizationResponse.status.code')!=200",
                    "execute": [
                      {
                        "map": {
                          "title": "map",
                          "inputs": {},
                          "outputs": {
                            "output": {
                              "schema": {
                                "type": "object",
                                "properties": {
                                  "response": {
                                    "type": "string",
                                    "name": "response"
                                  }
                                }
                              },
                              "variable": "message.body"
                            }
                          },
                          "actions": [
                            {
                              "set": "output.response",
                              "default": "Ususario no autorizado para ejecutar este servicio!!!"
                            }
                          ],
                          "version": "1.0.0"
                        }
                      }
                    ]
                  },
                  {
                    "otherwise": [
                      {
                        "set-variable": {
                          "title": "set-variable",
                          "actions": [
                            {
                              "set": "message.headers.X-identity-info",
                              "value": "$(oauth.miscinfo)"
                            }
                          ],
                          "version": "1.0.0"
                        }
                      },
                      {
                        "invoke": {
                          "title": "invoke",
                          "timeout": 60,
                          "verb": "keep",
                          "cache-response": "protocol",
                          "cache-ttl": 900,
                          "version": "1.0.0",
                          "target-url": "https://netippra.corppre.imi.bcn:447/ControlUserCorp2Api$(request.path)"
                        }
                      }
                    ]
                  }
                ],
                "version": "1.0.0"
              }
            }
          ],
          "catch": []
        }
      },
      "basePath": "/",
      "securityDefinitions": {
        "oauth-1": {
          "type": "oauth2",
          "description": "",
          "flow": "password",
          "scopes": {
            "scope1": "afernandezm@bcn.cat"
          },
          "tokenUrl": "https://riapi001.imi.bcn/arquitectura/sb/confidential/oauth2/token",
          "x-tokenIntrospect": {
            "tls-profile": "afernandezm@bcn.cat",
            "url": ""
          }
        },
        "api-key-2": {
          "type": "apiKey",
          "description": "",
          "in": "header",
          "name": "X-IBM-Client-Secret"
        },
        "api-key-1": {
          "type": "apiKey",
          "description": "",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "security": [
        {
          "oauth-1": [
            "scope1"
          ],
          "api-key-2": [],
          "api-key-1": []
        }
      ]
    },
    {
      "swagger": "2.0",
      "info": {
        "x-ibm-name": "nosecurityapi",
        "title": "No Security",
        "version": "1.0.0",
        "description": "This API has no security definitions",
        "x-ibm-summary": ""
      },
      "schemes": [
        "https"
      ],
      "host": "www.example.com",
      "basePath": "/demo",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "securityDefinitions": {
        "clientIdHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-IBM-Client-Id"
        }
      },
      "security": [],
      "x-ibm-configuration": {
        "testable": true,
        "enforced": true,
        "cors": {
          "enabled": true
        },
        "phase": "realized",
        "type": "rest",
        "gateway": "datapower-gateway",
        "properties": {
          "target-url": {
            "value": "http://example.com/operation-name",
            "description": "The URL of the target service",
            "encoded": false
          }
        },
        "servers": [
          {
            "url": "https://www.example.com/path/demo",
            "description": "Default Staging server."
          }
        ]
      },
      "paths": {
        "/image": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK"
              }
            }
          }
        }
      },
      "tags": []
    },
    {
      "swagger": "2.0",
      "info": {
        "version": "1.0.0",
        "title": "Accounts",
        "x-ibm-name": "accounts",
        "description": "Seamlessly morph focused innovation with performance based platforms. Globally promote distinctive customer service and technically sound customer service. Professionally optimize customer directed web services rather than sticky products. Dynamically empower pandemic testing procedures for ethical applications. Professionally simplify out-of-the-box paradigms through compelling human capital.\n\n\nQuickly engage backward-compatible e-tailers rather than performance based technology. Holisticly predominate fully tested solutions rather than client-centric applications. Phosfluorescently architect high standards in resources via client-focused growth strategies. Progressively engage multifunctional content whereas goal-oriented expertise. Continually impact superior potentialities without.",
        "termsOfService": "Terms",
        "contact": {
          "name": "A Person",
          "email": "a_person@uk.ibm.com",
        },
        "license": {
          "name": "MIT",
          "url": "http://swagger.io/terms/"
        },
        "x-ibm-summary": ""
      },
      "host": "blah.example.com",
      "basePath": "/demo/accounts",
      "paths": {
        "/balance": {
          "get": {
            "responses": {
              "200": {
                "description": "200 OK",
                "schema": {
                  "properties": {
                    "Balance": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "required": [
                    "Balance"
                  ]
                }
              }
            },
            "parameters": [
              {
                "name": "customer_id",
                "type": "string",
                "required": true,
                "in": "query"
              }
            ]
          }
        }
      },
      "securityDefinitions": {
        "clientID": {
          "description": "",
          "in": "header",
          "name": "X-IBM-Client-Id",
          "type": "apiKey"
        }
      },
      "security": [
        {
          "clientID": []
        }
      ],
      "x-ibm-configuration": {
        "enforced": true,
        "testable": true,
        "phase": "realized",
        "cors": {
          "enabled": true
        },
        "targets": {
          "AccountService": {
            "swagger": "2.0",
            "info": {
              "title": "AccountService",
              "description": "",
              "x-ibm-name": "accountservice",
              "version": "1.0.0"
            },
            "schemes": [
              "https"
            ],
            "basePath": "/AccountService",
            "produces": [
              "application/xml"
            ],
            "consumes": [
              "text/xml"
            ],
            "securityDefinitions": {
              "clientID": {
                "type": "apiKey",
                "name": "X-IBM-Client-Id",
                "in": "header",
                "description": ""
              }
            },
            "security": [
              {
                "clientID": []
              }
            ],
            "x-ibm-configuration": {
              "type": "wsdl",
              "wsdl-definition": {
                "wsdl": "578639e5e4b035f005173c05",
                "service": "AccountService",
                "port": "AccountPort",
                "soap-version": "1.1"
              },
              "assembly": {
                "execute": [
                  {
                    "proxy": {
                      "title": "proxy",
                      "target-url": "http://example.com/blah"
                    }
                  }
                ]
              },
              "gateway": "datapower-gateway",
              "enforced": true,
              "testable": true,
              "phase": "realized",
              "cors": {
                "enabled": true
              }
            },
            "paths": {
              "/getBalance": {
                "post": {
                  "summary": "Operation getBalance",
                  "description": "",
                  "operationId": "getBalance",
                  "parameters": [
                    {
                      "in": "body",
                      "name": "body",
                      "required": true,
                      "schema": {
                        "type": "object",
                        "properties": {
                          "Envelope": {
                            "xml": {
                              "prefix": "soap-env",
                              "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                            },
                            "type": "object",
                            "properties": {
                              "Header": {
                                "type": "object",
                                "properties": {
                                  "wsSecurityHeader": {
                                    "xml": {
                                      "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                                      "prefix": "wsse"
                                    },
                                    "type": "object",
                                    "properties": {
                                      "UsernameToken": {
                                        "type": "object",
                                        "properties": {
                                          "Username": {
                                            "type": "string"
                                          },
                                          "Password": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "Body": {
                                "type": "object",
                                "properties": {
                                  "getBalance": {
                                    "xml": {
                                      "namespace": "http://bankA.sample.ibm.com/",
                                      "prefix": "tns"
                                    },
                                    "type": "object",
                                    "properties": {
                                      "arg0": {
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    },
                                    "example": "\n<tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <arg0>3</arg0>\n</tns:getBalance>"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Header>\n\n  <wsse:wsSecurityHeader\nxmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n\n   <UsernameToken>\n\n    <Username>string</Username>\n\n    <Password>string</Password>\n\n   </UsernameToken>\n\n  </wsse:wsSecurityHeader>\n\n </soap-env:Header>\n\n <soap-env:Body>\n\n  <tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <arg0>3</arg0>\n\n  </tns:getBalance>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
                      }
                    }
                  ],
                  "responses": {
                    "default": {
                      "description": "",
                      "schema": {
                        "type": "object",
                        "properties": {
                          "Envelope": {
                            "xml": {
                              "prefix": "soap-env",
                              "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                            },
                            "type": "object",
                            "properties": {
                              "Body": {
                                "type": "object",
                                "properties": {
                                  "getBalanceResponse": {
                                    "xml": {
                                      "namespace": "http://bankA.sample.ibm.com/",
                                      "prefix": "tns"
                                    },
                                    "type": "object",
                                    "properties": {
                                      "return": {
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    },
                                    "example": "\n<tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <return>3</return>\n</tns:getBalanceResponse>"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Body>\n\n  <tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <return>3</return>\n\n  </tns:getBalanceResponse>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
                      }
                    }
                  },
                  "x-ibm-soap": {
                    "soap-action": "getBalance",
                    "soap-operation": "{http://bankA.sample.ibm.com/}getBalance"
                  }
                }
              }
            },
            "definitions": {
              "wsSecurityHeader": {
                "xml": {
                  "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                  "prefix": "wsse"
                },
                "type": "object",
                "properties": {
                  "UsernameToken": {
                    "type": "object",
                    "properties": {
                      "Username": {
                        "type": "string"
                      },
                      "Password": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "getBalanceInput": {
                "type": "object",
                "properties": {
                  "Envelope": {
                    "xml": {
                      "prefix": "soap-env",
                      "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                    },
                    "type": "object",
                    "properties": {
                      "Header": {
                        "type": "object",
                        "properties": {
                          "wsSecurityHeader": {
                            "xml": {
                              "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                              "prefix": "wsse"
                            },
                            "type": "object",
                            "properties": {
                              "UsernameToken": {
                                "type": "object",
                                "properties": {
                                  "Username": {
                                    "type": "string"
                                  },
                                  "Password": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "Body": {
                        "type": "object",
                        "properties": {
                          "getBalance": {
                            "xml": {
                              "namespace": "http://bankA.sample.ibm.com/",
                              "prefix": "tns"
                            },
                            "type": "object",
                            "properties": {
                              "arg0": {
                                "type": "integer",
                                "format": "int32"
                              }
                            },
                            "example": "\n<tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <arg0>3</arg0>\n</tns:getBalance>"
                          }
                        }
                      }
                    }
                  }
                },
                "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Header>\n\n  <wsse:wsSecurityHeader\nxmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n\n   <UsernameToken>\n\n    <Username>string</Username>\n\n    <Password>string</Password>\n\n   </UsernameToken>\n\n  </wsse:wsSecurityHeader>\n\n </soap-env:Header>\n\n <soap-env:Body>\n\n  <tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <arg0>3</arg0>\n\n  </tns:getBalance>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
              },
              "getBalanceOutput": {
                "type": "object",
                "properties": {
                  "Envelope": {
                    "xml": {
                      "prefix": "soap-env",
                      "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                    },
                    "type": "object",
                    "properties": {
                      "Body": {
                        "type": "object",
                        "properties": {
                          "getBalanceResponse": {
                            "xml": {
                              "namespace": "http://bankA.sample.ibm.com/",
                              "prefix": "tns"
                            },
                            "type": "object",
                            "properties": {
                              "return": {
                                "type": "integer",
                                "format": "int32"
                              }
                            },
                            "example": "\n<tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <return>3</return>\n</tns:getBalanceResponse>"
                          }
                        }
                      }
                    }
                  }
                },
                "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Body>\n\n  <tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <return>3</return>\n\n  </tns:getBalanceResponse>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
              },
              "getBalanceHeader": {
                "type": "object",
                "properties": {
                  "wsSecurityHeader": {
                    "xml": {
                      "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                      "prefix": "wsse"
                    },
                    "type": "object",
                    "properties": {
                      "UsernameToken": {
                        "type": "object",
                        "properties": {
                          "Username": {
                            "type": "string"
                          },
                          "Password": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "getBalance": {
                "xml": {
                  "namespace": "http://bankA.sample.ibm.com/",
                  "prefix": "tns"
                },
                "type": "object",
                "properties": {
                  "arg0": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "example": "\n<tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <arg0>3</arg0>\n</tns:getBalance>"
              },
              "getBalanceResponse": {
                "xml": {
                  "namespace": "http://bankA.sample.ibm.com/",
                  "prefix": "tns"
                },
                "type": "object",
                "properties": {
                  "return": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "example": "\n<tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <return>3</return>\n</tns:getBalanceResponse>"
              }
            }
          }
        },
        "gateway": "datapower-gateway",
        "type": "rest",
        "properties": {
          "target-url": {
            "value": "http://example.com/operation-name",
            "description": "The URL of the target service",
            "encoded": false
          }
        },
        "servers": [
          {
            "url": "https://blah.example.com/blah",
            "description": "Default Staging server."
          }
        ]
      },
      "definitions": {
        "Account Output": {
          "properties": {
            "Balance": {
              "type": "number",
              "format": "double"
            }
          },
          "required": [
            "Balance"
          ]
        }
      },
      "externalDocs": {
        "description": "Bank A Account services",
        "url": "http://blah.example.com/docs"
      },
      "schemes": [
        "https"
      ]
    },
    {
      "swagger": "2.0",
      "info": {
        "title": "Balance",
        "description": "Description for the balance service.  Monotonectally foster stand-alone potentialities without superior infrastructures. Globally extend mission-critical ROI rather than high standards in niches. Proactively evisculate market positioning meta-services and market-driven functionalities. Quickly expedite maintainable intellectual capital and resource sucking architectures. Conveniently impact parallel functionalities and web-enabled results.",
        "version": "1",
        "x-ibm-name": "balance",
        "x-ibm-summary": ""
      },
      "basePath": "/demo/balance",
      "paths": {
        "/item/{id}": {
          "get": {
            "tags": [],
            "summary": "findItemById",
            "description": "Summary - Returns an item based on a single ID",
            "parameters": [
              {
                "default": "",
                "description": "ID of item to fetch",
                "name": "id",
                "required": true,
                "type": "string",
                "in": "path"
              },
              {
                "schema": [],
                "description": "",
                "name": "body",
                "in": "body"
              }
            ],
            "responses": {
              "200": {
                "schema": {
                  "required": [
                    "id",
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "id": 1,
                    "name": "Item1",
                    "categories": "Super,Duper"
                  }
                },
                "description": "Generated Response Description",
                "examples": {
                  "application/json": {
                    "id": "1",
                    "name": "Item1",
                    "categories": "Super,Duper"
                  }
                }
              }
            },
            "deprecated": false,
            "schemes": [
              "https"
            ]
          },
          "put": {
            "tags": [],
            "summary": "updateItemById",
            "description": "Summary - Updates an item",
            "parameters": [
              {
                "schema": {
                  "required": [
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  }
                },
                "name": "body",
                "in": "body"
              },
              {
                "default": "",
                "description": "ID of item to update",
                "name": "id",
                "required": true,
                "type": "string",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "description": "Generated Response Description",
                "examples": {
                  "application/json": {
                    "code": "0",
                    "message": "1:Item1"
                  }
                }
              }
            },
            "deprecated": false,
            "schemes": [
              "https"
            ]
          },
          "post": {
            "tags": [],
            "summary": "addItemById",
            "description": "Summary - Adds a new item",
            "parameters": [
              {
                "schema": {
                  "required": [
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "name": "Item1",
                    "categories": "Super,Duper"
                  }
                },
                "name": "body",
                "in": "body"
              },
              {
                "default": "",
                "description": "ID of item to add",
                "name": "id",
                "required": true,
                "type": "string",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "schema": {
                  "required": [
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  }
                },
                "description": "Generated Response Description",
                "examples": {
                  "application/json": {
                    "code": "0",
                    "message": "1:Item1"
                  }
                }
              }
            },
            "deprecated": false,
            "schemes": [
              "https"
            ]
          },
          "delete": {
            "tags": [],
            "summary": "deleteItemByID",
            "description": "Summary - Deletes an item",
            "parameters": [
              {
                "default": "",
                "description": "ID of item to delete",
                "name": "id",
                "required": true,
                "type": "string",
                "in": "path"
              },
              {
                "schema": [],
                "description": "",
                "name": "body",
                "in": "body"
              }
            ],
            "responses": {
              "200": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "description": "Generated Response Description",
                "examples": {
                  "application/json": {
                    "code": "0",
                    "message": "1 deleted"
                  }
                }
              }
            },
            "deprecated": false,
            "schemes": [
              "https"
            ]
          }
        },
        "/items": {
          "get": {
            "tags": [],
            "summary": "findItems",
            "description": "Summary - Returns all items from the system that the user has access to",
            "parameters": [
              {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "name",
                      "categories"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "categories": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "id": 1,
                      "name": "Item1",
                      "categories": "Super,Duper"
                    }
                  }
                },
                "name": "body",
                "in": "body"
              }
            ],
            "responses": {
              "200": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "name",
                      "categories"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "categories": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "id": 1,
                      "name": "Item1",
                      "categories": "Super,Duper"
                    }
                  }
                },
                "description": "Generated Response Description",
                "examples": {
                  "application/json": {
                    "item": [
                      {
                        "id": "1",
                        "name": "Item1",
                        "categories": "Super,Duper"
                      },
                      {
                        "id": "2",
                        "name": "Item2",
                        "categories": "Super,Duper"
                      },
                      {
                        "id": "3",
                        "name": "Item3",
                        "categories": "Super,Duper"
                      },
                      {
                        "id": "4",
                        "name": "Item4",
                        "categories": "Super,Duper"
                      },
                      {
                        "id": "5",
                        "name": "Item5",
                        "categories": "Super,Duper"
                      }
                    ]
                  }
                }
              }
            },
            "deprecated": false,
            "schemes": [
              "https"
            ]
          },
          "post": {
            "tags": [],
            "summary": "addItems",
            "description": "Summary - Adds new items",
            "parameters": [
              {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "name",
                      "categories"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "categories": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "id": 1,
                      "name": "Item1",
                      "categories": "Super,Duper"
                    }
                  }
                },
                "name": "body",
                "in": "body"
              }
            ],
            "responses": {
              "200": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "description": "Generated Response Description",
                "examples": {
                  "application/json": {
                    "code": "0",
                    "message": "Items saved: 1;2;3;4;5;"
                  }
                }
              }
            },
            "deprecated": false,
            "schemes": [
              "https"
            ]
          }
        }
      },
      "definitions": {
        "item": {
          "required": [
            "id",
            "name",
            "categories"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            },
            "categories": {
              "type": "string"
            }
          },
          "example": {
            "id": 1,
            "name": "Item1",
            "categories": "Super,Duper"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "required": [
              "id",
              "name",
              "categories"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              },
              "categories": {
                "type": "string"
              }
            },
            "example": {
              "id": 1,
              "name": "Item1",
              "categories": "Super,Duper"
            }
          }
        },
        "itemsAddResponse": {
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "itemAddRequest": {
          "required": [
            "name",
            "categories"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "categories": {
              "type": "string"
            }
          },
          "example": {
            "name": "Item1",
            "categories": "Super,Duper"
          }
        },
        "itemAddResponse": {
          "required": [
            "name",
            "categories"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "categories": {
              "type": "string"
            }
          }
        },
        "itemUpdateRequest": {
          "required": [
            "name",
            "categories"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "categories": {
              "type": "string"
            }
          }
        },
        "itemUpdateResponse": {
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "itemDeleteResponse": {
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            }
          }
        }
      },
      "schemes": [
        "https"
      ],
      "tags": [],
      "securityDefinitions": {
        "API Secret": {
          "type": "apiKey",
          "description": "",
          "in": "query",
          "name": "client_secret"
        },
        "API Key": {
          "type": "apiKey",
          "name": "client_id",
          "in": "query",
          "description": ""
        }
      },
      "security": [
        {
          "API Key": [],
          "API Secret": []
        }
      ],
      "x-ibm-configuration": {
        "enforced": true,
        "phase": "realized",
        "testable": true,
        "cors": {
          "enabled": true
        },
        "type": "rest",
        "gateway": "datapower-gateway",
        "properties": {
          "target-url": {
            "value": "http://example.com/operation-name",
            "description": "The URL of the target service",
            "encoded": false
          }
        },
        "servers": [
          {
            "url": "https://blah.example.com/blah",
            "description": "Default Staging server."
          }
        ]
      },
      "host": "blah.example.com"
    }
  ]
};
