<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2019
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Installation and upgrade logic for the apic_app module.
 */

use Drupal\node\Entity\Node;

/**
 * Changes from 8.x-1.0 to 8.x-1.1 :
 *  - remove apic_image from application
 *  - add application_image to application
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8101() {

  // check if new field exists, skip if it does
  // it shouldn't, but better safe than sorry
  $newFieldConfig = \Drupal\field\Entity\FieldConfig::loadByName('node', 'application', 'application_image');
  if (!isset($newFieldConfig) || empty($newFieldConfig)) {
    /**
     * 1. Gather all apic_image values for applications and store for later
     * 2. Create 'application_image' storage
     * 3. Create 'application_image' field
     * 4. Get current settings for 'apic_image' from entity form display for 'application'
     * 5. Add 'application_image' to 'application' entity form display using settings for 'apic_image'
     * 6. Repeat 4. and 5. for entity display
     * 7. Remove apic_image field from 'application'
     * 8. Set values for new 'application_image' field based on 'apic_image' of 'application'
     **/

    // Collect all values for apic_image associated with applications
    $query = \Drupal::entityQuery('node');
    $query->condition('type', 'application');
    $results = $query->execute();

    $existingApplicationImages = [];
    if (isset($results)) {
      foreach ($results as $result) {
        $application = Node::load($result);
        if ($application !== NULL) {
          $existingApplicationImages[$result] = $application->get('apic_image')->getValue();
        }
      }
    }

    // Create a new field storage 'application_image'
    $fieldStorageConfig = \Drupal\field\Entity\FieldStorageConfig::create([
      'field_name' => 'application_image',
      'entity_type' => 'node',
      'type' => 'image',
      'required' => FALSE,
      'cardinality' => 1,
    ]);
    $fieldStorageConfig->save();

    // Create a new field for the application module
    $fieldConfig = \Drupal\field\Entity\FieldConfig::create([
      'field_name' => 'application_image',
      'entity_type' => 'node',
      'bundle' => 'application',
      'label' => t('Image'),
    ]);
    $fieldConfig->save();

    // Modify entity form display modes to show application_image field
    $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.application.default');
    if ($formDisplay !== NULL) {
      $formDisplay->setComponent('application_image', $formDisplay->getComponent('apic_image')); // copy all existing settings across from old field
      $formDisplay->save();
    }

    // Do the same for the view display modes
    $displayModes = ['default', 'card', 'content_browser', 'subscribewizard', 'teaser'];
    foreach ($displayModes as $displayMode) {
      $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.application.' . $displayMode);
      if ($viewDisplay !== NULL) {
        $viewDisplay->setComponent('application_image', $viewDisplay->getComponent('apic_image')); // copy all existing settings across from old field
        $viewDisplay->save();
      }
    }

    // Put the values we stored from apic_image back in to application_image
    foreach ($existingApplicationImages as $nodeId => $image) {
      $application = Node::load($nodeId);
      if ($application !== NULL) {
        $application->set('application_image', $image);
        $application->save();
      }
    }

    // Remove the old apic_image field from application
    $fieldConfig = \Drupal\field\Entity\FieldConfig::loadByName('node', 'application', 'apic_image');
    $fieldConfig->delete();
  }
}

/**
 * Changes from 8.x-1.1 to 8.x-1.2 :
 *  - change field length for application_redirect_endpoints
 */
function apic_app_update_8102() {
  $fieldStorageConfig = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'application_redirect_endpoints');
  $length = $fieldStorageConfig->getSetting('max_length');
  if (!isset($length) || !is_int($length) || $length < 999) {
    $length = 999;
  }
  $fieldStorageConfig->setSetting('max_length', $length);
  $isAscii = $fieldStorageConfig->getSetting('is_ascii');
  if (!isset($isAscii)) {
    $isAscii = FALSE;
  }
  $fieldStorageConfig->setSetting('is_ascii', $isAscii);
  $fieldStorageConfig->save();
}

/**
 * Changes from 8.x-1.3 to 8.x-1.4 :
 *  - hide scheduler fields
 */
function apic_app_update_8103() {
  // Modify entity form display modes to hide the scheduler and moderation fields by default
  $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.application.default');
  if ($formDisplay !== NULL) {
    foreach (['publish_on', 'unpublish_on', 'moderation_state'] as $field_name) {
      $component = $formDisplay->getComponent($field_name);
      if (isset($component)) {
        $formDisplay->removeComponent($field_name);
      }
    }
    $formDisplay->save();
  }
}
