#!groovy

// Load shared pipeline library
@Library('velox') _
def cronInterval = isPromotableBranch(env.BRANCH_NAME) || env.BRANCH_NAME == "develop-2018.4.1" ? "0 4 * * *" : ""

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '')),
  pipelineTriggers([cron(cronInterval)])
])

def pipelineOpts = [
  slackChannel: '',
  labels      : 'portal-hursley-swarm',
  nodeVersion : null
]

veloxPipeline(pipelineOpts) { p ->
  def MODULE_NAME = 'apictest'
  def REPO_NAME = 'devportal-apictest'
  def releaseName = env.CHANGE_ID ? env.CHANGE_BRANCH : env.BRANCH_NAME
  def LOCAL_BRANCH_NAME = env.BRANCH_NAME

  // Used by velox library in slack notification send
  env.GIT_COMMIT_URL = "https://github.ibm.com/apimesh/${REPO_NAME}/commit/${env.GIT_COMMIT}"
  env.GIT_COMMIT_MSG = sh (script: 'git log --format=%B -n 1 $GIT_COMMIT | head -n 1', returnStdout: true).trim()
  def localPath = "${HOME}/workspace/${REPO_NAME}"
  def credentialsId = '328dda1a-f29d-4758-bc2a-cb79135d0e2f'

  p.PR {
    LOCAL_BRANCH_NAME = releaseName
  }

  if (! isPromotableBranch(LOCAL_BRANCH_NAME) && currentBuild.rawBuild.getCauses().toString().contains('BranchEventCause')) {
    echo 'Detected a SCM build on a non-promotable branch. Aborting...'
    currentBuild.result = 'SUCCESS'
    return
  }

  try {
    p.common {
      dir("${HOME}/workspace") {
        stage('Checkout Source') {
          def CLONE_DIR = "/home/jenkins/go/src/github.ibm.com/apimesh/${REPO_NAME}"
          portal.copyRepoIntoDirectory(REPO_NAME, CLONE_DIR, "${HOME}/workspace/")

          portal.cloneGitRepoOrMaster('portal-test', LOCAL_BRANCH_NAME, 'velox', null, true)
          portal.cloneGitRepoOrMaster('portal-db', LOCAL_BRANCH_NAME, 'apimesh', null, false)
          portal.cloneGitRepoOrMaster('portal-www', LOCAL_BRANCH_NAME, 'apimesh', null, false)
          portal.cloneGitRepoOrMaster('portal-common', LOCAL_BRANCH_NAME, 'apimesh', null, false)
        }

        withCredentials([[$class      : 'UsernamePasswordMultiBinding', credentialsId: "${credentialsId}",
                      usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASS']]) {
          dir('portal-test'){
            stage('FVT: Install Minikube') {
              try {
                sh "./deploy.sh -I"
              } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                throw err
              } finally {
                def minikubeLogsDirectory = "${env.WORKSPACE}/minikube-logs"
                portal.zipDirectory(minikubeLogsDirectory, "portal-minikube-logs.zip")
              }
            }

            stage('Download installer') {
              if (isPromotableBranch(LOCAL_BRANCH_NAME)) {
                sh "./get_apicups.sh -b ${LOCAL_BRANCH_NAME}"
              } else {
                sh "./get_apicups.sh -b 2018.4.1"
              }

              sh "docker run -d -p 5000:5000 --restart=always --name registry registry:2"
            }

            try {
              stage('Upgrade: standalone') {
                  sh"""
                    ./upgrade_portal_test.sh -v ./use_the_default_service_account.yaml -c -d -s -e -u -t ${LOCAL_BRANCH_NAME}-latest -o ${HOME}/workspace/portal-test/apicup_recent -l ${HOME}/workspace/portal-test/apicup_latest
                    ./run_behat_on_stack.sh portal.default.minikube/path1
                    ./deploy.sh -t
                  """
              }
              stage('Upgrade: clustered') {
                  sh"""
                    ./upgrade_portal_test.sh -r 2 -v ./use_the_default_service_account.yaml -c -d -s -e -u -t ${LOCAL_BRANCH_NAME}-latest -o ${HOME}/workspace/portal-test/apicup_recent -l ${HOME}/workspace/portal-test/apicup_latest
                    ./run_behat_on_stack.sh portal.default.minikube/path1
                  """
              }
            } finally {
              stage("Archive logs") {
                def fvtLogsDirectory = "${env.WORKSPACE}/fvtlogs"
                portal.zipDirectory(fvtLogsDirectory, 'portal-test-k8s-logs.zip')
              }
            }
          }
        }
      }
    }
  } catch (Exception e) {
    p.promotableBranch {
      if (e.class.toString() != "class hudson.AbortException" && currentBuild.result != 'ABORTED') {
        portal.sendSlackNotification(e, 'danger', REPO_NAME, 'apimesh')
      }
    }
    throw e;
  }
}
