#!groovy

// Load shared pipeline library
@Library('velox') _

properties([
		buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '')),
		parameters([
				string(name: 'GIT_COMMIT', defaultValue: scm.branches.get(0).getName(), description: 'The commit/ref to build an image from'),
				booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run Behat Tests')
		]),
		pipelineTriggers([[$class: "TimerTrigger", spec: "H 6-23/3 * * 1-5"]])
])

def pipelineOpts = [
		slackChannel: '',
		labels      : 'portal-taas',
		nodeVersion : 8.12,
]

veloxPipeline(pipelineOpts) { p ->
	def timestamp = sh(script: 'date +%Y%m%d-%H%M', returnStdout: true).trim()
	def server = Artifactory.server 'na-artifactory'
	def buildInfo = Artifactory.newBuildInfo()
	def releaseName = env.CHANGE_ID ? env.CHANGE_TARGET : env.BRANCH_NAME

	// Get relevant info for slack notifications
	env.GIT_COMMIT_URL = "https://github.ibm.com/apimesh/devportal-apim-profile/commit/${env.GIT_COMMIT}"
	env.GIT_COMMIT_MSG = sh (script: 'git log --format=%B -n 1 $GIT_COMMIT | head -n 1', returnStdout: true).trim()
	env.UP_BUILD_URL = getBuildCauses().first().BUILD_URL ?: ''
	env.UP_BUILD_NAME = getBuildCauses().first().BUILD_NAME ?: 'build'

	def sendSlackNotif = { resultMsg, resultColor ->
		def slackChannel = '#sq-spitfire'
		def msg = "[<https://github.ibm.com/apimesh/devportal-apim-profile/tree/${env.BRANCH_NAME}|devportal-apim-profile:${env.BRANCH_NAME}> <${env.BUILD_URL}/console|jenkins/${env.BUILD_NUMBER}>]: <${env.GIT_COMMIT_URL}|${env.GIT_COMMIT_MSG}> " + resultMsg + " Triggered by <${env.UP_BUILD_URL}|${env.UP_BUILD_NAME}>"

		slackSend channel: slackChannel, color: resultColor, message: msg
	}

	p.branch(~/master|([\d]+[\.][\d]+)|([\d]+[\.][\d]+[\.][\d]+)/) {
		// set the primary build identifiers
		buildInfo.setName "portal-apim-profile-${releaseName}"
		buildInfo.setNumber currentBuild.id
		// For easier referencing by other Jenkins builds/jobs
		env.ARTIFACTS_BUILD = "${buildInfo.name}/${buildInfo.number}"
	}

	def commitDesc = sh(returnStdout: true, script: "git describe --all --always --long | sed -E 's%^(heads|remotes/origin)/%%' | tr / -").trim()
	env.BUILD_TIMESTAMP = "${timestamp}"
	env.DOCKER_TAG = "${env.START_TIME}-${commitDesc}"
	env.DOCKER_IMAGE = "${env.DOCKER_REPO}/${env.REPO_SLUG}"
	env.PKG_MANIFEST = "image-package-manifest.tgz"
	env.PKG_APP_FILES = "image-app-files.tgz"
	env.DOCKER_REGISTRY = 'apic-dev-docker-local.artifactory.swg-devops.com'
	env.mainBranch = '2018.4.1'

	p.common {
		try {
			stage('Checkout Source') {
				betterCheckout scm
				npmutils = library('bmxNative').jenkinsLibs.Node.new()
				npmutils.writeDotNpmrc()
			}

			stage('Build') {
				ansiColor('xterm') {
					sshagent(['1bd7e7a9-22d3-4ca5-b000-499bac0f7098']) {
						withCredentials([usernamePassword(credentialsId: '328dda1a-f29d-4758-bc2a-cb79135d0e2f', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {

							// We pull composer packages from artifactory so we need to create an auth.json file so we can log in
							writeFile(file: 'auth.json', text:
									"""{
    "http-basic": {
        "na.artifactory.swg-devops.com": {
            "username": "${USERNAME}",
            "password": "${PASSWORD}"
        }
    }
}
""")

							// run the build
							sh './build.sh'
						}
					}
				}
			}

			stage('Pull portal-site-template Image') {
				try {
					sh "docker pull ${DOCKER_REGISTRY}/velox/portal-site-template:${env.BRANCH_NAME}"
					sh "docker tag ${DOCKER_REGISTRY}/velox/portal-site-template:${env.BRANCH_NAME} portal-site-template:latest"
				} catch (Exception e) {
				    print e;
                    if ("${env.BRANCH_NAME}" != "${env.mainBranch}") {
				        try {
						    sh "docker pull ${DOCKER_REGISTRY}/velox/portal-site-template:${env.mainBranch}"
						    sh "docker tag ${DOCKER_REGISTRY}/velox/portal-site-template:${env.mainBranch} portal-site-template:latest"
				        } catch (Exception f) {
					        print f;
					        if ("${env.mainBranch}" != "master") {
						        sh "docker pull ${DOCKER_REGISTRY}/velox/portal-site-template:master"
						        sh "docker tag ${DOCKER_REGISTRY}/velox/portal-site-template:master portal-site-template:latest"
					        } else {
						        throw f;
					        }
				        }
				    } else if ("${env.mainBranch}" != "master") {
				    	try {
                    		sh "docker pull ${DOCKER_REGISTRY}/velox/portal-site-template:master"
                    		sh "docker tag ${DOCKER_REGISTRY}/velox/portal-site-template:master portal-site-template:latest"
                    	} catch (Exception f) {
                    	    throw f;
                    	}
				    }
				}
			}

			stage('Build Template') {
				ansiColor('xterm') {
					sshagent(['1bd7e7a9-22d3-4ca5-b000-499bac0f7098']) {
						sh './build_site_template.sh'
					}
				}
			}

			stage('Test') {
				if (params.RUN_TESTS == true) {
					try {
						ansiColor('xterm') {
							sshagent(['1bd7e7a9-22d3-4ca5-b000-499bac0f7098']) {
								sh './run_tests_in_template.sh'
							}
						}
					}
					finally {
						archiveArtifacts artifacts: 'tmp/behat/**/*', allowEmptyArchive: true
						archiveArtifacts artifacts: 'tmp/watchdog/*', allowEmptyArchive: true
					}
				}
			}
		} catch (Exception err) {
			echo "${err}"
			sendSlackNotif("Build Failed :x:", 'danger')
			throw err;
		}
	}

	p.branch(~/master|\d+\.\d+|\d+\.\d+\.\d+/) {
		stage('Upload') {
			sh 'cd build; tar cfz platform-and-site-template-8.x-${BUILD_TIMESTAMP}.tgz *.tgz'
			def artifactZip = findFiles(glob: 'build/platform-and-site-template-8.x-*.tgz')[0]
			def artifactPath = "apic-dev-docker-local/portal/apim-profile/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/${artifactZip.name}"
			def uploadSpec = "{ \"files\": [ { \"pattern\": \"./${artifactZip}\", \"target\": \"${artifactPath}\" } ] }"
			server.upload(uploadSpec, buildInfo)
		}

		stage('WWW Image Build') {
			build(job: "velox-portal/portal-www/${env.BRANCH_NAME}", propagate: true, wait: false)
		}
	}
}
