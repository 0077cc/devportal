--- core/modules/file/file.module
+++ core/modules/file/file.module
@@ -959,7 +959,8 @@ function file_save_upload($form_field_name, $validators = [], $destination = FAL
     // rename filename.php.foo and filename.php to filename.php.foo.txt and
     // filename.php.txt, respectively). Don't rename if 'allow_insecure_uploads'
     // evaluates to TRUE.
-    if (!\Drupal::config('system.file')->get('allow_insecure_uploads') && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->getFilename()) && (substr($file->getFilename(), -4) != '.txt')) {
+    $system_file_config = \Drupal::config('system.file');
+    if (!$system_file_config->get('allow_insecure_uploads') && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->getFilename()) && (substr($file->getFilename(), -4) != '.txt')) {
       $file->setMimeType('text/plain');
       // The destination filename will also later be used to create the URI.
       $file->setFilename($file->getFilename() . '.txt');
@@ -989,7 +990,24 @@ function file_save_upload($form_field_name, $validators = [], $destination = FAL
     if (substr($destination, -1) != '/') {
       $destination .= '/';
     }
-    $file->destination = file_destination($destination . $file->getFilename(), $replace);
+
+    $filename = $file->getFilename();
+    // If the transliteration option is enabled, transliterate the filename.
+    if ($system_file_config->get('filename_transliteration')) {
+      // Transliterate and sanitize the destination filename.
+      $filename = \Drupal::transliteration()
+        ->transliterate($filename, $file->language()->getId(), '');
+      // Replace whitespace.
+      $filename = str_replace(' ', '-', $filename);
+      // Remove remaining unsafe characters.
+      $filename = preg_replace('![^0-9A-Za-z_.-]!', '', $filename);
+      // Remove multiple consecutive non-alphabetical characters.
+      $filename = preg_replace('/(_)_+|(\.)\.+|(-)-+/', '\\1\\2\\3', $filename);
+      // Force lowercase to prevent issues on case-insensitive file systems.
+      $filename = mb_strtolower($filename);
+    }
+    $file->destination = file_destination($destination . $filename, $replace);
+
     // If file_destination() returns FALSE then $replace === FILE_EXISTS_ERROR and
     // there's an existing file so we need to bail.
     if ($file->destination === FALSE) {
@@ -1031,6 +1049,10 @@ function file_save_upload($form_field_name, $validators = [], $destination = FAL
       continue;
     }
 
+    // Update the filename with any changes as a result of transliteration or
+    // renaming due to an existing file.
+    $file->setFilename(\Drupal::service('file_system')->basename($file->destination));
+
     // Set the permissions on the new file.
     drupal_chmod($file->getFileUri());
 

--- core/modules/system/config/install/system.file.yml
+++ core/modules/system/config/install/system.file.yml
@@ -3,3 +3,4 @@ default_scheme: 'public'
 path:
   temporary: ''
 temporary_maximum_age: 21600
+filename_transliteration: false

--- core/modules/system/config/schema/system.schema.yml
+++ core/modules/system/config/schema/system.schema.yml
@@ -281,6 +281,9 @@ system.file:
     temporary_maximum_age:
       type: integer
       label: 'Maximum age for temporary files'
+    filename_transliteration:
+      type: boolean
+      label: 'Transliterate names of uploaded files'
 
 system.image:
   type: config_object

--- core/modules/system/src/Form/FileSystemForm.php
+++ core/modules/system/src/Form/FileSystemForm.php
@@ -133,6 +133,13 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#description' => t('Temporary files are not referenced, but are in the file system and therefore may show up in administrative lists. <strong>Warning:</strong> If enabled, temporary files will be permanently deleted and may not be recoverable.'),
     ];
 
+    $form['filename_transliteration'] = [
+      '#type' => 'checkbox',
+      '#title' => t('Enable filename transliteration'),
+      '#default_value' => $config->get('filename_transliteration'),
+      '#description' => t('Transliteration ensures that filenames do not contain unicode characters.'),
+    ];
+
     return parent::buildForm($form, $form_state);
   }
 
@@ -142,7 +149,8 @@ public function buildForm(array $form, FormStateInterface $form_state) {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $config = $this->config('system.file')
       ->set('path.temporary', $form_state->getValue('file_temporary_path'))
-      ->set('temporary_maximum_age', $form_state->getValue('temporary_maximum_age'));
+      ->set('temporary_maximum_age', $form_state->getValue('temporary_maximum_age'))
+      ->set('filename_transliteration', (bool) $form_state->getValue('filename_transliteration'));
 
     if ($form_state->hasValue('file_default_scheme')) {
       $config->set('default_scheme', $form_state->getValue('file_default_scheme'));

--- core/modules/system/system.install
+++ core/modules/system/system.install
@@ -2173,3 +2173,12 @@ function system_update_8501() {
     }
   }
 }
+
+/**
+ * Set filename_transliteration config to the default value.
+ */
+function system_update_8701() {
+  \Drupal::configFactory()->getEditable('system.file')
+    ->set('filename_transliteration', FALSE)
+    ->save();
+}
