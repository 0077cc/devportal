#!groovy

// Load shared pipeline library
@Library('velox') _

// Clean up builds older than 14 days
properties([
  durabilityHint('PERFORMANCE_OPTIMIZED'),
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '14', numToKeepStr: '')),
])

def pipelineOpts = [
  slackChannel: '',
  labels: 'portal-taas',
  nodeVersion: null,
]

veloxPipeline(pipelineOpts) { p ->

  def MODULE_NAME = 'featuredcontent'
  def REPO_NAME = 'devportal-featuredcontent'
  def MAIN_BRANCH = '2018.4.1'

  // Get relevant info for slack notifications
  env.GIT_COMMIT_URL = "https://github.ibm.com/apimesh/${REPO_NAME}/commit/${env.GIT_COMMIT}"
  env.GIT_COMMIT_MSG = sh (script: 'git log --format=%B -n 1 $GIT_COMMIT | head -n 1', returnStdout: true).trim()
  env.UP_BUILD_URL = getBuildCauses().first().BUILD_URL ?: ''
  env.UP_BUILD_NAME = getBuildCauses().first().BUILD_NAME ?: 'build'

  p.common {
    if (!env.GIT_COMMIT_MSG.contains('[ci-skip')) {
      try {

        stage('Pull portal-site-template Image') {
          portal.pullSiteTemplateImage(BRANCH_NAME, MAIN_BRANCH)
        }

        def BUILD_DIR=pwd()

        dir("${HOME}/workspace") {
          stage("Download platform.tgz") {
            portal.downloadPlatformPackage(BRANCH_NAME, MAIN_BRANCH)
          }

          stage('Get modules') {
            portal.prepareModulesForTests(MODULE_NAME, BUILD_DIR, BRANCH_NAME, MAIN_BRANCH)
          }

          stage("Checkout scripts") {
            portal.prepareScriptsForTests()
            sh "echo ${MODULE_NAME} > ${HOME}/workspace/module_name.txt"
          }

          stage("Create site and test") {

            try {
              ansiColor('xterm') {
                sshagent(['1bd7e7a9-22d3-4ca5-b000-499bac0f7098']) {
                  sh './build_container_for_tests.sh '
                }
              }
            }
            catch (err) {
              echo "${err}"
              throw err
            }
            finally {
              archiveArtifacts artifacts: 'tmp/behat/**/*', allowEmptyArchive: true
              archiveArtifacts artifacts: 'tmp/watchdog/*', allowEmptyArchive: true
            }

          }

        }

      }
      catch (err) {
        echo "${err}"
        if (currentBuild.result != 'ABORTED') {
          portal.sendSlackNotification(MODULE_NAME, "Build Failed :x:", 'danger')
        }
        throw err;
      }
    }
  }
  p.promotableBranch {
    if (!env.GIT_COMMIT_MSG.contains('[ci-skip')) {
      stage('bump version') {
        sh "git stash && git pull && git stash pop || true"
          portal.patchModuleVersion(MODULE_NAME)
          sh """
            git commit -m 'bump version [ci-skip]' ${MODULE_NAME}.info.yml || true
            git push --set-upstream origin ${MAIN_BRANCH}
          """
      }
      stage('Upload module to artifactory') {
        portal.uploadComposerPackage(MODULE_NAME)
      }
    }
  }

}
