<?php

/**
 * IBM API Connect Integration
 *
 * Adds the Developer Organization node content type to Drupal for representing developer organizations from IBM APIC
 */

/**
 * Implements hook_node_info().
 *
 * @return array
 */
function devorg_node_info() {
  return array(
    'devorg' => array(
      'name' => t('Developer Organization'),
      'base' => 'devorg',
      'description' => t('A Developer Organization in IBM API Connect')
    )
  );
}

/**
 * Implements hook_help().
 *
 * @param $path
 * @param $arg
 * @return string
 */
function devorg_help($path, $arg) {
  switch ($path) {
    case 'admin/help#devorg' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Developer Organization module provides a new custom node type for use with IBM API Connect.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Select a devorg') . '</dt>';
      $output .= '<dd>' . t("This module is to allow the tracking of developer organization membership in the Developer Portal.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function devorg_theme($existing, $type, $theme, $path) {
  return array(
    'devorg_node_form' => array(
      'render element' => 'form',
      'template' => 'devorg-node-form',

      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ibm_apim') . '/templates'
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 */
function devorg_form_devorg_node_form_alter(&$form, &$form_state) {
  // this function hides all our custom fields from the edit node form as they are all set explicitly
  $form['devorg_name']['#access'] = 0;
  $form['devorg_id']['#access'] = 0;
  $form['devorg_owner']['#access'] = 0;
  $form['devorg_tags']['#access'] = 0;
  $form['devorg_members']['#access'] = 0;
  $form['devorg_apimhostname']['#access'] = 0;
  $form['devorg_providerid']['#access'] = 0;
  $form['devorg_environmentid']['#access'] = 0;
  $form['title']['#access'] = 0;
}

/**
 * Implements hook_form().
 *
 * @param $node
 * @param $form_state
 * @return array
 */
function devorg_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 *
 * @param $node
 * @param $view_mode
 * @return mixed
 */
function devorg_view($node, $view_mode) {
  return $node;
}

/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param $view_mode
 */
function devorg_node_view($node, $view_mode) {
}


/**
 * Implements hook_node_access().
 * This is checking if the specified devorg is accessible to the current user, if not it blocks access.
 *
 * @param $node
 * @param $op
 * @param $account
 * @return int
 */
function devorg_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'devorg' && $op == 'view') {
    return NODE_ACCESS_DENY;
  }
  else {
    return NODE_ACCESS_IGNORE;
  }
}

function _devorg_get_ibm_fields() {
  $ibmfields = array(
    'devorg_id',
    'devorg_name',
    'devorg_members',
    'devorg_apimhostname',
    'devorg_providerid',
    'devorg_environmentid',
    'devorg_owner',
    'devorg_tags'
  );
  return $ibmfields;
}

/**
 * @return array
 */
function _devorg_get_custom_fields() {
  $all_fields = field_info_instances("node", "devorg");
  $keys = array_keys($all_fields);
  $ibmfields = _devorg_get_ibm_fields();

  $diff = array_diff($keys, $ibmfields);
  return $diff;
}

//Creates or updates an existing node. Returns true if a new node was
//created or false if an existing one was updated.
function devorg_createOrUpdateDevorg($devorg) {
  $createdOrUpdated = FALSE;
  $ref = $devorg['id'];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'devorg')
    ->fieldCondition('devorg_id', 'value', $ref);
  $results = $query->execute();

  if (isset($results['node'])) {
    $keys = array_keys($results['node']);
    $node = node_load($keys[0]);
    devorg_updateExistingDevorgNode($node, $devorg);
    $createdOrUpdated = FALSE;
  } else {
    // no existing node for this devorg so create one
    devorg_createNewDevorgNode($devorg);
    $createdOrUpdated = TRUE;
  }

  return $createdOrUpdated;
}

/**
 * @param $consumer
 * @throws \Exception
 */
function devorg_createNewDevorgNode($consumer) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($consumer) && isset($consumer['id'])) {
    // find if there is an existing node for this API (maybe at old version)
    // using x-ibm-name from swagger doc
    // if so then clone it and base new node on that.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'devorg')
      ->fieldCondition('devorg_id', 'value', $consumer['id'])
      ->propertyOrderBy('nid', 'ASC');
    $results = $query->execute();
    if (isset($results) && isset($results['node'])) {
      $org_nids = array_keys($results['node']);
      if (is_array($org_nids) && count($org_nids) > 0) {
        $node = node_load($org_nids[0]);
        if (isset($node)) {
          devorg_updateExistingDevorgNode($node, $consumer);
        }
      }
    }
    else {
      $node = new stdClass();
      $node->type = "devorg";
      node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().

      $node->title = ibm_apim_truncate_string($consumer['title']);
      $node->language = LANGUAGE_NONE;
      $node->uid = 1;
      $node->status = 1;

      $node->devorg_apimhostname[$node->language][] = array(
        'value' => $hostvariable,
        'format' => 'plain_text'
      );
      $node->devorg_providerid[$node->language][] = array(
        'value' => $apim_session['org'],
        'format' => 'plain_text'
      );
      $node->devorg_environmentid[$node->language][] = array(
        'value' => $apim_session['env'],
        'format' => 'plain_text'
      );
      $node->devorg_name[$node->language][] = array(
        'value' => $consumer['name'],
        'format' => 'plain_text'
      );
      $node->devorg_owner[$node->language][] = array(
        'value' => $consumer['owner'],
        'format' => 'plain_text'
      );
      if (!isset($consumer['tags'])) {
        $consumer['tags'] = array();
      }
      $node->devorg_tags[$node->language][] = array(
        'value' => serialize($consumer['tags']),
        'format' => 'plain_text'
      );
      $node->devorg_id[$node->language][] = array(
        'value' => $consumer['id'],
        'format' => 'plain_text'
      );
      if (!isset($consumer['members'])) {
        $consumer['members'] = array();
      }
      $node->devorg_members[$node->language][] = array(
        'value' => serialize($consumer['members']),
        'format' => 'plain_text'
      );
      $node = node_submit($node); // Prepare node for saving
      node_save($node);
    }
  }
}

/**
 * @param $node
 * @param $consumer
 * @throws \Exception
 */
function devorg_updateExistingDevorgNode($node, $consumer) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  $node->title = ibm_apim_truncate_string($consumer['title']);
  $node->devorg_apimhostname[$node->language][0]['value'] = $hostvariable;
  $node->devorg_providerid[$node->language][0]['value'] = $apim_session['org'];
  $node->devorg_environmentid[$node->language][0]['value'] = $apim_session['env'];
  $node->devorg_id[$node->language][0]['value'] = $consumer['id'];
  $node->devorg_name[$node->language][0]['value'] = $consumer['name'];
  $node->devorg_owner[$node->language][0]['value'] = $consumer['owner'];
  if (!isset($consumer['tags'])) {
    $consumer['tags'] = array();
  }
  $node->devorg_tags[$node->language][0]['value'] = serialize($consumer['tags']);
  if (!isset($consumer['members'])) {
    $consumer['members'] = array();
  }
  $node->devorg_members[$node->language][0]['value'] = serialize($consumer['members']);
  node_save($node);
}

/**
 * @param $consumer
 */
function devorg_updateDevorgNode($consumer) {
  if (isset($consumer)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'devorg')
      ->fieldCondition('devorg_id', 'value', $consumer['id']);
    $results = $query->execute();

    if (isset($results['node'])) {
      $keys = array_keys($results['node']);
      $node = node_load($keys[0]);
      devorg_updateExistingDevorgNode($node, $consumer);
    }
  }
}