<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides APIC integration.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\ibm_apim\Exception\ModuleInstallationBlocked;
use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;


/**
 * Implementation of hook_init().
 */
function ibm_apim_init() {
  // not during install
  if (\Drupal::state()->get('install_task') == 'done') {
    if (isset($_SERVER["REMOTE_ADDR"]) && $_SERVER["REMOTE_ADDR"] != '127.0.0.1') {
      // The time stamp should be today's date at 23:59:59 hours in seconds
      // so it is easy to compare with the timestamp in the sessions and users tables
      $date = new DateTime();
      $timestamp = $date->setTime(23, 59, 59)->getTimeStamp();

      $ibm_apim_last_access = \Drupal::state()->get('ibm_apim.last_access', 0);
      if ($ibm_apim_last_access != $timestamp) {
        \Drupal::state()->set('ibm_apim.last_access', $timestamp);
      }
    }
  }
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 *
 * @param $implementations
 * @param $hook
 */
function ibm_apim_module_implements_alter(&$implementations, $hook) {
  if (($hook == 'form_alter' || $hook == 'menu_links_discovered_alter') && isset($implementations['ibm_apim'])) {
    $group = $implementations['ibm_apim'];
    unset($implementations['ibm_apim']);
    $implementations['ibm_apim'] = $group;
  }
}

/**
 *  Implements hook_menu_links_discovered_alter().
 *
 * @param $links
 */
function ibm_apim_menu_links_discovered_alter(&$links) {
  // remove option to create new user
  if (isset($links['user.admin_create'])) {
    unset($links['user.admin_create']);
  }
  // remove duplicate block content link
  if (isset($links['entity.block_content.collection']) && isset($links['block.admin_display_view.block_content.page_1'])) {
    unset($links['entity.block_content.collection']);
  }
  // some config_translation menu entries seem to be missing titles!
  foreach ($links as $key => $link) {
    if (!isset($link['title']) || empty($link['title'])) {
      $links[$key]['title'] = t('Translate');
    }
  }
}

/**
 * Implements hook_user_insert
 *
 * When new users are created force first_time_login to 1
 * This will get changed to 0 by the login redirect
 *
 * @param $account
 */
function ibm_apim_user_insert($account) {
  if ($account->id() != 1) {
    $account->set('first_time_login', 1);
    $account->save();
  }
}

/**
 * Add twig template for My Organization page
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function ibm_apim_theme($existing, $type, $theme, $path) {
  return array(
    'ibm_apim_myorg' => array(
      'variables' => array(
        'images_path' => NULL,
        'myorg' => NULL,
        'myorg_title' => NULL,
        'myorg_name' => NULL,
        'myorg_id' => NULL,
        'myorg_url' => NULL,
        'myorg_owner' => NULL,
        'myorg_members' => NULL,
        'myorg_roles' => NULL,
        'myorg_has_member_manage_perm' => NULL,
        'myorg_has_settings_manage_perm' => NULL,
        'myorg_can_transfer_owner' => NULL,
        'myorg_can_rename_org' => NULL,
        'myorg_can_delete_org' => NULL
      )
    ),
    'ibm_apim_search_icon_block' => array(
      'variables' => array()
    ),
    'ibm_apim_get_started' => array(
      'variables' => array(
        'userHasAppManage' => FALSE,
        'show_register_app' => FALSE,
      )
    ),
    'ibm_apim_noperms' => array(
      'variables' => array(
        'images_path' => drupal_get_path('module', 'ibm_apim')
      )
    ),
    'ibm_apim_support' => array(
      'variables' => array(
        'forum' => TRUE,
        'contact' => TRUE,
        'social' => TRUE
      )
    ),
    'ibm_apim_analytics' => array(
      'variables' => array(
        'consumerorgId' => NULL,
        'catalogId' => NULL,
        'catalogName' => NULL,
        'porgId' => NULL,
        'consumerorgTitle' => NULL,
        'filter' => NULL,
        'filterValue' => NULL,
        'node' => NULL
      )
    ),
    'ibm_apim_status_messages_block' => array(
      'variables' => array(
        'header' => NULL,
        'messages' => NULL
      )
    ),
    'form_subscription_wizard_choose_application' => array(
      'variables' => array()
    ),
    'form_subscription_wizard_confirm_subscribe' => array(
      'variables' => array()
    ),
    'form_subscription_wizard_subscribe_result' => array(
      'variables' => array()
    )
  );
}

/**
 * Need to use our custom content type templates for FAQ
 *
 * @param $variables
 * @param $hook
 * @param $info
 */
function ibm_apim_preprocess(&$variables, $hook, &$info) {
  if ($hook == 'node') {
    $contentTypeToShow = $variables['node']->bundle();
    if ($contentTypeToShow == 'faq') {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      //Load the view mode names.
      $allViewModes = \Drupal::service('entity_display.repository')->getViewModes('node');
      //View mode for this request.
      $viewModeToUse = $variables['view_mode'];
      //Is the view mode defined for nodes?
      if (key_exists($viewModeToUse, $allViewModes)) {
        //Is there a template file for the view modes in the module?
        if ($viewModeToUse == 'full') {
          $templateFileName = 'node--' . $contentTypeToShow;
        }
        else {
          $templateFileName = 'node--' . $contentTypeToShow . '--' . $viewModeToUse;
        }
        $theme_name = \Drupal::theme()->getActiveTheme()->getName();
        $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
        if (file_exists($theme_path . '/templates/node/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = drupal_get_path('theme', $theme_name);
          $info['path'] = drupal_get_path('theme', $theme_name) . '/templates/node';
          $info['template'] = $templateFileName;
        }
        elseif (file_exists($theme_path . '/templates/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = drupal_get_path('theme', $theme_name);
          $info['path'] = drupal_get_path('theme', $theme_name) . '/templates';
          $info['template'] = $templateFileName;
        }
        else {
          $templateFilePath = drupal_get_path('module', 'ibm_apim') . '/templates/' . $templateFileName . '.html.twig';
          if (file_exists($templateFilePath)) {
            $info['theme path'] = drupal_get_path('module', 'ibm_apim');
            $info['path'] = drupal_get_path('module', 'ibm_apim') . '/templates';
            $info['template'] = $templateFileName;
          }
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }

  if ($hook == 'views_exposed_form') {
    $parts = explode('-', $variables['form']['#attributes']['data-drupal-selector']);
    if (count($parts) >= 4 && ($parts[3] == 'applications' || $parts[3] == 'apis' || $parts[3] == 'products' || $parts[3] == 'faqs' || ($parts[3] == 'search' && $parts[4] == 'content'))) {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      $templateFileName = 'views-exposed-form--' . $parts[3];
      if (isset($parts[4]) && !empty($parts[4]) && $parts[4] != 'page') {
        $templateFileName = $templateFileName . '-' . $parts[4];
      }
      // by default use viewname without the 's' to get the module name
      $moduleName = rtrim($parts[3], "s");
      // faq content type comes from this module
      if ($parts[3] == 'faqs' || ($parts[3] == 'search' && $parts[4] == 'content')) {
        $moduleName = 'ibm_apim';
      }
      elseif ($parts[3] == 'applications') {
        $moduleName = 'apic_app';
      }
      elseif ($parts[3] == 'apis') {
        $moduleName = 'apic_api';
      }
      $theme_name = \Drupal::theme()->getActiveTheme()->getName();
      $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
      if (file_exists($theme_path . '/templates/views/' . $templateFileName . '.html.twig')) {
        $info['theme path'] = drupal_get_path('theme', $theme_name);
        $info['path'] = drupal_get_path('theme', $theme_name) . '/templates/views';
        $info['template'] = $templateFileName;
      }
      elseif (file_exists($theme_path . '/templates/' . $templateFileName . '.html.twig')) {
        $info['theme path'] = drupal_get_path('theme', $theme_name);
        $info['path'] = drupal_get_path('theme', $theme_name) . '/templates';
        $info['template'] = $templateFileName;
      }
      else {
        $templateFilePath = drupal_get_path('module', $moduleName) . '/templates/' . $templateFileName . '.html.twig';
        if (file_exists($templateFilePath)) {
          $info['theme path'] = drupal_get_path('module', $moduleName);
          $info['path'] = drupal_get_path('module', $moduleName) . '/templates';
          $info['template'] = $templateFileName;
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }

  if ($hook == 'ibm_apim_myorg' || $hook == 'ibm_apim_analytics') {
    // set analytics variables if it is enabled
    $variables['analytics_access'] = FALSE;
    $analytics_access_check = \Drupal::service('ibm_apim.analytics_access_checker')->access();
    if (isset($analytics_access_check)) {
      $variables['analytics_access'] = $analytics_access_check->isAllowed();
    }
  }

}

/**
 * Use our template for the status report instead
 *
 * @param $theme_registry
 */
function ibm_apim_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_report_general_info']['path'] = drupal_get_path('module', 'ibm_apim') . '/templates';
}

function template_preprocess_status_report_general_info(&$variables) {
  $filename = drupal_get_path('profile', 'apim_profile') . '/apic_version.yaml';
  if (file_exists($filename)) {
    $yaml = yaml_parse_file(drupal_get_path('profile', 'apim_profile') . '/apic_version.yaml');
    $variables['apic'] = array('value' => $yaml['version'], 'description' => $yaml['build']);
  }
  else {
    $variables['apic'] = array('value' => 'undefined', 'description' => t('Could not detect APIC version'));
  }

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('apic_api')) {
    $filename = drupal_get_path('module', 'apic_api') . '/explorer/app/version.json';
    if (file_exists($filename)) {
      $contents = file_get_contents(drupal_get_path('module', 'apic_api') . '/explorer/app/version.json');
      $json = json_decode($contents, TRUE);
      $variables['explorer'] = array(
        'value' => $json['version']['version'],
        'description' => $json['version']['buildDate']
      );
    }
  }
  else {
    $variables['explorer'] = array('value' => 'undefined', 'description' => t('Could not detect Explorer version'));
  }

  $custom_modules = array();
  $custom_themes = array();
  $site_path = \Drupal::service('site.path');
  $dir = new DirectoryIterator($site_path . '/modules');
  foreach ($dir as $fileinfo) {
    if ($fileinfo->isDir() && !$fileinfo->isDot()) {
      $custom_modules[] = $fileinfo->getFilename();
    }
  }
  $dir = new DirectoryIterator($site_path . '/themes');
  foreach ($dir as $fileinfo) {
    if ($fileinfo->isDir() && !$fileinfo->isDot()) {
      $custom_themes[] = $fileinfo->getFilename();
    }
  }
  $variables['custom_modules'] = $custom_modules;
  $variables['custom_themes'] = $custom_themes;
}

/**
 * Preprocess variables for html templates.
 */
function ibm_apim_preprocess_html(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $variables['current_path'] = $current_path_alias;
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('context-' . $current_path_alias);
  // add user registry type to body
  $default_registry = \Drupal::service('ibm_apim.user_registry')->getDefaultRegistry();
  if (isset($default_registry)) {
    $variables['idpType'] = $default_registry->getRegistryType();
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('user-registry-' . $default_registry->getRegistryType());
  }
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (isset($route_name)) {
    $variables['route_name'] = $route_name;
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('route-' . $route_name);
  }

  // add variable with the user registry count - useful for the user management forms
  $urs = \Drupal::service('ibm_apim.user_registry')->getAll();
  $ur_count = count($urs);
  $variables['user_registry_count'] = $ur_count;
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('ur-count-' . $ur_count);

  $pass_reset_token = \Drupal::request()->get('pass-reset-token');
  if (isset($pass_reset_token) && !empty($pass_reset_token)) {
    $variables['pass_reset_token'] = TRUE;
    $variables['attributes']['class'][] = 'pass-reset';
  }

  $account = \Drupal::currentUser();
  $roles = $account->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Add core library to all pages
 *
 * @param array $attachments
 */
function ibm_apim_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'ibm_apim/core';
}

/**
 * remove security kit options that are handled by nginx
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function ibm_apim_form_seckit_settings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['seckit_xss']['csp'])) {
    unset($form['seckit_xss']['csp']);
  }
}

/**
 * Alter the Updater information array.
 *
 * An Updater is a class that knows how to update various parts of the Drupal
 * file system, for example to update modules that have newer releases, or to
 * install a new theme.
 *
 * @param array $updaters
 *   Associative array of updaters as defined through hook_updater_info().
 *   Alter this array directly.
 *
 * @see drupal_get_updaters()
 * @see hook_updater_info()
 */
function ibm_apim_updater_info_alter(&$updaters) {
  // switch to using our custom Updaters
  $updaters['module']['class'] = 'Drupal\ibm_apim\Updater\ApicModule';
  $updaters['theme']['class'] = 'Drupal\ibm_apim\Updater\ApicTheme';
}

/**
 * Implementation of hook_form_alter() to alter the Edit profile form
 * @param $form
 * @param $form_state
 */
function ibm_apim_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form' :
      // We have to hide the elements that password policy module adds so we can replace them with something more compact!
      if (\Drupal::moduleHandler()->moduleExists("password_policy")) {
        $form['auth-apic-password-policy-status']['#weight'] = 7;
        $form['account']['password_policy_status']['#access'] = FALSE;
      }
      break;
    case 'user_form':
      $form['account']['password_policy_status']['#access'] = FALSE;
      break;
    case 'password_policy_general_form':
      // do not support password reset
      if (isset($form['password_reset'])) {
        unset($form['password_reset']);
      }
      break;
    case 'user_pass_reset' :
      // rename the Log in link
      $form['actions']['submit']['#value'] = t('Sign in');
      break;
    case 'system_modules' :
      // The 'Extend' module list page

      // hide the password policy history module
      if (isset($form['modules']['Security']['password_policy_history'])) {
        unset($form['modules']['Security']['password_policy_history']);
      }
      // hide the default search api db module
      if (isset($form['modules']['Search']['search_api_db_defaults'])) {
        unset($form['modules']['Search']['search_api_db_defaults']);
      }
      // hide some core modules
      if (isset($form['modules']['Core']['search'])) {
        unset($form['modules']['Core']['search']);
      }
      if (isset($form['modules']['Core']['syslog'])) {
        unset($form['modules']['Core']['syslog']);
      }
      // hide our test module
      if (isset($form['modules']['IBM API Connect']['apictest'])) {
        unset($form['modules']['IBM API Connect']['apictest']);
      }
      // hide the migration modules
      if (isset($form['modules']['Migration']['migrate_upgrade'])) {
        unset($form['modules']['Migration']['migrate_upgrade']);
      }
      if (isset($form['modules']['Migration']['migrate'])) {
        unset($form['modules']['Migration']['migrate']);
      }
      if (isset($form['modules']['Migration']['migrate_plus'])) {
        unset($form['modules']['Migration']['migrate_plus']);
      }
      if (isset($form['modules']['Migration']['migrate_tools'])) {
        unset($form['modules']['Migration']['migrate_tools']);
      }
      if (isset($form['modules']['Migrate']['field_group_migrate'])) {
        unset($form['modules']['Migrate']['field_group_migrate']);
      }
      if (isset($form['modules']['Examples']['migrate_example_advanced'])) {
        unset($form['modules']['Examples']['migrate_example_advanced']);
      }
      if (isset($form['modules']['Examples']['migrate_example'])) {
        unset($form['modules']['Examples']['migrate_example']);
      }
      if (isset($form['modules']['Core (Experimental)']['migrate_drupal'])) {
        unset($form['modules']['Core (Experimental)']['migrate_drupal']);
      }
      if (isset($form['modules']['Core (Experimental)']['migrate_drupal_ui'])) {
        unset($form['modules']['Core (Experimental)']['migrate_drupal_ui']);
      }
      // blacklist some modules
      $module_blacklist = \Drupal::config('ibm_apim.settings')->get('module_blacklist');
      if (isset($module_blacklist) && !empty($module_blacklist)) {
        foreach ($form['modules'] as $module_package => $modules) {
          if (!is_array($modules)) {
            continue;
          }

          foreach ($modules as $module_name => $module_info) {
            // Checks whether the module is blacklisted.
            if (!in_array($module_name, $module_blacklist)) {
              continue;
            }

            // Skips modules that are already enabled, even if it is blacklisted.
            if ($form['modules'][$module_package][$module_name]['enable']['#default_value'] === TRUE) {
              continue;
            }

            // Alters the module form row, disabling the module installation.
            $form['modules'][$module_package][$module_name]['enable']['#disabled'] = TRUE;
            $form['modules'][$module_package][$module_name]['name']['#markup'] .= " (" . t('blocked') . ")";
            $form['modules'][$module_package][$module_name]['description']['#markup'] .= ' ' . t('WARNING: The installation of this module is being blocked.');
          }
        }
      }
      $form['actions']['submit']['#value'] = t('Enable');

      if (isset($form['modules']['#prefix'])) {
        $existing_modules_msg = $form['modules']['#prefix'];
      }
      else {
        $existing_modules_msg = '';
      }
      $form['modules']['#prefix'] = $existing_modules_msg . '<p>' . t('Below is a list of installed modules. Modules that are installed and enabled are shown with a selected check box. To enable a module, select the check box against the module name, and click Enable.') . '</p>';

      break;
    case 'system_modules_uninstall':
      // prevent uninstall of our modules
      $module_list = array(
        'ibm_apim',
        'apic_api',
        'apic_app',
        'auth_apic',
        'product',
        'consumerorg',
        'featuredcontent',
        'ghmarkdown',
        'socialblock',
        'auth_apic',
        'ibm_log_stdout',
        'eventstream'
      );
      foreach ($module_list as $module) {
        if (isset($form['modules'][$module])) {
          unset($form['modules'][$module]);
        }
      }
      break;
    case 'system_theme_settings':
      // automatically redirect from global settings to the theme specific variant
      // avoids usability issues with filling in a form that wont actually take effect
      if (isset($form['config_key']['#value']) && $form['config_key']['#value'] == 'system.theme.global') {
        $default_theme = \Drupal::config('system.theme')->get('default');
        $redirectUrl = Url::fromRoute('system.theme_settings_theme', ['theme' => $default_theme])->toString();
        $response = new RedirectResponse($redirectUrl);
        $response->send();
      }
      break;
    case 'update_manager_update_form':
      // do not allow updates to modules and themes via the UI, only via fixpack
      $utils = \Drupal::service('ibm_apim.utils');
      $shipped_content_list = array_merge($utils->get_bundled_modules(), $utils->get_bundled_themes());
      $ibm_update_needed = array();
      if (isset($form['projects']) && isset($form['projects']['#options'])) {
        foreach ($form['projects']['#options'] as $projectname => $project) {
          if (in_array($projectname, $shipped_content_list)) {
            unset($form['projects']['#options'][$projectname]);
            $ibm_update_needed[] = $projectname;
          }
        }
      }
      if (isset($form['disabled_projects']) && isset($form['disabled_projects']['#options'])) {
        foreach ($form['disabled_projects']['#options'] as $projectname => $project) {
          if (in_array($projectname, $shipped_content_list)) {
            unset($form['disabled_projects'][$projectname]);
            $ibm_update_needed[] = $projectname;
          }
        }
      }
      if (isset($form['manual_updates'])) {
        $form['manual_updates']['#prefix'] .= '<p>' . t('To update the version of Drupal Core download the latest IBM API Connect release or contact IBM Support.') . '</p>';
      }
      if (count($ibm_update_needed) > 0) {
        $form['ibm_update'] = array(
          '#markup' => '<h2>' . t('IBM APIC Developer Portal Modules') . '</h2><p>' . t('Updates found for the following modules provided by IBM API Connect: %modules.', array('%modules' => implode(",", $ibm_update_needed))) . '</p><p>' . t('To update modules provided by IBM API Connect download the latest API Connect release or contact IBM Support.') . '</p>',
          '#weight' => 150
        );
        // if no updatable modules left remove the table
        if (isset($form['projects']['#options']) && empty($form['projects']['#options'])) {
          unset($form['projects']);
          if (isset($form['actions'])) {
            unset($form['actions']);
          }
        }
        else {
          $form['projects']['#weight'] = 20;
          $form['table_prefix'] = array(
            '#markup' => '<h2>' . t('Custom Modules') . '</h2>',
            '#weight' => 10
          );
        }
      }
      break;
    // remove link to delete our content type
    case 'node_type_edit_form' :
      if (isset($form['type']['#default_value']) && $form['type']['#default_value'] == 'faq') {
        if (isset($form['actions']['delete'])) {
          unset($form['actions']['delete']);
        }
        // remove option to preview faqs since it breaks the book module
        if (isset($form['actions']['preview'])) {
          $form['actions']['preview']['#access'] = FALSE;
        }
      }
      break;
    case 'block_content_basic_edit_form':
      $form['intro'] = array(
        '#markup' => '<p>' . t('Use this form to edit the content of the block. If the block content is HTML then clicking on the \'Source\' button in the editor provides a direct way to edit the HTML markup. Use the \'Translate\' tab above to edit the content for other languages.') . '</p>',
        '#weight' => -50
      );
      break;
    case 'user_admin_settings':
      if (isset($form['password_timeout_settings']['password_reset_timeout'])) {
        $form['password_timeout_settings']['password_reset_timeout']['#title'] = t('Admin password reset timeout');
        $form['password_timeout_settings']['password_reset_timeout']['#description'] = t('Set the timeout in seconds for \'admin\' user one-time login links. The default is 86400 seconds (24 hours). The timeout for normal users is set in the IBM API Connect Cloud Manager.');
      }
      if (isset($form['admin_role']['user_admin_role'])) {
        $form['admin_role']['user_admin_role']['#description'] = t('This role will be automatically assigned new permissions whenever a module is enabled. Changing this setting will not affect existing permissions. (Default value is \'Superuser\' and is recommended to be left set to that.)');
      }
      // remove mention of admin approving accounts since not valid with apim owned URs
      if (isset($form['mail_notification_address'])) {
        $site_config = \Drupal::config('system.site');
        $form['mail_notification_address']['#description'] = t("The email address to be used as the 'from' address for all account notifications listed below. Leave empty to use the default system email address <em>(%site-email).</em>", ['%site-email' => $site_config->get('mail')]);
      }
      break;
    case 'update_settings':
      // since we disable the update emails also remove the settings for it
      if (isset($form['update_notify_emails'])) {
        unset($form['update_notify_emails']);
      }
      if (isset($form['update_notification_threshold'])) {
        unset($form['update_notification_threshold']);
      }
      break;
    case 'search_api_index_edit_form':
      // remove the ability to turn on instant indexing due to the perf impact of it
      if (isset($form['options']['index_directly'])) {
        unset($form['options']['index_directly']);
        if (!isset($form['options'])) {
          $form['options'] = array();
        }
        $form['options']['index_directly'] = array(
          '#type' => 'hidden',
          '#value' => false
        );
      }
      break;
  }

  // Look for any form provided by the contact module and remove preview button
  if (strpos($form_id, 'contact_message_') !== FALSE) {
    $form['actions']['preview']['#access'] = FALSE;
  }
}

/**
 * Remove the Global Theme Settings tab since it isn't any real use
 * and leads users to click on options that dont work
 * instead redirect to the actual theme settings using a hook_form_alter above
 *
 * @param $local_tasks
 */
function ibm_apim_local_tasks_alter(&$local_tasks) {
  unset($local_tasks['system.theme_settings_global']);

  $local_tasks['system.modules_uninstall']['title'] = 'Disable';
}

/**
 * Implements hook_module_preinstall().
 */
function ibm_apim_module_preinstall($module) {
  $module_blacklist = \Drupal::config('ibm_apim.settings')->get('module_blacklist');
  if (!$module_blacklist || !in_array($module, $module_blacklist)) {
    return;
  }

  // Before Drupal invokes the hook hook_module_preinstall() the method
  // install() at Drupal\Core\Extension\ModuleInstaller performs some tasks
  // changing the configs and system files data from the module that is being
  // installed, so, before throw the exception it is necessary performs a
  // rollback to those changes.
  \Drupal::service('ibm_apim.module_installer')->rollbackPreinstall($module);

  throw new ModuleInstallationBlocked("Unable to install '$module' module. The installation of this module is blocked by Module Blacklist.");
}

/**
 * Modify node edit form
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function ibm_apim_form_node_form_alter(&$form, &$form_state, $form_id) {
  $moduleHandler = \Drupal::service('module_handler');
  $node = $form_state->getFormObject()->getEntity();
  if (isset($node)) {
    $nodeBundle = $node->bundle();
    if ($moduleHandler->moduleExists('book')) {
      $allowed_types = \Drupal::config('book.settings')->get('allowed_types');
      // Only show the book part of edit node for nodes of content types defined to be allowed in books
      if (isset($allowed_types) && isset($nodeBundle)) {
        if (!in_array($nodeBundle, array_values($allowed_types)) && isset($form['book'])) {
          unset($form['book']);
        }
      }
    }
    // remove URL Alias option from APIs and Products
    if (isset($nodeBundle) && in_array($nodeBundle, array('api', 'product')) && isset($form['path_settings'])) {
      unset($form['path_settings']);
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function ibm_apim_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // add validator for our apic_pathalias field
  if ($entity_type->id() == 'node' && isset($fields['apic_pathalias']) && !empty($fields['apic_pathalias'])) {
    $fields['apic_pathalias']->addConstraint('ApicPathAlias', []);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function ibm_apim_element_info_alter(array &$types) {
  // This is part of the code needed to suppress the password policy status table.
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'ibm_apim_password_policy_check_constraints_password_confirm_process';
  }
}

/**
 * Custom callback to update the password confirm element.
 *
 * @param mixed $element
 *   Form element of the password confirm form field.
 *
 * @return mixed
 *   Updated form field element.
 */
function ibm_apim_password_policy_check_constraints_password_confirm_process($element) {

  // This is part of the code needed to suppress the password policy status table.
  $element['pass1']['#ajax'] = array(
    'event' => 'change',
    'callback' => 'ibm_apim_password_policy_check_constraints',
    'method' => 'replace',
    'wrapper' => 'ibm-apim-password-policy-status',
    'disable-refocus' => TRUE,
  );

  return $element;
}

/**
 * AJAX callback for user form.
 */
function ibm_apim_password_policy_check_constraints($form, $form_state) {

  $response = array();

  // If there is no password_policy_status element, this is the first render pass of the form
  // so we need to display an initial message rather than saying that the password is good.
  if (!isset($form['account']['password_policy_status'])) {
    return array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('You must enter a password that conforms to the password policies enabled for this site.'),
      '#prefix' => "<div id='ibm-apim-password-policy-status' class='alert alert-danger'>",
      '#suffix' => "</div>"
    );
  }

  // We want to work on the data from the password policy table.
  $dataRows = $form['account']['password_policy_status']['#rows'];
  $status = array();

  // Go through each row, extract the status, check pass/fail and keep the message.
  foreach ($dataRows as $row) {
    $passed = (preg_match('/Fail/', $row['status']) ? FALSE : TRUE);
    if (!$passed) {
      $status[] = "<i class='fa fa-times' aria-hidden='true'></i> " . substr($row['status'], strpos($row['status'], '-') + 2);
      $status[] = "";
    }
  }

  // If there are no fails, just return the 'div' hook point with no content.
  if (count($status) === 0) {
    return array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('Your password meets the password policies required for this site'),
      '#prefix' => "<div id='ibm-apim-password-policy-status' class='alert alert-success'>",
      '#suffix' => "</div>",
    );
  }
  // Otherwise, build up an array of elements.
  else {
    $response[] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => implode("</br>", $status),
      '#title_display' => 'above',
      '#prefix' => "<div id='ibm-apim-password-policy-status' class='alert alert-danger'>",
      '#suffix' => "</div>",
    );
  }

  return $response;
}

/**
 * Entry Trace logging function
 *
 * @param string $function
 * @param null $args
 */
function ibm_apim_entry_trace($function = 'undefined', $args = NULL) {
  $entry_exit_trace = \Drupal::config('ibm_apim.settings')->get('entry_exit_trace');
  if (isset($entry_exit_trace) && $entry_exit_trace == TRUE) {
    \Drupal::logger('ibm_apim')->debug('%function ENTRY Trace input: %data.', array(
      '%function' => $function,
      '%data' => serialize($args)
    ));
  }
}

/**
 * Exit Trace logging function
 *
 * @param string $function
 * @param null $response
 */
function ibm_apim_exit_trace($function = 'undefined', $response = NULL) {
  $entry_exit_trace = \Drupal::config('ibm_apim.settings')->get('entry_exit_trace');
  if (isset($entry_exit_trace) && $entry_exit_trace == TRUE) {
    \Drupal::logger('ibm_apim')->debug('%function EXIT Trace return: %data.', array(
      '%function' => $function,
      '%data' => serialize($response)
    ));
  }
}

/**
 * Implement hook_theme_suggestions_HOOK_alter to insert additional suggestions
 * for some UI elements that we want to theme that drupal doesn't have default
 * twig insertion points for
 **/
function ibm_apim_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  if (isset($variables['element']['#form_id']) && !empty($variables['element']['#form_id'])) {
    $suggestions[] = "form_" . $variables['element']['#form_id'];
  }
  // change password form - different ids for auth_apic vs base drupal
  if ($variables['element']['#form_id'] == 'apic_change_pwd_form') {
    $suggestions[] = "form_change_pwd_form";
  }

  // reset password form
  if ($variables['element']['#form_id'] == 'apic_resetpw' || $variables['element']['#form_id'] == 'user_pass') {
    $suggestions[] = "form_user_pass_form";
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function ibm_apim_preprocess_form_subscription_wizard_choose_application(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function ibm_apim_preprocess_form_subscription_wizard_confirm_subscribe(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function ibm_apim_preprocess_form_subscription_wizard_subscribe_result(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Implements hook_form_FORMID_alter for the file system settings admin form
 */
function ibm_apim_form_system_file_system_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  unset($form['translation_path']);
}

/**
 * Implements hook_form_FORMID_alter for the choose application
 * part of the subscription wizard.
 */
function ibm_apim_form_subscription_wizard_choose_application_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $form['actions']['#prefix'] = '<div class="apic-wizard-navigation">';
  $form['actions']['#suffix'] = '</div>';

}

/**
 * Implements hook_form_FORMID_alter for the subscription confirmation
 * part of the subscription wizard.
 */
function ibm_apim_form_subscription_wizard_confirm_subscribe_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // TODO : in theory changing the text here would be nice but doing so breaks the form submission
  //  $form['actions']['submit']['#value'] = t('Subscribe');
  $form['actions']['#prefix'] = '<div class="apic-wizard-navigation">';
  $form['actions']['#suffix'] = '</div>';

}


/**
 * Ensure forms have an aria-label for accessibility
 *
 * @param $variables
 */
function ibm_apim_preprocess_form(&$variables) {
  // Accessibility - ensure the form has a label
  if (isset($variables['elements']) && isset($variables['elements']['#form_id'])) {
    if ($variables['elements']['#form_id'] == "views_exposed_form") {
      $variables['attributes']['aria-label'] = t('Filter results')->render();
    }
    elseif ($variables['elements']['#form_id'] == "contact-message-feedback-form") {
      $variables['attributes']['aria-label'] = t('Provide feedback')->render();
    }
  }

  // add variable with the user registry count - useful for the user management forms
  $urs = \Drupal::service('ibm_apim.user_registry')->getAll();
  $ur_count = count($urs);
  $variables['user_registry_count'] = $ur_count;

  // set variable as to whether a user managed registry is present or not
  $user_managed_registry_present = FALSE;
  $user_unmanaged_registry_present = FALSE;
  if (isset($urs) && !empty($urs)) {
    foreach ($urs as $registry_url => $registry) {
      if ($registry->isUserManaged()) {
        $user_managed_registry_present = TRUE;
      }
      else {
        $user_unmanaged_registry_present = TRUE;
      }
    }
  }
  $variables['user_managed_registry_present'] = $user_managed_registry_present;
  $variables['user_unmanaged_registry_present'] = $user_unmanaged_registry_present;

  // set a variable for self service onboarding too
  $variables['enable_signup_link'] = \Drupal::state()->get('ibm_apim.selfSignUpEnabled', 0);

  // if there is an invitation token in the session, allow the login link to be displayed regardless of onboarding enabled/disabled
  $jwt = NULL;
  if (!empty($_SESSION['auth_apic'])) {
    $jwt = $_SESSION['auth_apic']['invitation_object'];
    if (!empty($jwt)) {
      $variables['enable_signup_link'] = TRUE;
    }
  }

  $pass_reset_token = \Drupal::request()->get('pass-reset-token');
  if (isset($pass_reset_token) && !empty($pass_reset_token)) {
    $variables['pass_reset_token'] = TRUE;
  }

  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Dynamically add to the ibm_apim/analytics library since the name of the files change every build
 *
 * @param $libraries
 * @param $extension
 */
function ibm_apim_library_info_alter(&$libraries, $extension) {
  if (in_array('analytics', array_keys($libraries))) {
    if (file_exists(drupal_get_path('module', 'ibm_apim') . '/analytics/asset-manifest.json')) {
      $string = file_get_contents(drupal_get_path('module', 'ibm_apim') . '/analytics/asset-manifest.json');
      $json = json_decode($string, TRUE);
      if (isset($json['main.js']) && file_get_contents(drupal_get_path('module', 'ibm_apim') . '/analytics/' . $json['main.js'])) {
        $libraries['analytics']['js']['analytics/' . $json['main.js']] = array(
          'weight' => -1,
          'minified' => TRUE,
          'preprocess' => FALSE
        );
      }
      if (isset($json['main.css']) && file_get_contents(drupal_get_path('module', 'ibm_apim') . '/analytics/' . $json['main.css'])) {
        $libraries['analytics']['css']['component']['analytics/' . $json['main.css']] = array(
          'weight' => -20
        );
      }
    }
  }
}

/**
 * Implements hook_user_login
 *
 * @param $account
 */
function ibm_apim_user_login($account) {
  if (isset($account)) {
    ibm_apim_entry_trace(__FUNCTION__, $account->id());
  }
  else {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  // trigger avatar generation
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('avatars')) {
    $avatar_manager = \Drupal::service('avatars.avatar_manager');
    $avatar_manager->syncAvatar($account);
  }
  ibm_apim_exit_trace(__FUNCTION__, NULL);
}
