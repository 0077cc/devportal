<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides the product integration with APIC.
 */

use Drupal\product\Product;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Access\AccessResultNeutral;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\apic_api\Api;
use Drupal\Component\Utility\Html;

/* Permissions that can be granted */
define('EDIT_ANY_PRODUCT_CONTENT_GRANT', 1);
define('PUBLIC_PRODUCT_GRANT', 2);
define('AUTHENTICATED_PRODUCT_GRANT', 3);
define('SUBSCRIBED_TO_PRODUCT_GRANT', 4);
define('ORG_PRODUCT_GRANT', 5);
define('TAG_PRODUCT_GRANT', 6);

/**
 * Implements hook_node_access_records().
 *
 * For product nodes, create a list of grants for the node based on available
 * capabilities within the node configuration; where the capabilities are
 * specific to individual products, organisations or tags then use realm named
 * after product id, organisation or tag
 *
 * @param $node
 * @return array
 *
 * Note: hook is called when rebuilding permissions
 */
function product_node_access_records($node) {

  $config = \Drupal::config('ibm_apim.settings');
  $acl_debug = $config->get('acl_debug');

  if (isset($acl_debug) && $acl_debug == TRUE) {
    \Drupal::logger('product')->debug('Enter: product_node_access_records');
  }
  $type = is_string($node) ? $node : $node->getType();
  if (isset($acl_debug) && $acl_debug == TRUE) {
    \Drupal::logger('product')->debug('Node type is: %type', array("%type" => var_export($type, TRUE)));
  }

  $grants = array();
  // Only build permissions for product nodes
  if ($type == 'product') {
    if (isset($acl_debug) && $acl_debug == TRUE) {
      \Drupal::logger('product')
        ->debug('Product Title: %title', array("%title" => var_export($node->getTitle(), TRUE)));
    }
    // Only issue grants if product_view is enabled
    if (isset($node->product_view_enabled->value) && $node->product_view_enabled->value == 1) {
      // If the product is deprecated, only allow subscribers
      $state = $node->product_state->value;
      if (!isset($state) || empty($state) || mb_strtolower($state) == 'deprecated') {
        $pref = str_replace("/", "_", $node->apic_url->value);
        $grants[] = array(
          'realm' => 'product_ref_' . $pref,
          'gid' => SUBSCRIBED_TO_PRODUCT_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      } else {
        // Create a grant for 'edit any product content'
        $grants[] = [
          'realm' => 'product',
          'gid' => EDIT_ANY_PRODUCT_CONTENT_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
        // Create a grant for public access if public is set
        if (isset($node->product_visibility_public->value) && $node->product_visibility_public->value == 1) {
          $grants[] = [
            'realm' => 'product',
            'gid' => PUBLIC_PRODUCT_GRANT,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          ];
        }
        // Create a grant for authenticated access if authenticated is set
        if (isset($node->product_visibility_authenticated->value) && $node->product_visibility_authenticated->value == 1) {
          $grants[] = [
            'realm' => 'product',
            'gid' => AUTHENTICATED_PRODUCT_GRANT,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          ];
        }
        // Create a grant for subscription to this node based on product reference
        $pref = str_replace("/", "_", $node->apic_url->value);
        $grants[] = [
          'realm' => 'product_ref_' . $pref,
          'gid' => SUBSCRIBED_TO_PRODUCT_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
        // Create a grant for all organisations (as separate realms) if org visibility is set
        if (isset($node->product_visibility_custom_orgs)) {
          foreach ($node->product_visibility_custom_orgs->getValue() as $customorg) {
            if (isset($customorg['value'])) {
              $url = str_replace("/", "_", $customorg['value']);
              $grants[] = [
                'realm' => 'product_org_' . $url,
                'gid' => ORG_PRODUCT_GRANT,
                'grant_view' => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority' => 0,
              ];
            }
          }
        }
      }
      // Create a grant for all tags (as separate realms) if tag visibility is set
      if (isset($node->product_visibility_custom_tags)) {
        foreach ($node->product_visibility_custom_tags->getValue() as $customtag) {
          if (isset($customtag['value'])) {
            $grants[] = array(
              'realm' => 'product_tag_' . $customtag['value'],
              'gid' => TAG_PRODUCT_GRANT,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 0,
            );
          }
        }
      }
    }
    if (isset($acl_debug) && $acl_debug == TRUE) {
      \Drupal::logger('product')->debug('Grants: %grants', array("%grants" => var_export($grants, TRUE)));
    }
  }
  if (isset($acl_debug) && $acl_debug == TRUE) {
    \Drupal::logger('product')->debug('Exit: product_node_access_records');
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 *
 * @param $account
 * @param $op
 * @return array
 *
 * Note: hook is not called at all when admin logged in
 * Note: hook is called on every login, logout and page load
 */
function product_node_grants($account, $op) {

  $config = \Drupal::config('ibm_apim.settings');
  $acl_debug = $config->get('acl_debug');

  if (isset($acl_debug) && $acl_debug == TRUE) {
    \Drupal::logger('product')->debug('Enter: product_node_grants');
  }

  $grants = array();
  $grants['product'] = array();

  // Grant everyone PUBLIC_PRODUCT_GRANT
  array_push($grants['product'], PUBLIC_PRODUCT_GRANT);

  // If logged in, grant AUTHENTICATED_PRODUCT_GRANT
  if (\Drupal::currentUser()->isAuthenticated()) {
    if (isset($acl_debug) && $acl_debug == TRUE) {
      \Drupal::logger('product')->debug('Account: %name', array("%name" => $account->getDisplayName()));
    }
    array_push($grants['product'], AUTHENTICATED_PRODUCT_GRANT);
  }
  else {
    if (isset($acl_debug) && $acl_debug == TRUE) {
      \Drupal::logger('product')->debug('Account: anonymous');
    }
  }

  $userUtils = \Drupal::service('ibm_apim.user_utils');
  // If 'edit any product content' is set, grant EDIT_ANY_PRODUCT_CONTENT_GRANT
  if ($userUtils->explicitUserAccess('edit any product content')) {
    array_push($grants['product'], EDIT_ANY_PRODUCT_CONTENT_GRANT);
  }

  // Subscriptions and tags are only set for orgs, so only run that code
  // if the user is in a development organisation
  $myorg = $userUtils->getCurrentConsumerOrg();
  if (isset($myorg['url'])) {

    // Grant ORG_PRODUCT_GRANT for a realm representing the user's org
    $orgurl = $myorg['url'];
    $escaped_orgurl = str_replace("/", "_", $orgurl);
    $grants['product_org_' . $escaped_orgurl] = array(ORG_PRODUCT_GRANT);

    // Check for subscriptions, if they exist add a SUBSCRIBED_TO_PRODUCT_GRANT
    // for each subscription to a product-specific realm
    $query = db_query("SELECT subs.application_subscriptions_value as application_subscriptions_value
FROM `node__application_subscriptions` subs
INNER JOIN `node__application_consumer_org_url` apps ON apps.entity_id = subs.entity_id
WHERE (apps.application_consumer_org_url_value = '" . $orgurl . "')");
    $subresults = $query->fetchAll();
    foreach ($subresults as $sub) {
      $sub = unserialize($sub->application_subscriptions_value);
      if (isset($sub) && is_array($sub)) {
        if (isset($sub['product_url'])) {
          $pref = str_replace("/", "_", $sub['product_url']);
          $grants['product_ref_' . $pref] = array(SUBSCRIBED_TO_PRODUCT_GRANT);
        }
      }
    }

    // Check for custom tags, if they exist add a TAG_PRODUCT_GRANT for
    // each tag in a tag-specific realm
    $query = db_query("SELECT tags.consumerorg_tags_value as consumerorg_tags_value
FROM `node__consumerorg_url` id
INNER JOIN `node__consumerorg_tags` tags ON id.entity_id = tags.entity_id
WHERE (id.consumerorg_url_value = '" . $orgurl . "')");
    $doresults = $query->fetchAll();
    $tags = array();
    foreach ($doresults as $do) {
      $tags[] = $do->consumerorg_tags_value;
    }
    if (isset($tags) && is_array($tags) && count($tags) > 0) {
      foreach ($tags as $customtag) {
        if (isset($customtag)) {
          $grants['product_tag_' . $customtag] = array(TAG_PRODUCT_GRANT);
        }
      }
    }

  }

  if (isset($acl_debug) && $acl_debug == TRUE) {
    \Drupal::logger('product')->debug('Grants: %grants', array("%grants" => var_export($grants, TRUE)));
    \Drupal::logger('product')->debug('Exit: product_node_grants');
  }
  return $grants;
}

/**
 * Implements hook_node_access().
 * This is checking if the specified product is accessible to the current user, if not it blocks access.
 *
 * @param \Drupal\node\NodeInterface $node
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
 */
function product_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'product' && $operation == 'view') {
    if (Product::checkAccess($node)) {
      $access = new AccessResultAllowed();
    }
    else {
      $access = new AccessResultForbidden();
    }
  }
  else {
    $access = new AccessResultNeutral();
  }
  return $access;
}

/**
 * Need to use our custom content type templates
 *
 * @param $variables
 * @param $hook
 * @param $info
 */
function product_preprocess(&$variables, $hook, &$info) {
  if ($hook == 'node') {
    $contentTypeToShow = $variables['node']->bundle();
    if ($contentTypeToShow == 'product') {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      //Load the view mode names.
      $allViewModes = \Drupal::service('entity_display.repository')->getViewModes('node');
      //View mode for this request.
      $viewModeToUse = $variables['view_mode'];
      //Is the view mode defined for nodes?
      if (key_exists($viewModeToUse, $allViewModes)) {
        //Is there a template file for the view modes in the module?
        if ($viewModeToUse == 'full') {
          $templateFileName = 'node--' . $contentTypeToShow;
        }
        else {
          $templateFileName = 'node--' . $contentTypeToShow . '--' . $viewModeToUse;
        }

        $theme_name = \Drupal::theme()->getActiveTheme()->getName();
        $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
        if (file_exists($theme_path . '/templates/node/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = drupal_get_path('theme', $theme_name);
          $info['path'] = drupal_get_path('theme', $theme_name) . '/templates/node';
          $info['template'] = $templateFileName;
        } elseif (file_exists($theme_path . '/templates/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = drupal_get_path('theme', $theme_name);
          $info['path'] = drupal_get_path('theme', $theme_name) . '/templates';
          $info['template'] = $templateFileName;
        } else {
          $templateFilePath = drupal_get_path('module', 'product') . '/templates/' . $templateFileName . '.html.twig';
          if (file_exists($templateFilePath)) {
            $info['theme path'] = drupal_get_path('module', 'product');
            $info['path'] = drupal_get_path('module', 'product') . '/templates';
            $info['template'] = $templateFileName;
          }
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }
}

/**
 * @param $variables
 */
function product_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'product') {
    ibm_apim_entry_trace(__FUNCTION__, NULL);

    $keySvg = file_get_contents(drupal_get_path('module', 'product') . '/images/key.svg');
    $variables['key_svg'] = $keySvg;

    // get global settings first
    $config = \Drupal::config('ibm_apim.settings');
    $ibm_apim_show_placeholder_images = $config->get('show_placeholder_images');
    if ($ibm_apim_show_placeholder_images === NULL) {
      $ibm_apim_show_placeholder_images = 1;
    }
    $variables['showPlaceholders'] = $ibm_apim_show_placeholder_images;
    if ($ibm_apim_show_placeholder_images) {
      $placeholderUrl = Product::getPlaceholderImageURL($variables['node']->getTitle());
      $variables['placeholderUrl'] = $placeholderUrl;
    }
    else {
      $variables['placeholderUrl'] = NULL;
    }
    $ibm_apim_show_versions = $config->get('show_versions');
    if ($ibm_apim_show_versions === NULL) {
      $ibm_apim_show_versions = 1;
    }
    $variables['showVersions'] = $ibm_apim_show_versions;

    $selfSignUpEnabled = \Drupal::state()->get('ibm_apim.selfSignUpEnabled');
    if ($selfSignUpEnabled === NULL) {
      $selfSignUpEnabled = 1;
    }
    $variables['selfSignUpEnabled'] = $selfSignUpEnabled;

    // get API count
    $variables['apiCount'] = 0;
    $apiNids = array();
    $productApis = array();

    foreach ($variables['node']->product_apis->getValue() as $arrayValue) {
      $productApis[] = unserialize($arrayValue['value']);
    }
    if (isset($productApis) && is_array($productApis)) {
      $variables['apiCount'] = count($productApis);
    }
    if ($variables['apiCount'] > 0) {
      // pre-process the list of APIs in the product
      $apiNames = array();
      $apiRefs = array();
      foreach ($productApis as $key => $productApi) {
        $apiNames[] = $productApi['name'];
        $apiRefs[$key] = Html::getClass($productApi['name']);
      } // end for
      $query = \Drupal::entityQuery('node');
      $query->condition('type', 'api');
      $query->condition('status', 1);
      $query->condition('apic_ref.value', $apiNames, 'IN');
      $results = $query->execute();
      if (isset($results) && !empty($results)) {
        $apiNids = array_values($results);
      }
      $apiList = array();
      if (count($apiNids) > 0) {
        $apis = Node::loadMultiple($apiNids);

        foreach ($apis as $api) {
          $fid = $api->apic_image->getValue();
          $api_image_url = NULL;
          if (isset($fid) && !empty($fid) && isset($fid[0]['target_id'])) {
          $file = File::load($fid[0]['target_id']);
            if (isset($file)) {
              $api_image_url = $file->toUrl();
            }
          }

          $placeholderUrl = NULL;
          if ($ibm_apim_show_placeholder_images) {
            $placeholderUrl = Api::getPlaceholderImageURL($api->getTitle());
          }
          $swagger = NULL;
          if (isset($api->api_swagger->value)) {
            $swagger = unserialize($api->api_swagger->value);
          }
          $listEntry = array(
            'node' => $api,
            'icon' => $api_image_url,
            'placeholderUrl' => $placeholderUrl,
            'swagger' => $swagger
          );
          $apiList[] = $listEntry;

        } // end for
      }
      $variables['apiList'] = $apiList;
      if ($variables['view_mode'] == 'full' || $variables['view_mode'] == 'subscribewizard') {
        // pre-process the list of plans in the product
        $planArray = array();
        $productPlans = array();
        foreach ($variables['node']->product_plans->getValue() as $arrayValue) {
          $productPlans[] = unserialize($arrayValue['value']);
        }
        if (isset($productPlans) && is_array($productPlans) && count($productPlans) > 0) {
          foreach ($productPlans as $plan) {
            $planid = $variables['node']->apic_url->value . ':' . $plan['name'];
            $planArray[$planid] = product_process_plan($planid, $plan, $apiList, $apiRefs);
            if (isset($plan['deploymentState'])) {
              $planArray[$planid]['deploymentState'] = $plan['deploymentState'];
            }
            if (isset($plan['supersedes'])) {
              $planArray[$planid]['supersedes'] = $plan['supersedes'];
            }
            if (isset($plan['superseded-by'])) {
              $planArray[$planid]['superseded-by'] = $plan['superseded-by'];
            }
            $approvestr = 'false';
            if (isset($plan['approval']) && $plan['approval'] == TRUE) {
              $approvestr = 'true';
            }
            if (!isset($plan['billing-model'])) {
              $plan['billing-model'] = array();
            }
            $planArray[$planid]['billing-info'] = product_parse_billing($plan['billing-model']);
          } // end for
        }
        $variables['plans'] = $productPlans;
        $variables['planList'] = $planArray;
        $billing = FALSE;
        $billing_enabled = \Drupal::state()->get('ibm_apim.billing_enabled');
        if ($billing_enabled) {
          foreach ($productPlans as $planName => $plan) {
            if (isset($plan['billing-model'])) {
              $billing = TRUE;
            }
          }
        }
        $variables['billing'] = $billing;
        $variables['subscribable'] = product_check_product_subscribe($variables['node']);
        $variables['userLoggedIn'] = \Drupal::currentUser()->isAuthenticated();

        $userUtils = \Drupal::service('ibm_apim.user_utils');
        $variables['userHasSubManage'] = $userUtils->checkHasPermission('subscription:manage');

        $docpages = Product::getLinkedPages($variables['node']->id());
        $variables['docpages'] = $docpages;
        $variables['#attached']['library'][] = 'apic_app/subscribe';
      }
    }
    // custom fields
    $view_mode = $variables['view_mode'];
    if ($view_mode == 'full') {
      $view_mode = 'default';
    }
    $entity_view = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.' . $view_mode);
    $field_list = array_keys($entity_view->getComponents());
    $core_fields = array(
      'title',
      'vid',
      'status',
      'nid',
      'revision_log',
      'created',
      'links',
      'addtoany',
      'uid',
      'comment'
    );
    $ibmfields = Product::getIBMFields();
    $merged = array_merge($core_fields, $ibmfields);
    $diff = array_diff($field_list, $merged);
    $variables['custom_fields'] = $diff;
    $variables['#attached']['library'][] = 'ibm_apim/core';
    $variables['#attached']['library'][] = 'product/basic';
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function product_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    // remove link to delete our content type
    case 'node_type_edit_form' :
      if (isset($form['type']['#default_value']) && $form['type']['#default_value'] == 'product') {
        if (isset($form['actions']['delete'])) {
          unset($form['actions']['delete']);
        }
      }
      break;
  }
}

/**
 * Convert the programmatic rate limit into a translatable nicely formatted form
 * @param $value
 * @return null|string
 */
function product_parse_rate_limit($value) {
  ibm_apim_entry_trace(__FUNCTION__, $value);
  if (isset($value)) {
    if (mb_strtolower($value) == 'unlimited') {
      return t('unlimited');
    }
    $utils = \Drupal::service( 'ibm_apim.utils');
    $parts = explode('/', $value);
    $quantity = $parts[0];
    $timeperiod = $parts[1];
    preg_match("~^(\d+)~", $timeperiod, $m);
    if (isset($m[1])) {
      $periodcount = $m[1];
    }
    if (!isset($periodcount)) {
      $periodcount = 1;
    }
    $period = trim(str_replace($periodcount, "", $timeperiod, $i));

    switch ($period) {
      case 'second' :
        return \Drupal::translation()
          ->formatPlural($periodcount, '@quantity calls per second', '@quantity calls per @count seconds', array('@quantity' => $utils->format_number_locale($quantity, 0)));
        break;
      case 'minute':
        return \Drupal::translation()
          ->formatPlural($periodcount, '@quantity calls per minute', '@quantity calls per @count minutes', array('@quantity' => $utils->format_number_locale($quantity, 0)));
        break;
      case 'hour':
        return \Drupal::translation()
          ->formatPlural($periodcount, '@quantity calls per hour', '@quantity calls per @count hours', array('@quantity' => $utils->format_number_locale($quantity, 0)));
        break;
      case 'day':
        return \Drupal::translation()
          ->formatPlural($periodcount, '@quantity calls per day', '@quantity calls per @count days', array('@quantity' => $utils->format_number_locale($quantity, 0)));
        break;
      case 'week':
        return \Drupal::translation()
          ->formatPlural($periodcount, '@quantity calls per week', '@quantity calls per @count weeks', array('@quantity' => $utils->format_number_locale($quantity, 0)));
        break;
    }
  }
  ibm_apim_exit_trace(__FUNCTION__, NULL);
  return NULL;
}

/**
 * @param $planid
 * @param $plan
 * @param $apinodes
 * @param $apiRefs
 * @return array
 */
function product_process_plan($planid, $plan, $apinodes, $apiRefs) {
  ibm_apim_entry_trace(__FUNCTION__, NULL);
  $planarray = array();
  $planarray['nodes'] = array();
  $planarray['data'] = $plan;
  // put a plain API list in the raw plan data so we can index it in the template
  $planarray['data']['apiList'] = array();
  if (isset($planarray['data']['apis']) && !empty($planarray['data']['apis'])) {
    foreach ($planarray['data']['apis'] as $key => $api) {
      $planarray['data']['apiList'][] = $key;
    } // end for
  }
  $planratelimit = product_parse_rate_limit('unlimited');
  if (isset($plan['rate-limits']) || isset($plan['burst-limits'])) {
    $rateLimitCount = 0;
    $burstLimitCount = 0;
    if (isset($plan['rate-limits'])) {
      $rateLimitCount = count($plan['rate-limits']);
    }
    elseif (isset($plan['rate-limit'])) {
      // handle having burst-limits but rate-limit (mix of v5 and v4 schemas)
      $rateLimitCount = 1;
    }
    if (isset($plan['burst-limits'])) {
      $burstLimitCount = count($plan['burst-limits']);
    }
    if ($rateLimitCount == 0) {
      // if no rate limits but there is a burst limit then rate limit assumed to be unlimited
      $plan['rate-limits'][] = array('value' => 'unlimited');
      $rateLimitCount = count($plan['rate-limits']);
    }
    if (($rateLimitCount + $burstLimitCount) > 1) {
      $tooltip = array('#rates' => array(), '#bursts' => array());
      $tooltip['#rateLabel'] = t('Rate limits');
      $tooltip['#burstLabel'] = t('Burst limits');
      if (isset($plan['rate-limits']) && !empty($plan['rate-limits'])) {
        foreach ($plan['rate-limits'] as $ratename => $ratelimit) {
          $tooltip['#rates'][] = product_parse_rate_limit($ratelimit['value']);
        }
      }
      elseif ((!isset($plan['rate-limits']) || empty($plan['rate-limits'])) && isset($plan['rate-limit'])) {
        // handle having burst-limits but rate-limit (mix of v5 and v4 schemas)
        $tooltip['#rates'][] = product_parse_rate_limit($plan['rate-limit']['value']);
      }
      if (isset($plan['burst-limits']) && !empty($plan['burst-limits'])) {
        foreach ($plan['burst-limits'] as $ratename => $ratelimit) {
          $tooltip['#bursts'][] = product_parse_rate_limit($ratelimit['value']);
        }
      }
      $planratelimit = t('@count rate limits *', array('@count' => $rateLimitCount + $burstLimitCount));
    }
    else {
      if ($rateLimitCount > 0) {
        if (!isset($plan['rate-limits']) && isset($plan['rate-limit'])) {
          // handle having burst-limits but rate-limit (mix of v5 and v4 schemas)
          $planratelimit = product_parse_rate_limit($plan['rate-limit']['value']);
        }
        else {
          $planratelimit = product_parse_rate_limit(array_shift($plan['rate-limits'])['value']);
        }
      }
      else {
        $planratelimit = product_parse_rate_limit(array_shift($plan['burst-limits'])['value']);
      }
    }
  }
  elseif (isset($plan['rate-limit']) && isset($plan['rate-limit']['value'])) {
    $planratelimit = product_parse_rate_limit($plan['rate-limit']['value']);
  }
  $planarray['rateLimit'] = $planratelimit;
  if (isset($tooltip)) {
    $planarray['rateData'] = json_encode($tooltip, JSON_UNESCAPED_UNICODE);
  }
  if (isset($plan['approval'])) {
    $planarray['requiresApproval'] = $plan['approval'];
  }
  else {
    $planarray['requiresApproval'] = FALSE;
  }
  $planarray['planId'] = $planid;
  if (is_array($apinodes) && count($apinodes) > 0) {
    foreach ($apinodes as $apinode) {
      $apiSafeNodeRef = Html::getClass($apinode['node']->apic_ref->value);
      $planarray['nodes'][$apiSafeNodeRef] = array();
      $planarray['nodes'][$apiSafeNodeRef]['nid'] = $apinode['node']->id();
      $planarray['nodes'][$apiSafeNodeRef]['enabled'] = FALSE;
      $planarray['nodes'][$apiSafeNodeRef]['title'] = $apinode['node']->getTitle();
      $planarray['nodes'][$apiSafeNodeRef]['protocol'] = $apinode['node']->api_protocol->getValue();
      $planarray['nodes'][$apiSafeNodeRef]['url'] = $apinode['node']->apic_url->getValue();
      $planarray['nodes'][$apiSafeNodeRef]['id'] = $apinode['node']->api_id->getValue();
      $planarray['nodes'][$apiSafeNodeRef]['version'] = $apinode['node']->apic_version->getValue();
      $planarray['nodes'][$apiSafeNodeRef]['resources'] = array();
      $swagger = unserialize($apinode['node']->api_swagger->value);
      if (isset($swagger)) {
        $paths = $swagger['paths'];
        // build up list of resources
        if (is_array($paths)) {
          foreach ($paths as $pathname => $path) {
            $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname] = array();
            foreach ($path as $verb => $op) {
              if (in_array(mb_strtoupper($verb), array(
                'PUT',
                'POST',
                'GET',
                'DELETE',
                'OPTIONS',
                'HEAD',
                'PATCH'
              ))) {
                $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)] = array('enabled' => FALSE);
                $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['rateLimit'] = $planratelimit;
                if (isset($op['x-ibm-soap']['soap-action']) && !empty($op['x-ibm-soap']['soap-action'])) {
                  $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $op['x-ibm-soap']['soap-action'];
                }
              }
            }
          }
        }
      }
      // now mark included apis as enabled
      if (isset($plan['apis']) && !empty($plan['apis'])) {
        foreach ($plan['apis'] as $apiname => $planapi) {
          // only include apis matching the current API
          if ($apiRefs[$apiname] == $apiSafeNodeRef) {
            $planarray['nodes'][$apiSafeNodeRef]['enabled'] = TRUE;
            if (!isset($planarray['nodes'][$apiSafeNodeRef]['resources']) || !is_array($planarray['nodes'][$apiSafeNodeRef]['resources'])) {
              $planarray['nodes'][$apiSafeNodeRef]['resources'] = array();
            }
            if (isset($planapi['operations']) && is_array($planapi['operations'])) {
              foreach ($planapi['operations'] as $resource) {
                if (in_array(mb_strtoupper(mb_strtoupper($resource['operation'])), array(
                  'PUT',
                  'POST',
                  'GET',
                  'DELETE',
                  'OPTIONS',
                  'HEAD',
                  'PATCH'
                ))) {
                  // remove any query param portion of the path
                  $path = mb_strstr($resource['path'], '?', TRUE) ?: $resource['path'];
                  if (!isset($planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])])) {
                    $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])] = array();
                  }
                  $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['enabled'] = TRUE;
                  // include rate limit info
                  $ratelimit = $planratelimit;
                  if (isset($tooltip)) {
                    $optooltip = $tooltip;
                    unset($optooltip['bursts']);
                  }
                  else {
                    unset($optooltip);
                  }
                  if (isset($resource['rate-limits'])) {
                    if (count($resource['rate-limits']) > 1) {
                      $optooltip = array('rates' => array());
                      $optooltip['rateLabel'] = t('Rate limits');
                      $optooltip['burstLabel'] = t('Burst limits');
                      foreach ($resource['rate-limits'] as $ratename => $ratelimit) {
                        $optooltip['rates'][] = product_parse_rate_limit($ratelimit['value']);
                      }
                      $ratelimit = t('@count rate limits *', array('@count' => count($resource['rate-limits'])));
                    }
                    else {
                      $ratelimit = product_parse_rate_limit(array_shift($resource['rate-limits'])['value']);
                    }
                  }
                  elseif (isset($resource['rate-limit']) && isset($resource['rate-limit']['value'])) {
                    $ratelimit = product_parse_rate_limit($resource['rate-limit']['value']);
                  }
                  elseif (isset($plan['rateLimit']['value'])) {
                    $ratelimit = product_parse_rate_limit($plan['rateLimit']['value']);
                  }
                  $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['rateLimit'] = $ratelimit;
                  if (isset($optooltip)) {
                    $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['rateData'] = json_encode($optooltip, JSON_UNESCAPED_UNICODE);
                  }
                  $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['op'] = $resource;
                  if (isset($resource['x-ibm-soap']['soap-action']) && !empty($resource['x-ibm-soap']['soap-action'])) {
                    $pos = strpos($resource['x-ibm-soap']['soap-action'], ':');
                    if ($pos !== FALSE) {
                      $parts = explode(':', $resource['x-ibm-soap']['soap-action']);
                      if (isset($parts[1])) {
                        $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['soap-action'] = $parts[1];
                      }
                      else {
                        $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['soap-action'] = $resource['x-ibm-soap']['soap-action'];
                      }
                    }
                    else {
                      $planarray['nodes'][$apiSafeNodeRef]['resources'][$path][mb_strtoupper($resource['operation'])]['soap-action'] = $resource['x-ibm-soap']['soap-action'];
                    }
                  }
                }
              }
            }
            else {
              //assume all enabled
              foreach ($planarray['nodes'][$apiSafeNodeRef]['resources'] as $pathname => $path) {
                foreach ($path as $verb => $op) {
                  if (in_array(mb_strtoupper($verb), array(
                    'PUT',
                    'POST',
                    'GET',
                    'DELETE',
                    'OPTIONS',
                    'HEAD',
                    'PATCH'
                  ))) {
                    if (!isset($planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)])) {
                      $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)] = array();
                    }
                    $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['enabled'] = TRUE;
                    $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['rateLimit'] = $planratelimit;
                    if (isset($tooltip)) {
                      $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['rateData'] = json_encode($tooltip, JSON_UNESCAPED_UNICODE);
                    }
                    $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['op'] = $op;
                    if (isset($op['soap-action']) && !empty($op['soap-action'])) {
                      $pos = mb_strpos($op['soap-action'], ':');
                      if ($pos !== FALSE) {
                        $parts = explode(':', $op['soap-action']);
                        if (isset($parts[1])) {
                          $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $parts[1];
                        }
                        else {
                          $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $op['soap-action'];
                        }
                      }
                      else {
                        $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $op['soap-action'];
                      }
                    }
                  }
                }
              }
            }
          }
        } // end for
      }
      else {
        // no $plan['apis'] means all enabled
        $planarray['nodes'][$apiSafeNodeRef]['enabled'] = TRUE;
        foreach ($planarray['nodes'][$apiSafeNodeRef]['resources'] as $pathname => $path) {
          foreach ($path as $verb => $op) {
            if (isset($planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)])) {
              $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)] = array();
            }
            $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['enabled'] = TRUE;
            $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['rateLimit'] = $planratelimit;
            if (isset($tooltip)) {
              $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['rateData'] = json_encode($tooltip, JSON_UNESCAPED_UNICODE);
            }
            $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['op'] = $op;
            if (isset($op['soap-action']) && !empty($op['soap-action'])) {
              $pos = mb_strpos($op['soap-action'], ':');
              if ($pos !== FALSE) {
                $parts = explode(':', $op['soap-action']);
                if (isset($parts[1])) {
                  $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $parts[1];
                }
                else {
                  $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $op['soap-action'];
                }
              }
              else {
                $planarray['nodes'][$apiSafeNodeRef]['resources'][$pathname][mb_strtoupper($verb)]['soap-action'] = $op['soap-action'];
              }
            }
          }
        }
      }
    }
  }
  ibm_apim_exit_trace(__FUNCTION__, NULL);
  return $planarray;
}

/**
 * Given a billing object it returns a display string for that price plan
 *
 * @param array $billing
 * @return string
 */
function product_parse_billing($billing = array()) {
  ibm_apim_entry_trace(__FUNCTION__, NULL);
  $text = t("Free");
  $utils = \Drupal::service( 'ibm_apim.utils');

  if (isset($billing['model'])) {
    if (isset($billing['currency']) && $billing['currency'] != 'JPY') {
      $billing['amount'] = $billing['amount'] / 100;
    }
    if ($billing['model'] === 'flat-fee') {
      $text = $utils->format_number_locale($billing['amount']) . ' ' . strtoupper($billing['currency']);
    }
    else {
      if ($billing['model'] === 'stripe_monthly_fixed') {
        $text = t('%length per month', array('%length' => $utils->format_number_locale($billing['amount']) . ' ' . strtoupper($billing['currency'])));
        if ($billing['trial-period-days']) {
          $text .= ' ' . \Drupal::translation()
              ->formatPlural($billing['trial-period-days'], '(%length day trial period)', '(%length days trial period)', array('%length' => $utils->format_number_locale($billing['trial-period-days'])));
        }
      }
      else {
        if ($billing['model'] === 'flat-calls') {
          $text = t('%length per API call per month', array('%length' => $utils->format_number_locale($billing['amount']) . ' ' . strtoupper($billing['currency'])));
          if ($billing['freemium'] && $billing['freeCalls']) {
            $text .= ' ' . \Drupal::translation()
                ->formatPlural($billing['freeCalls'], '(%length call free per month)', '(%length calls free per month)', array('%length' => $utils->format_number_locale($billing['freeCalls'])));
          }
        }
        else {
          if ($billing['model'] === 'credits') {
            $text .= \Drupal::translation()
              ->formatPlural($billing['credits'], '%price for %quantity API Call Credit', '%price for %quantity API Call Credits', array(
                '%price' => $utils->format_number_locale($billing['amount']) . ' ' . strtoupper($billing['currency']),
                '%quantity' => $utils->format_number_locale($billing['credits'])
              ));
          }
        }
      }
    }
  }
  ibm_apim_exit_trace(__FUNCTION__, NULL);
  return $text;
}

/**
 * Check if we have access to subscribe to the specified product Node
 * @param $node
 * @return bool
 */
function product_check_product_subscribe($node) {
  ibm_apim_entry_trace(__FUNCTION__, NULL);
  $returnValue = FALSE;
  if (isset($node)) {

    // Special case for subscription wizard - if you are not logged in, clicking "subscribe" on the product
    // will take you through the login / create account process so just allow all unauthenticated through
    if (\Drupal::currentUser()->isAnonymous()) {
      // even for anonymous we need to block subscribing to deprecated products
      $state = $node->product_state->value;
      if (!isset($state) || empty($state) || mb_strtolower($state) != 'deprecated') {
        $returnValue = TRUE;
      }
    }
    else {
      $loggedIn = TRUE;
      // if not a developer return false
      $userUtils = \Drupal::service('ibm_apim.user_utils');
      if ($userUtils->checkHasPermission('subscription:manage')) {
        // if deprecated then no one has access
        $state = $node->product_state->value;
        if (!isset($state) || empty($state) || mb_strtolower($state) != 'deprecated') {
          // if subscribe disabled then no one has access
          $subscribeEnabled = $node->product_subscribe_enabled->value;
          if (isset($subscribeEnabled) && $subscribeEnabled == 1) {
            // now check specific access

            $myorg = $userUtils->getCurrentConsumerOrg();
            $visibility = array();
            foreach ($node->product_visibility->getValue() as $arrayValue) {
              $visibility = array_merge($visibility, unserialize($arrayValue['value']));
            }
            if (isset($visibility)) {
              if (isset($visibility['subscribe']['type']) && mb_strtolower($visibility['subscribe']['type']) == 'public') {
                $returnValue = TRUE;
              }
              elseif (isset($visibility['subscribe']['type']) && mb_strtolower($visibility['subscribe']['type']) == 'authenticated' && $loggedIn) {
                $returnValue = TRUE;
              }
              elseif (isset($visibility['subscribe']['type']) && mb_strtolower($visibility['subscribe']['type']) == 'custom' && isset($myorg['id'])) {
                foreach ($visibility['subscribe']['orgs'] as $customorg) {
                  if ($customorg == $myorg['id']) {
                    $returnValue = TRUE;
                  }
                }
                if ($returnValue == FALSE) {
                  $query = \Drupal::entityQuery('node');
                  $query->condition('bundle', 'consumerorg');
                  $query->condition('consumerorg_id.value', $myorg['id']);
                  $consumerorgresults = $query->execute();
                  if (isset($consumerorgresults) && !empty($consumerorgresults)) {
                    $first = array_shift($consumerorgresults);
                    $consumerorg = Node::load($first);
                    $tags = $consumerorg->consumerorg_tags->getValue();
                    if (isset($tags) && is_array($tags) && count($tags) > 0) {
                      foreach ($visibility['subscribe']['tags'] as $customtag) {
                        if (isset($customtag) && in_array($customtag, $tags)) {
                          $returnValue = TRUE;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ibm_apim_exit_trace(__FUNCTION__, $returnValue);
  return $returnValue;
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 *
 * @param $implementations
 * @param $hook
 */
function product_module_implements_alter(&$implementations, $hook) {
  if (($hook == 'form_alter' || $hook == 'menu_links_discovered_alter') && isset($implementations['product'])) {
    $group = $implementations['product'];
    unset($implementations['product']);
    $implementations['product'] = $group;
  }
}

/**
 *  Implements hook_menu_links_discovered_alter().
 *
 * @param $links
 */
function product_menu_links_discovered_alter(&$links) {
  // remove link to delete our content type
  if (isset($links['entity.node_type.delete_form.product'])) {
    unset($links['entity.node_type.delete_form.product']);
  }
  // remove link to create content of our content type
  if (isset($links['node.add.product'])) {
    unset($links['node.add.product']);
  }
}

/**
 * Add twig templates
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function product_theme($existing, $type, $theme, $path) {
  return array(
    'product_select' => array(
      'variables' => array(
        'apiNid' => NULL,
        'products' => NULL
      )
    ),
    'product_wrapper' => array(
      'variables' => array(
        'api' => NULL,
        'product' => NULL,
        'showPlaceholders' => TRUE,
        'showVersions' => TRUE
      )
    )
  );
}
